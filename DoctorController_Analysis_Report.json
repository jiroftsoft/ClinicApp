{
  "preflight_report": {
    "controller_path": "Areas/Admin/Controllers/DoctorController.cs",
    "controller_lines": 792,
    "viewmodel_path": "ViewModels/DoctorManagementVM/DoctorCreateEditViewModel.cs",
    "viewmodel_lines": 363,
    "service_interface": "Interfaces/ClinicAdmin/IDoctorCrudService.cs",
    "service_implementation": "Services/ClinicAdmin/DoctorCrudService.cs",
    "repository_interface": "Interfaces/ClinicAdmin/IDoctorCrudRepository.cs",
    "repository_implementation": "Repositories/ClinicAdmin/DoctorCrudRepository.cs",
    "entity_model": "Models/Entities/Clinic.cs (Doctor class, lines 2617-2911)",
    "dbcontext": "Models/IdentityModels.cs (ApplicationDbContext)",
    "contracts_loaded": [
      "CONTRACTS/AI_COMPLIANCE_CONTRACT.md",
      "CONTRACTS/PREFLIGHT_CHECKLIST_CONTRACT.md"
    ]
  },
  "controller_schema": {
    "class_name": "DoctorController",
    "namespace": "ClinicApp.Areas.Admin.Controllers",
    "base_class": "Controller",
    "dependencies": [
      "IDoctorCrudService",
      "ISpecializationService", 
      "ICurrentUserService",
      "IValidator<DoctorCreateEditViewModel>",
      "ILogger"
    ],
    "actions": [
      {
        "name": "Index",
        "http_method": "GET",
        "route": "/Admin/Doctor",
        "parameters": ["DoctorSearchViewModel searchModel"],
        "return_type": "ActionResult",
        "purpose": "نمایش لیست پزشکان با قابلیت جستجو و فیلتر"
      },
      {
        "name": "Create",
        "http_method": "GET",
        "route": "/Admin/Doctor/Create",
        "parameters": [],
        "return_type": "ActionResult",
        "purpose": "نمایش فرم ایجاد پزشک جدید"
      },
      {
        "name": "Create",
        "http_method": "POST",
        "route": "/Admin/Doctor/Create",
        "parameters": ["DoctorCreateEditViewModel model"],
        "return_type": "ActionResult",
        "purpose": "ایجاد پزشک جدید",
        "security": ["ValidateAntiForgeryToken", "ValidateInput(false)"]
      },
      {
        "name": "Edit",
        "http_method": "GET",
        "route": "/Admin/Doctor/Edit/{id}",
        "parameters": ["int id"],
        "return_type": "ActionResult",
        "purpose": "نمایش فرم ویرایش پزشک"
      },
      {
        "name": "Edit",
        "http_method": "POST",
        "route": "/Admin/Doctor/Edit",
        "parameters": ["DoctorCreateEditViewModel model"],
        "return_type": "ActionResult",
        "purpose": "ویرایش پزشک موجود",
        "security": ["ValidateAntiForgeryToken", "ValidateInput(false)"]
      },
      {
        "name": "Details",
        "http_method": "GET",
        "route": "/Admin/Doctor/Details/{id}",
        "parameters": ["int id"],
        "return_type": "ActionResult",
        "purpose": "نمایش جزئیات پزشک"
      },
      {
        "name": "Delete",
        "http_method": "POST",
        "route": "/Admin/Doctor/Delete/{id}",
        "parameters": ["int id"],
        "return_type": "ActionResult",
        "purpose": "حذف نرم پزشک",
        "security": ["ValidateAntiForgeryToken"]
      },
      {
        "name": "Restore",
        "http_method": "POST",
        "route": "/Admin/Doctor/Restore/{id}",
        "parameters": ["int id"],
        "return_type": "ActionResult",
        "purpose": "بازیابی پزشک حذف شده",
        "security": ["ValidateAntiForgeryToken"]
      },
      {
        "name": "ToggleStatus",
        "http_method": "POST",
        "route": "/Admin/Doctor/ToggleStatus/{id}",
        "parameters": ["int id", "bool activate"],
        "return_type": "ActionResult",
        "purpose": "تغییر وضعیت فعال/غیرفعال پزشک",
        "security": ["ValidateAntiForgeryToken"]
      },
      {
        "name": "GetDoctors",
        "http_method": "GET",
        "route": "/Admin/Doctor/GetDoctors",
        "parameters": [],
        "return_type": "JsonResult",
        "purpose": "دریافت لیست پزشکان برای AJAX"
      }
    ],
    "private_methods": [
      "LoadSpecializationsForView()",
      "ValidateModelAsync(DoctorCreateEditViewModel model)",
      "ValidateUniqueConstraintsAsync(DoctorCreateEditViewModel model)",
      "ValidateUniqueConstraintsForEditAsync(DoctorCreateEditViewModel model)",
      "ConvertPersianDate(DoctorCreateEditViewModel model)",
      "ProcessProfileImageUpload(DoctorCreateEditViewModel model)",
      "IsValidImageFile(HttpPostedFileBase file)",
      "ValidateId(int id)"
    ]
  },
  "data_flow": {
    "create_flow": [
      "1. HTTP POST /Admin/Doctor/Create",
      "2. DoctorController.Create(DoctorCreateEditViewModel model)",
      "3. ValidateModelAsync() - FluentValidation",
      "4. ValidateUniqueConstraintsAsync() - Business Rules",
      "5. ConvertPersianDate() - Date Conversion",
      "6. ProcessProfileImageUpload() - File Upload",
      "7. _doctorCrudService.CreateDoctorAsync(model)",
      "8. DoctorCrudService.CreateDoctorAsync()",
      "9. DoctorCrudRepository.CreateAsync()",
      "10. ApplicationDbContext.Doctors.Add()",
      "11. ApplicationDbContext.SaveChangesAsync()",
      "12. Return ServiceResult<Doctor>",
      "13. RedirectToAction('Index')"
    ],
    "read_flow": [
      "1. HTTP GET /Admin/Doctor",
      "2. DoctorController.Index(DoctorSearchViewModel searchModel)",
      "3. _doctorCrudService.GetDoctorsAsync(searchModel)",
      "4. DoctorCrudService.GetDoctorsAsync()",
      "5. DoctorCrudRepository.GetPagedAsync()",
      "6. ApplicationDbContext.Doctors.Where().Skip().Take()",
      "7. Return PagedResult<DoctorIndexViewModel>",
      "8. CreateIndexPageViewModel()",
      "9. Return View(pageViewModel)"
    ],
    "update_flow": [
      "1. HTTP POST /Admin/Doctor/Edit",
      "2. DoctorController.Edit(DoctorCreateEditViewModel model)",
      "3. ValidateModelAsync() - FluentValidation",
      "4. ValidateUniqueConstraintsForEditAsync() - Business Rules",
      "5. ConvertPersianDate() - Date Conversion",
      "6. ProcessProfileImageUpload() - File Upload",
      "7. _doctorCrudService.UpdateDoctorAsync(model)",
      "8. DoctorCrudService.UpdateDoctorAsync()",
      "9. DoctorCrudRepository.UpdateAsync()",
      "10. ApplicationDbContext.Entry().State = Modified",
      "11. ApplicationDbContext.SaveChangesAsync()",
      "12. Return ServiceResult<Doctor>",
      "13. RedirectToAction('Index')"
    ],
    "delete_flow": [
      "1. HTTP POST /Admin/Doctor/Delete/{id}",
      "2. DoctorController.Delete(int id)",
      "3. ValidateId(id) - Input Validation",
      "4. _doctorCrudService.SoftDeleteDoctorAsync(id)",
      "5. DoctorCrudService.SoftDeleteDoctorAsync()",
      "6. DoctorCrudRepository.SoftDeleteAsync()",
      "7. ApplicationDbContext.Doctors.Find().IsDeleted = true",
      "8. ApplicationDbContext.SaveChangesAsync()",
      "9. Return ServiceResult",
      "10. RedirectToAction('Index')"
    ]
  },
  "cross_module_map": {
    "navigation_links": [
      {
        "from": "Doctor/Details.cshtml",
        "to": "DoctorAssignment/Assignments",
        "purpose": "مدیریت انتصابات پزشک",
        "url": "/Admin/DoctorAssignment/Assignments?doctorId={id}"
      },
      {
        "from": "Doctor/Details.cshtml", 
        "to": "DoctorSchedule/Schedule",
        "purpose": "مدیریت برنامه کاری پزشک",
        "url": "/Admin/DoctorSchedule/Schedule?doctorId={id}"
      },
      {
        "from": "DoctorDashboard/Index.cshtml",
        "to": "DoctorReporting/Index",
        "purpose": "گزارش‌گیری پزشکان",
        "url": "/Admin/DoctorReporting/Index"
      },
      {
        "from": "DoctorDashboard/Index.cshtml",
        "to": "DoctorDepartment/Index", 
        "purpose": "مدیریت دپارتمان‌ها",
        "url": "/Admin/DoctorDepartment/Index"
      },
      {
        "from": "DoctorDashboard/Index.cshtml",
        "to": "DoctorServiceCategory/Index",
        "purpose": "صلاحیت‌های خدماتی",
        "url": "/Admin/DoctorServiceCategory/Index"
      }
    ],
    "service_dependencies": [
      {
        "service": "IDoctorCrudService",
        "purpose": "عملیات CRUD اصلی پزشکان",
        "implementation": "DoctorCrudService"
      },
      {
        "service": "ISpecializationService",
        "purpose": "مدیریت تخصص‌های پزشکی",
        "implementation": "SpecializationService"
      },
      {
        "service": "ICurrentUserService",
        "purpose": "مدیریت کاربر جاری",
        "implementation": "CurrentUserService"
      }
    ],
    "entity_relationships": [
      {
        "entity": "Doctor",
        "relationships": [
          "DoctorDepartments (Many-to-Many)",
          "DoctorServiceCategories (Many-to-Many)",
          "DoctorSpecializations (Many-to-Many)",
          "Receptions (One-to-Many)",
          "Appointments (One-to-Many)",
          "Clinic (Many-to-One)"
        ]
      }
    ]
  },
  "issues_checklist": [
    {
      "id": "ISSUE-001",
      "type": "Security",
      "description": "Authorize attribute is commented out on controller class",
      "evidence": {
        "path": "Areas/Admin/Controllers/DoctorController.cs",
        "line": 31,
        "snippet": "//[Authorize(Roles = \"Admin\")]"
      },
      "suggested_change": "Uncomment and properly configure authorization for production use"
    },
    {
      "id": "ISSUE-002", 
      "type": "Security",
      "description": "ValidateInput(false) allows HTML input in Bio field without proper sanitization",
      "evidence": {
        "path": "Areas/Admin/Controllers/DoctorController.cs",
        "line": 148,
        "snippet": "[ValidateInput(false)] // Allow HTML in Bio field"
      },
      "suggested_change": "Implement proper HTML sanitization or use a rich text editor with built-in security"
    },
    {
      "id": "ISSUE-003",
      "type": "Performance",
      "description": "No caching strategy for frequently accessed data like specializations",
      "evidence": {
        "path": "Areas/Admin/Controllers/DoctorController.cs",
        "line": 533,
        "snippet": "private async Task LoadSpecializationsForView()"
      },
      "suggested_change": "Implement caching for specializations list using MemoryCache or Redis"
    },
    {
      "id": "ISSUE-004",
      "type": "Design",
      "description": "Controller has too many responsibilities - file upload, validation, business logic",
      "evidence": {
        "path": "Areas/Admin/Controllers/DoctorController.cs",
        "line": 660,
        "snippet": "private async Task ProcessProfileImageUpload(DoctorCreateEditViewModel model)"
      },
      "suggested_change": "Extract file upload logic to a dedicated service (IFileUploadService)"
    },
    {
      "id": "ISSUE-005",
      "type": "Maintainability",
      "description": "Hard-coded file upload constants in controller",
      "evidence": {
        "path": "Areas/Admin/Controllers/DoctorController.cs",
        "line": 41,
        "snippet": "private const int MaxFileSizeInMB = 2;"
      },
      "suggested_change": "Move configuration to app.config or use IConfiguration"
    },
    {
      "id": "ISSUE-006",
      "type": "Error Handling",
      "description": "Generic exception handling without specific error types",
      "evidence": {
        "path": "Areas/Admin/Controllers/DoctorController.cs",
        "line": 102,
        "snippet": "catch (Exception ex)"
      },
      "suggested_change": "Implement specific exception handling for different error scenarios"
    }
  ],
  "todo_atomic_list": [
    {
      "step_id": "step-001",
      "action": "Enable authorization on DoctorController",
      "justification": "Security requirement for production environment",
      "files": ["Areas/Admin/Controllers/DoctorController.cs"],
      "tests": {
        "unit": ["TestAuthorizedAccess", "TestUnauthorizedAccess"],
        "integration": ["TestControllerAuthorization"]
      },
      "rollback": "git checkout HEAD -- Areas/Admin/Controllers/DoctorController.cs",
      "confidence": "high"
    },
    {
      "step_id": "step-002", 
      "action": "Extract file upload logic to IFileUploadService",
      "justification": "Single Responsibility Principle - controller should not handle file operations",
      "files": [
        "Interfaces/IFileUploadService.cs",
        "Services/FileUploadService.cs",
        "Areas/Admin/Controllers/DoctorController.cs"
      ],
      "tests": {
        "unit": ["TestFileUploadService", "TestFileValidation"],
        "integration": ["TestFileUploadIntegration"]
      },
      "rollback": "git revert <commit-hash>",
      "confidence": "medium"
    },
    {
      "step_id": "step-003",
      "action": "Implement HTML sanitization for Bio field",
      "justification": "Security requirement to prevent XSS attacks",
      "files": [
        "Services/HtmlSanitizationService.cs",
        "Areas/Admin/Controllers/DoctorController.cs"
      ],
      "tests": {
        "unit": ["TestHtmlSanitization", "TestXssPrevention"],
        "integration": ["TestBioFieldSecurity"]
      },
      "rollback": "git checkout HEAD -- Services/HtmlSanitizationService.cs",
      "confidence": "high"
    },
    {
      "step_id": "step-004",
      "action": "Add caching for specializations list",
      "justification": "Performance optimization for frequently accessed data",
      "files": [
        "Services/CachingService.cs",
        "Areas/Admin/Controllers/DoctorController.cs"
      ],
      "tests": {
        "unit": ["TestCachingService", "TestCacheExpiration"],
        "integration": ["TestSpecializationsCaching"]
      },
      "rollback": "git revert <commit-hash>",
      "confidence": "medium"
    },
    {
      "step_id": "step-005",
      "action": "Move configuration constants to app.config",
      "justification": "Configuration management best practice",
      "files": [
        "web.config",
        "Areas/Admin/Controllers/DoctorController.cs"
      ],
      "tests": {
        "unit": ["TestConfigurationLoading"],
        "integration": ["TestConfigurationIntegration"]
      },
      "rollback": "git checkout HEAD -- web.config",
      "confidence": "low"
    },
    {
      "step_id": "step-006",
      "action": "Implement specific exception handling",
      "justification": "Better error handling and user experience",
      "files": ["Areas/Admin/Controllers/DoctorController.cs"],
      "tests": {
        "unit": ["TestSpecificExceptions", "TestErrorMessages"],
        "integration": ["TestExceptionHandling"]
      },
      "rollback": "git revert <commit-hash>",
      "confidence": "medium"
    }
  ]
}
