@model ClinicApp.ViewModels.RegisterPatientViewModel
@{
    ViewBag.Title = "تکمیل پروفایل";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="row justify-content-center">
    <div class="col-md-8">
        <div class="card shadow-sm">
            <div class="card-header bg-success text-white">
                <h4 class="mb-0"><i class="fas fa-user-check me-2"></i>@ViewBag.Title</h4>
                <p class="mb-0">لطفاً اطلاعات خود را وارد کنید تا ثبت‌نام نهایی شود.</p>
            </div>
            <div class="card-body p-4">
                @using (Html.BeginForm("CompleteRegistration", "Account", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { id = "complete-reg-form", role = "form", novalidate = "novalidate" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(false, "", new { @class = "alert alert-danger" })

                    <div class="row g-3">
                        <div class="col-md-6">
                            @Html.LabelFor(model => model.NationalCode, new { @class = "form-label" })
                            @Html.TextBoxFor(model => model.NationalCode, new { @class = "form-control", @readonly = "readonly", @style = "background-color: #e9ecef;" })
                            @Html.HiddenFor(model => model.NationalCode)
                        </div>

                        <div class="col-md-6">
                            @Html.LabelFor(model => model.PhoneNumber, new { @class = "form-label" })
                            @Html.TextBoxFor(model => model.PhoneNumber, new { @class = "form-control", @readonly = "readonly", @style = "background-color: #e9ecef;" })
                            @Html.HiddenFor(model => model.PhoneNumber)
                        </div>

                        <div class="col-md-6">
                            @Html.LabelFor(model => model.FirstName, new { @class = "form-label" })
                            @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control", placeholder = "نام" } })
                            @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                        </div>

                        <div class="col-md-6">
                            @Html.LabelFor(model => model.LastName, new { @class = "form-label" })
                            @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control", placeholder = "نام خانوادگی" } })
                            @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                        </div>

                        <div class="col-md-6">
                            @Html.LabelFor(model => model.BirthDatePersian, new { @class = "form-label" })
                            @Html.TextBoxFor(model => model.BirthDatePersian, new { @class = "form-control", id = "birthdate-picker", placeholder = "مثال: ۱۳۷۰/۰۱/۱۵", autocomplete = "off" })
                            @Html.ValidationMessageFor(model => model.BirthDatePersian, "", new { @class = "text-danger" })
                        </div>

                        <div class="col-md-6">
                            @Html.LabelFor(model => model.Gender, new { @class = "form-label" })
                            @Html.EnumDropDownListFor(model => model.Gender, "جنسیت خود را انتخاب کنید...", new { @class = "form-select" })
                            @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-12">
                            @Html.LabelFor(model => model.Email, new { @class = "form-label" })
                            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", placeholder = "آدرس ایمیل (اختیاری)", type = "email" } })
                            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                        </div>

                        <div class="col-12">
                            @Html.LabelFor(model => model.Address, new { @class = "form-label" })
                            @Html.TextAreaFor(model => model.Address, 3, 0, new { @class = "form-control", placeholder = "آدرس محل سکونت (اختیاری)" })
                            @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <hr class="my-4">

                    <div class="d-grid">
                        <button type="submit" id="submit-button" class="btn btn-lg btn-success">
                            <span class="button-text">
                                <i class="fas fa-check-circle me-2"></i>ثبت‌نام نهایی
                            </span>
                            <span class="spinner-border spinner-border-sm" style="display: none;" role="status"></span>
                        </button>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Html.Partial("_ValidationToasts")

    <script type="text/javascript">
        // اسکریپت ارائه شده در نسخه قبلی کاملا صحیح و بهینه است
        // و نیازی به هیچ تغییری ندارد.
        $(document).ready(function () {

            const ui = {
                form: $('#complete-reg-form'),
                submitButton: $('#submit-button'),
                init: function () {
                    this.initDatePicker();
                    this.initValidation();
                    this.bindFormSubmission();
                },
                initDatePicker: function () {
                    $("#birthdate-picker").pDatepicker({
                        format: 'YYYY/MM/DD',
                        autoClose: true,
                        initialValue: false,
                        observer: true,
                        theme: 'blue',
                        calendar: {
                            persian: {
                                locale: 'fa',
                                leapYearMode: 'astronomical'
                            }
                        },
                        toolbox: {
                            todayBtn: { enabled: true, text: { fa: 'امروز' } },
                            clearBtn: { enabled: true, text: { fa: 'پاک کردن' } }
                        }
                    });
                },
                initValidation: function () {
                    $.validator.setDefaults({
                        highlight: function (element) { $(element).addClass('is-invalid'); },
                        unhighlight: function (element) { $(element).removeClass('is-invalid'); },
                        errorElement: 'div',
                        errorClass: 'invalid-feedback',
                        errorPlacement: function (error, element) {
                            if (element.parent('.input-group').length || element.hasClass('form-select')) {
                                error.insertAfter(element.parent());
                            } else {
                                error.insertAfter(element);
                            }
                        }
                    });
                },
                bindFormSubmission: function () {
                    this.form.on('submit', (e) => {
                        if (this.form.valid()) {
                            this.showSpinner(true);
                        }
                    });
                },
                showSpinner: function (show) {
                    this.submitButton.prop('disabled', show);
                    this.submitButton.find('.button-text').toggle(!show);
                    this.submitButton.find('.spinner-border').toggle(show);
                }
            };

            ui.init();
        });
    </script>
}