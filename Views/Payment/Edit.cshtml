@model ClinicApp.ViewModels.Payment.PaymentTransactionEditViewModel

@{
    ViewBag.Title = "ویرایش تراکنش پرداخت";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid">
    <!-- Header Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card border-warning shadow-sm">
                <div class="card-header bg-warning text-dark">
                    <div class="d-flex justify-content-between align-items-center">
                        <h4 class="mb-0">
                            <i class="fa fa-edit me-2"></i>
                            ویرایش تراکنش پرداخت #@Model.Id
                        </h4>
                        <div class="btn-group" role="group">
                            @Html.ActionLink("بازگشت به لیست", "Index", null, new { 
                                @class = "btn btn-secondary btn-sm",
                                @title = "بازگشت به لیست تراکنش‌ها"
                            })
                            @Html.ActionLink("مشاهده جزئیات", "Details", new { id = Model.Id }, new { 
                                @class = "btn btn-info btn-sm",
                                @title = "مشاهده جزئیات تراکنش"
                            })
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Form -->
    <div class="row">
        <div class="col-lg-8">
            <div class="card border-warning shadow-sm">
                <div class="card-header bg-warning text-dark">
                    <h5 class="mb-0">
                        <i class="fa fa-credit-card me-2"></i>
                        ویرایش اطلاعات تراکنش پرداخت
                    </h5>
                </div>
                <div class="card-body">
                    @using (Html.BeginForm("Edit", "Payment", FormMethod.Post, new { @class = "needs-validation", @novalidate = "novalidate", @id = "payment-form" }))
                    {
                        @Html.AntiForgeryToken()
                        @Html.HiddenFor(m => m.Id)
                        @Html.ValidationSummary(true, "", new { @class = "alert alert-danger" })

                        <div class="row g-3">
                            <!-- Reception Information (Read-only) -->
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="form-label fw-bold">شناسه پذیرش:</label>
                                    <p class="form-control-plaintext">
                                        <span class="badge bg-info">#@Model.ReceptionId</span>
                                        @Html.ActionLink("مشاهده پذیرش", "Details", "Reception", new { id = Model.ReceptionId }, new { 
                                            @class = "btn btn-outline-info btn-sm ms-2",
                                            @title = "مشاهده جزئیات پذیرش"
                                        })
                                    </p>
                                </div>
                            </div>

                            <!-- Amount -->
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.Amount, new { @class = "form-label fw-bold" })
                                    <div class="input-group">
                                        @Html.TextBoxFor(m => m.Amount, new { 
                                            @class = "form-control" + (Html.ViewData.ModelState.IsValidField("Amount") ? "" : " is-invalid"),
                                            @type = "number",
                                            @step = "0.01",
                                            @min = "0.01",
                                            @required = "required",
                                            @placeholder = "0.00",
                                            @id = "amount-input"
                                        })
                                        <span class="input-group-text">تومان</span>
                                    </div>
                                    @Html.ValidationMessageFor(m => m.Amount, "", new { @class = "invalid-feedback" })
                                </div>
                            </div>

                            <!-- Payment Method -->
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.Method, new { @class = "form-label fw-bold" })
                                    @Html.DropDownListFor(m => m.Method, 
                                        new SelectList(Enum.GetValues(typeof(ClinicApp.Models.Enums.PaymentMethod))
                                            .Cast<ClinicApp.Models.Enums.PaymentMethod>()
                                            .Select(x => new { Value = x, Text = GetPaymentMethodDisplayName(x) }), 
                                            "Value", "Text", Model.Method), 
                                        "انتخاب روش پرداخت...", 
                                        new { 
                                            @class = "form-select" + (Html.ViewData.ModelState.IsValidField("Method") ? "" : " is-invalid"),
                                            @required = "required",
                                            @id = "payment-method-select"
                                        })
                                    @Html.ValidationMessageFor(m => m.Method, "", new { @class = "invalid-feedback" })
                                </div>
                            </div>

                            <!-- Status -->
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.Status, new { @class = "form-label fw-bold" })
                                    @Html.DropDownListFor(m => m.Status, 
                                        new SelectList(Enum.GetValues(typeof(ClinicApp.Models.Enums.PaymentStatus))
                                            .Cast<ClinicApp.Models.Enums.PaymentStatus>()
                                            .Select(x => new { Value = x, Text = GetPaymentStatusDisplayName(x) }), 
                                            "Value", "Text", Model.Status), 
                                        "انتخاب وضعیت...", 
                                        new { 
                                            @class = "form-select" + (Html.ViewData.ModelState.IsValidField("Status") ? "" : " is-invalid"),
                                            @required = "required",
                                            @id = "status-select"
                                        })
                                    @Html.ValidationMessageFor(m => m.Status, "", new { @class = "invalid-feedback" })
                                </div>
                            </div>

                            <!-- Transaction ID -->
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.TransactionId, new { @class = "form-label fw-bold" })
                                    @Html.TextBoxFor(m => m.TransactionId, new { 
                                        @class = "form-control" + (Html.ViewData.ModelState.IsValidField("TransactionId") ? "" : " is-invalid"),
                                        @placeholder = "شناسه تراکنش (اختیاری)",
                                        @id = "transaction-id-input"
                                    })
                                    @Html.ValidationMessageFor(m => m.TransactionId, "", new { @class = "invalid-feedback" })
                                    <div class="form-text">
                                        <i class="fa fa-info-circle me-1"></i>
                                        شناسه تراکنش از سیستم پرداخت خارجی
                                    </div>
                                </div>
                            </div>

                            <!-- Reference Code -->
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.ReferenceCode, new { @class = "form-label fw-bold" })
                                    @Html.TextBoxFor(m => m.ReferenceCode, new { 
                                        @class = "form-control" + (Html.ViewData.ModelState.IsValidField("ReferenceCode") ? "" : " is-invalid"),
                                        @placeholder = "کد مرجع (اختیاری)",
                                        @id = "reference-code-input"
                                    })
                                    @Html.ValidationMessageFor(m => m.ReferenceCode, "", new { @class = "invalid-feedback" })
                                </div>
                            </div>

                            <!-- Receipt Number -->
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.ReceiptNo, new { @class = "form-label fw-bold" })
                                    @Html.TextBoxFor(m => m.ReceiptNo, new { 
                                        @class = "form-control" + (Html.ViewData.ModelState.IsValidField("ReceiptNo") ? "" : " is-invalid"),
                                        @placeholder = "شماره رسید (اختیاری)",
                                        @id = "receipt-no-input"
                                    })
                                    @Html.ValidationMessageFor(m => m.ReceiptNo, "", new { @class = "invalid-feedback" })
                                </div>
                            </div>

                            <!-- POS Terminal (conditional) -->
                            <div class="col-md-6" id="pos-terminal-group" style="display: none;">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.PosTerminalId, new { @class = "form-label fw-bold" })
                                    @Html.DropDownListFor(m => m.PosTerminalId, 
                                        new SelectList(ViewBag.PosTerminals ?? new List<object>(), "Id", "Name", Model.PosTerminalId), 
                                        "انتخاب ترمینال POS...", 
                                        new { 
                                            @class = "form-select",
                                            @id = "pos-terminal-select"
                                        })
                                    @Html.ValidationMessageFor(m => m.PosTerminalId, "", new { @class = "invalid-feedback" })
                                </div>
                            </div>

                            <!-- Payment Gateway (conditional) -->
                            <div class="col-md-6" id="payment-gateway-group" style="display: none;">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.PaymentGatewayId, new { @class = "form-label fw-bold" })
                                    @Html.DropDownListFor(m => m.PaymentGatewayId, 
                                        new SelectList(ViewBag.PaymentGateways ?? new List<object>(), "Id", "Name", Model.PaymentGatewayId), 
                                        "انتخاب درگاه پرداخت...", 
                                        new { 
                                            @class = "form-select",
                                            @id = "payment-gateway-select"
                                        })
                                    @Html.ValidationMessageFor(m => m.PaymentGatewayId, "", new { @class = "invalid-feedback" })
                                </div>
                            </div>

                            <!-- Cash Session (conditional) -->
                            <div class="col-md-6" id="cash-session-group" style="display: none;">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.CashSessionId, new { @class = "form-label fw-bold" })
                                    @Html.DropDownListFor(m => m.CashSessionId, 
                                        new SelectList(ViewBag.CashSessions ?? new List<object>(), "Id", "DisplayName", Model.CashSessionId), 
                                        "انتخاب جلسه نقدی...", 
                                        new { 
                                            @class = "form-select",
                                            @id = "cash-session-select"
                                        })
                                    @Html.ValidationMessageFor(m => m.CashSessionId, "", new { @class = "invalid-feedback" })
                                </div>
                            </div>

                            <!-- Description -->
                            <div class="col-12">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.Description, new { @class = "form-label fw-bold" })
                                    @Html.TextAreaFor(m => m.Description, new { 
                                        @class = "form-control" + (Html.ViewData.ModelState.IsValidField("Description") ? "" : " is-invalid"),
                                        @rows = "3",
                                        @placeholder = "توضیحات اضافی (اختیاری)",
                                        @id = "description-textarea"
                                    })
                                    @Html.ValidationMessageFor(m => m.Description, "", new { @class = "invalid-feedback" })
                                </div>
                            </div>
                        </div>

                        <!-- Form Actions -->
                        <div class="row mt-4">
                            <div class="col-12">
                                <div class="d-flex justify-content-end gap-2">
                                    @Html.ActionLink("انصراف", "Details", new { id = Model.Id }, new { 
                                        @class = "btn btn-secondary",
                                        @title = "انصراف و بازگشت به جزئیات"
                                    })
                                    <button type="submit" class="btn btn-warning" id="submit-btn">
                                        <i class="fa fa-save me-1"></i>
                                        ذخیره تغییرات
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Current Information and Help -->
        <div class="col-lg-4">
            <!-- Current Transaction Info -->
            <div class="card border-info shadow-sm mb-4">
                <div class="card-header bg-info text-white">
                    <h6 class="mb-0">
                        <i class="fa fa-info-circle me-2"></i>
                        اطلاعات فعلی تراکنش
                    </h6>
                </div>
                <div class="card-body">
                    <div class="row g-2">
                        <div class="col-12">
                            <label class="form-label fw-bold">تاریخ ایجاد:</label>
                            <p class="form-control-plaintext">
                                <i class="fa fa-calendar me-1"></i>
                                @Model.CreatedAt.ToString("yyyy/MM/dd HH:mm:ss")
                            </p>
                        </div>
                        <div class="col-12">
                            <label class="form-label fw-bold">ایجاد شده توسط:</label>
                            <p class="form-control-plaintext">
                                <i class="fa fa-user me-1"></i>
                                @(Model.CreatedByUser?.UserName ?? "سیستم")
                            </p>
                        </div>
                        @if (Model.UpdatedAt.HasValue)
                        {
                            <div class="col-12">
                                <label class="form-label fw-bold">آخرین بروزرسانی:</label>
                                <p class="form-control-plaintext">
                                    <i class="fa fa-calendar me-1"></i>
                                    @Model.UpdatedAt.Value.ToString("yyyy/MM/dd HH:mm:ss")
                                </p>
                            </div>
                        }
                        @if (Model.UpdatedByUser != null)
                        {
                            <div class="col-12">
                                <label class="form-label fw-bold">آخرین بروزرسانی توسط:</label>
                                <p class="form-control-plaintext">
                                    <i class="fa fa-user me-1"></i>
                                    @Model.UpdatedByUser.UserName
                                </p>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Edit History -->
            <div class="card border-secondary shadow-sm mb-4">
                <div class="card-header bg-secondary text-white">
                    <h6 class="mb-0">
                        <i class="fa fa-history me-2"></i>
                        تاریخچه تغییرات
                    </h6>
                </div>
                <div class="card-body">
                    <div class="timeline">
                        <div class="timeline-item">
                            <div class="timeline-marker bg-success"></div>
                            <div class="timeline-content">
                                <h6 class="timeline-title">ایجاد تراکنش</h6>
                                <p class="timeline-text">
                                    <small class="text-muted">
                                        @Model.CreatedAt.ToString("yyyy/MM/dd HH:mm")
                                        توسط @(Model.CreatedByUser?.UserName ?? "سیستم")
                                    </small>
                                </p>
                            </div>
                        </div>
                        @if (Model.UpdatedAt.HasValue)
                        {
                            <div class="timeline-item">
                                <div class="timeline-marker bg-warning"></div>
                                <div class="timeline-content">
                                    <h6 class="timeline-title">آخرین ویرایش</h6>
                                    <p class="timeline-text">
                                        <small class="text-muted">
                                            @Model.UpdatedAt.Value.ToString("yyyy/MM/dd HH:mm")
                                            توسط @(Model.UpdatedByUser?.UserName ?? "سیستم")
                                        </small>
                                    </p>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Form Validation Status -->
            <div class="card border-secondary shadow-sm">
                <div class="card-header bg-secondary text-white">
                    <h6 class="mb-0">
                        <i class="fa fa-check-circle me-2"></i>
                        وضعیت اعتبارسنجی
                    </h6>
                </div>
                <div class="card-body">
                    <div id="validation-status">
                        <div class="d-flex align-items-center text-muted">
                            <i class="fa fa-circle-o me-2"></i>
                            <small>فرم آماده ذخیره است</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Success/Error Toast Container -->
<div class="toast-container position-fixed top-0 end-0 p-3">
    <div id="success-toast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header bg-success text-white">
            <i class="fa fa-check-circle me-2"></i>
            <strong class="me-auto">موفقیت</strong>
            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="بستن"></button>
        </div>
        <div class="toast-body" id="success-message">
            تراکنش با موفقیت بروزرسانی شد.
        </div>
    </div>
    
    <div id="error-toast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header bg-danger text-white">
            <i class="fa fa-exclamation-circle me-2"></i>
            <strong class="me-auto">خطا</strong>
            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="بستن"></button>
        </div>
        <div class="toast-body" id="error-message">
            خطایی در بروزرسانی تراکنش رخ داده است.
        </div>
    </div>
</div>

@functions {
    string GetPaymentMethodDisplayName(ClinicApp.Models.Enums.PaymentMethod method)
    {
        return method switch
        {
            ClinicApp.Models.Enums.PaymentMethod.Cash => "پرداخت نقدی",
            ClinicApp.Models.Enums.PaymentMethod.POS => "پرداخت با کارت (POS)",
            ClinicApp.Models.Enums.PaymentMethod.Online => "پرداخت آنلاین",
            ClinicApp.Models.Enums.PaymentMethod.Debt => "بدهی",
            _ => method.ToString()
        };
    }

    string GetPaymentStatusDisplayName(ClinicApp.Models.Enums.PaymentStatus status)
    {
        return status switch
        {
            ClinicApp.Models.Enums.PaymentStatus.Success => "موفق",
            ClinicApp.Models.Enums.PaymentStatus.Failed => "ناموفق",
            ClinicApp.Models.Enums.PaymentStatus.Pending => "در انتظار",
            ClinicApp.Models.Enums.PaymentStatus.Canceled => "لغو شده",
            _ => status.ToString()
        };
    }
}

@section Scripts {
    <script type="text/javascript">
        $(document).ready(function () {
            // Payment method change handler
            $('#payment-method-select').on('change', function() {
                var selectedMethod = $(this).val();
                togglePaymentMethodFields(selectedMethod);
            });

            // Form validation
            $('#payment-form').on('submit', function(e) {
                if (!this.checkValidity()) {
                    e.preventDefault();
                    e.stopPropagation();
                }
                $(this).addClass('was-validated');
            });

            // Real-time validation
            $('input, select, textarea').on('blur', function() {
                validateField($(this));
            });

            // Initialize
            var initialMethod = $('#payment-method-select').val();
            if (initialMethod) {
                togglePaymentMethodFields(initialMethod);
            }
        });

        function togglePaymentMethodFields(method) {
            // Hide all conditional fields
            $('#pos-terminal-group, #payment-gateway-group, #cash-session-group').hide();
            $('#pos-terminal-select, #payment-gateway-select, #cash-session-select').removeAttr('required');

            // Show relevant fields based on method
            switch (method) {
                case 'POS':
                    $('#pos-terminal-group').show();
                    $('#pos-terminal-select').attr('required', 'required');
                    break;
                case 'Online':
                    $('#payment-gateway-group').show();
                    $('#payment-gateway-select').attr('required', 'required');
                    break;
                case 'Cash':
                    $('#cash-session-group').show();
                    $('#cash-session-select').attr('required', 'required');
                    break;
            }
        }

        function validateField(field) {
            var isValid = field[0].checkValidity();
            if (isValid) {
                field.removeClass('is-invalid').addClass('is-valid');
            } else {
                field.removeClass('is-valid').addClass('is-invalid');
            }
            updateValidationStatus();
        }

        function updateValidationStatus() {
            var form = $('#payment-form')[0];
            var isValid = form.checkValidity();
            var statusDiv = $('#validation-status');
            
            if (isValid) {
                statusDiv.html(`
                    <div class="d-flex align-items-center text-success">
                        <i class="fa fa-check-circle me-2"></i>
                        <small>فرم آماده ذخیره است</small>
                    </div>
                `);
            } else {
                statusDiv.html(`
                    <div class="d-flex align-items-center text-warning">
                        <i class="fa fa-exclamation-triangle me-2"></i>
                        <small>لطفاً فیلدهای الزامی را تکمیل کنید</small>
                    </div>
                `);
            }
        }

        function showToast(type, message) {
            var toastId = type === 'success' ? '#success-toast' : '#error-toast';
            var messageId = type === 'success' ? '#success-message' : '#error-message';
            
            $(messageId).text(message);
            var toast = new bootstrap.Toast(document.querySelector(toastId));
            toast.show();
        }
    </script>
}

<style>
.timeline {
    position: relative;
    padding-left: 30px;
}

.timeline-item {
    position: relative;
    margin-bottom: 20px;
}

.timeline-marker {
    position: absolute;
    left: -30px;
    top: 0;
    width: 12px;
    height: 12px;
    border-radius: 50%;
    border: 2px solid #fff;
    box-shadow: 0 0 0 2px #dee2e6;
}

.timeline-content {
    background: #f8f9fa;
    padding: 10px;
    border-radius: 5px;
    border-left: 3px solid #dee2e6;
}

.timeline-title {
    margin: 0 0 5px 0;
    font-size: 14px;
    font-weight: 600;
}

.timeline-text {
    margin: 0;
    font-size: 12px;
}
</style>
