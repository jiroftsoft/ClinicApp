@model ClinicApp.ViewModels.Payment.PaymentTransactionCreateViewModel

@{
    ViewBag.Title = "ثبت تراکنش پرداخت جدید";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid">
    <!-- Header Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card border-primary shadow-sm">
                <div class="card-header bg-primary text-white">
                    <div class="d-flex justify-content-between align-items-center">
                        <h4 class="mb-0">
                            <i class="fa fa-plus-circle me-2"></i>
                            ثبت تراکنش پرداخت جدید
                        </h4>
                        <div class="btn-group" role="group">
                            @Html.ActionLink("بازگشت به لیست", "Index", null, new { 
                                @class = "btn btn-secondary btn-sm",
                                @title = "بازگشت به لیست تراکنش‌ها"
                            })
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Form -->
    <div class="row">
        <div class="col-lg-8">
            <div class="card border-success shadow-sm">
                <div class="card-header bg-success text-white">
                    <h5 class="mb-0">
                        <i class="fa fa-credit-card me-2"></i>
                        اطلاعات تراکنش پرداخت
                    </h5>
                </div>
                <div class="card-body">
                    @using (Html.BeginForm("Create", "Payment", FormMethod.Post, new { @class = "needs-validation", @novalidate = "novalidate", @id = "payment-form" }))
                    {
                        @Html.AntiForgeryToken()
                        @Html.ValidationSummary(true, "", new { @class = "alert alert-danger" })

                        <div class="row g-3">
                            <!-- Reception Selection -->
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.ReceptionId, new { @class = "form-label fw-bold" })
                                    @Html.DropDownListFor(m => m.ReceptionId, 
                                        new SelectList(ViewBag.Receptions ?? new List<object>(), "Id", "DisplayName", Model.ReceptionId), 
                                        "انتخاب پذیرش...", 
                                        new { 
                                            @class = "form-select" + (Html.ViewData.ModelState.IsValidField("ReceptionId") ? "" : " is-invalid"),
                                            @required = "required",
                                            @id = "reception-select"
                                        })
                                    @Html.ValidationMessageFor(m => m.ReceptionId, "", new { @class = "invalid-feedback" })
                                    <div class="form-text">
                                        <i class="fa fa-info-circle me-1"></i>
                                        پذیرش مورد نظر را انتخاب کنید
                                    </div>
                                </div>
                            </div>

                            <!-- Amount -->
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.Amount, new { @class = "form-label fw-bold" })
                                    <div class="input-group">
                                        @Html.TextBoxFor(m => m.Amount, new { 
                                            @class = "form-control" + (Html.ViewData.ModelState.IsValidField("Amount") ? "" : " is-invalid"),
                                            @type = "number",
                                            @step = "0.01",
                                            @min = "0.01",
                                            @required = "required",
                                            @placeholder = "0.00",
                                            @id = "amount-input"
                                        })
                                        <span class="input-group-text">تومان</span>
                                    </div>
                                    @Html.ValidationMessageFor(m => m.Amount, "", new { @class = "invalid-feedback" })
                                </div>
                            </div>

                            <!-- Payment Method -->
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.Method, new { @class = "form-label fw-bold" })
                                    @Html.DropDownListFor(m => m.Method, 
                                        new SelectList(Enum.GetValues(typeof(ClinicApp.Models.Enums.PaymentMethod))
                                            .Cast<ClinicApp.Models.Enums.PaymentMethod>()
                                            .Select(x => new { Value = x, Text = GetPaymentMethodDisplayName(x) }), 
                                            "Value", "Text", Model.Method), 
                                        "انتخاب روش پرداخت...", 
                                        new { 
                                            @class = "form-select" + (Html.ViewData.ModelState.IsValidField("Method") ? "" : " is-invalid"),
                                            @required = "required",
                                            @id = "payment-method-select"
                                        })
                                    @Html.ValidationMessageFor(m => m.Method, "", new { @class = "invalid-feedback" })
                                </div>
                            </div>

                            <!-- Transaction ID -->
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.TransactionId, new { @class = "form-label fw-bold" })
                                    @Html.TextBoxFor(m => m.TransactionId, new { 
                                        @class = "form-control" + (Html.ViewData.ModelState.IsValidField("TransactionId") ? "" : " is-invalid"),
                                        @placeholder = "شناسه تراکنش (اختیاری)",
                                        @id = "transaction-id-input"
                                    })
                                    @Html.ValidationMessageFor(m => m.TransactionId, "", new { @class = "invalid-feedback" })
                                    <div class="form-text">
                                        <i class="fa fa-info-circle me-1"></i>
                                        شناسه تراکنش از سیستم پرداخت خارجی
                                    </div>
                                </div>
                            </div>

                            <!-- Reference Code -->
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.ReferenceCode, new { @class = "form-label fw-bold" })
                                    @Html.TextBoxFor(m => m.ReferenceCode, new { 
                                        @class = "form-control" + (Html.ViewData.ModelState.IsValidField("ReferenceCode") ? "" : " is-invalid"),
                                        @placeholder = "کد مرجع (اختیاری)",
                                        @id = "reference-code-input"
                                    })
                                    @Html.ValidationMessageFor(m => m.ReferenceCode, "", new { @class = "invalid-feedback" })
                                </div>
                            </div>

                            <!-- Receipt Number -->
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.ReceiptNo, new { @class = "form-label fw-bold" })
                                    @Html.TextBoxFor(m => m.ReceiptNo, new { 
                                        @class = "form-control" + (Html.ViewData.ModelState.IsValidField("ReceiptNo") ? "" : " is-invalid"),
                                        @placeholder = "شماره رسید (اختیاری)",
                                        @id = "receipt-no-input"
                                    })
                                    @Html.ValidationMessageFor(m => m.ReceiptNo, "", new { @class = "invalid-feedback" })
                                </div>
                            </div>

                            <!-- POS Terminal (conditional) -->
                            <div class="col-md-6" id="pos-terminal-group" style="display: none;">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.PosTerminalId, new { @class = "form-label fw-bold" })
                                    @Html.DropDownListFor(m => m.PosTerminalId, 
                                        new SelectList(ViewBag.PosTerminals ?? new List<object>(), "Id", "Name", Model.PosTerminalId), 
                                        "انتخاب ترمینال POS...", 
                                        new { 
                                            @class = "form-select",
                                            @id = "pos-terminal-select"
                                        })
                                    @Html.ValidationMessageFor(m => m.PosTerminalId, "", new { @class = "invalid-feedback" })
                                </div>
                            </div>

                            <!-- Payment Gateway (conditional) -->
                            <div class="col-md-6" id="payment-gateway-group" style="display: none;">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.PaymentGatewayId, new { @class = "form-label fw-bold" })
                                    @Html.DropDownListFor(m => m.PaymentGatewayId, 
                                        new SelectList(ViewBag.PaymentGateways ?? new List<object>(), "Id", "Name", Model.PaymentGatewayId), 
                                        "انتخاب درگاه پرداخت...", 
                                        new { 
                                            @class = "form-select",
                                            @id = "payment-gateway-select"
                                        })
                                    @Html.ValidationMessageFor(m => m.PaymentGatewayId, "", new { @class = "invalid-feedback" })
                                </div>
                            </div>

                            <!-- Cash Session (conditional) -->
                            <div class="col-md-6" id="cash-session-group" style="display: none;">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.CashSessionId, new { @class = "form-label fw-bold" })
                                    @Html.DropDownListFor(m => m.CashSessionId, 
                                        new SelectList(ViewBag.CashSessions ?? new List<object>(), "Id", "DisplayName", Model.CashSessionId), 
                                        "انتخاب جلسه نقدی...", 
                                        new { 
                                            @class = "form-select",
                                            @id = "cash-session-select"
                                        })
                                    @Html.ValidationMessageFor(m => m.CashSessionId, "", new { @class = "invalid-feedback" })
                                </div>
                            </div>

                            <!-- Description -->
                            <div class="col-12">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.Description, new { @class = "form-label fw-bold" })
                                    @Html.TextAreaFor(m => m.Description, new { 
                                        @class = "form-control" + (Html.ViewData.ModelState.IsValidField("Description") ? "" : " is-invalid"),
                                        @rows = "3",
                                        @placeholder = "توضیحات اضافی (اختیاری)",
                                        @id = "description-textarea"
                                    })
                                    @Html.ValidationMessageFor(m => m.Description, "", new { @class = "invalid-feedback" })
                                </div>
                            </div>
                        </div>

                        <!-- Form Actions -->
                        <div class="row mt-4">
                            <div class="col-12">
                                <div class="d-flex justify-content-end gap-2">
                                    @Html.ActionLink("انصراف", "Index", null, new { 
                                        @class = "btn btn-secondary",
                                        @title = "انصراف و بازگشت به لیست"
                                    })
                                    <button type="submit" class="btn btn-success" id="submit-btn">
                                        <i class="fa fa-save me-1"></i>
                                        ثبت تراکنش
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Help and Information -->
        <div class="col-lg-4">
            <!-- Reception Information -->
            <div class="card border-info shadow-sm mb-4" id="reception-info-card" style="display: none;">
                <div class="card-header bg-info text-white">
                    <h6 class="mb-0">
                        <i class="fa fa-hospital-o me-2"></i>
                        اطلاعات پذیرش
                    </h6>
                </div>
                <div class="card-body" id="reception-info-content">
                    <!-- Dynamic content will be loaded here -->
                </div>
            </div>

            <!-- Payment Method Help -->
            <div class="card border-warning shadow-sm mb-4">
                <div class="card-header bg-warning text-dark">
                    <h6 class="mb-0">
                        <i class="fa fa-question-circle me-2"></i>
                        راهنمای روش‌های پرداخت
                    </h6>
                </div>
                <div class="card-body">
                    <div class="accordion" id="payment-help-accordion">
                        <div class="accordion-item">
                            <h2 class="accordion-header" id="cash-help-header">
                                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#cash-help" aria-expanded="false" aria-controls="cash-help">
                                    <i class="fa fa-money me-2"></i>
                                    پرداخت نقدی
                                </button>
                            </h2>
                            <div id="cash-help" class="accordion-collapse collapse" aria-labelledby="cash-help-header" data-bs-parent="#payment-help-accordion">
                                <div class="accordion-body">
                                    <small class="text-muted">
                                        برای پرداخت نقدی، جلسه نقدی فعال را انتخاب کنید. 
                                        مبلغ پرداخت به موجودی جلسه اضافه خواهد شد.
                                    </small>
                                </div>
                            </div>
                        </div>
                        <div class="accordion-item">
                            <h2 class="accordion-header" id="pos-help-header">
                                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#pos-help" aria-expanded="false" aria-controls="pos-help">
                                    <i class="fa fa-credit-card me-2"></i>
                                    پرداخت با کارت
                                </button>
                            </h2>
                            <div id="pos-help" class="accordion-collapse collapse" aria-labelledby="pos-help-header" data-bs-parent="#payment-help-accordion">
                                <div class="accordion-body">
                                    <small class="text-muted">
                                        برای پرداخت با کارت، ترمینال POS مورد نظر را انتخاب کنید. 
                                        شناسه تراکنش از ترمینال دریافت شده را وارد کنید.
                                    </small>
                                </div>
                            </div>
                        </div>
                        <div class="accordion-item">
                            <h2 class="accordion-header" id="online-help-header">
                                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#online-help" aria-expanded="false" aria-controls="online-help">
                                    <i class="fa fa-globe me-2"></i>
                                    پرداخت آنلاین
                                </button>
                            </h2>
                            <div id="online-help" class="accordion-collapse collapse" aria-labelledby="online-help-header" data-bs-parent="#payment-help-accordion">
                                <div class="accordion-body">
                                    <small class="text-muted">
                                        برای پرداخت آنلاین، درگاه پرداخت مورد نظر را انتخاب کنید. 
                                        کد مرجع و شناسه تراکنش از درگاه دریافت شده را وارد کنید.
                                    </small>
                                </div>
                            </div>
                        </div>
                        <div class="accordion-item">
                            <h2 class="accordion-header" id="debt-help-header">
                                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#debt-help" aria-expanded="false" aria-controls="debt-help">
                                    <i class="fa fa-clock-o me-2"></i>
                                    پرداخت بدهی
                                </button>
                            </h2>
                            <div id="debt-help" class="accordion-collapse collapse" aria-labelledby="debt-help-header" data-bs-parent="#payment-help-accordion">
                                <div class="accordion-body">
                                    <small class="text-muted">
                                        برای ثبت بدهی، مبلغ بدهی را وارد کنید. 
                                        این تراکنش به عنوان بدهی ثبت خواهد شد.
                                    </small>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Form Validation Status -->
            <div class="card border-secondary shadow-sm">
                <div class="card-header bg-secondary text-white">
                    <h6 class="mb-0">
                        <i class="fa fa-check-circle me-2"></i>
                        وضعیت اعتبارسنجی
                    </h6>
                </div>
                <div class="card-body">
                    <div id="validation-status">
                        <div class="d-flex align-items-center text-muted">
                            <i class="fa fa-circle-o me-2"></i>
                            <small>فرم آماده ثبت است</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Success/Error Toast Container -->
<div class="toast-container position-fixed top-0 end-0 p-3">
    <div id="success-toast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header bg-success text-white">
            <i class="fa fa-check-circle me-2"></i>
            <strong class="me-auto">موفقیت</strong>
            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="بستن"></button>
        </div>
        <div class="toast-body" id="success-message">
            تراکنش با موفقیت ثبت شد.
        </div>
    </div>
    
    <div id="error-toast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header bg-danger text-white">
            <i class="fa fa-exclamation-circle me-2"></i>
            <strong class="me-auto">خطا</strong>
            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="بستن"></button>
        </div>
        <div class="toast-body" id="error-message">
            خطایی در ثبت تراکنش رخ داده است.
        </div>
    </div>
</div>

@functions {
    string GetPaymentMethodDisplayName(ClinicApp.Models.Enums.PaymentMethod method)
    {
        return method switch
        {
            ClinicApp.Models.Enums.PaymentMethod.Cash => "پرداخت نقدی",
            ClinicApp.Models.Enums.PaymentMethod.POS => "پرداخت با کارت (POS)",
            ClinicApp.Models.Enums.PaymentMethod.Online => "پرداخت آنلاین",
            ClinicApp.Models.Enums.PaymentMethod.Debt => "بدهی",
            _ => method.ToString()
        };
    }
}

@section Scripts {
    <script type="text/javascript">
        $(document).ready(function () {
            // Payment method change handler
            $('#payment-method-select').on('change', function() {
                var selectedMethod = $(this).val();
                togglePaymentMethodFields(selectedMethod);
            });

            // Reception selection change handler
            $('#reception-select').on('change', function() {
                var receptionId = $(this).val();
                if (receptionId) {
                    loadReceptionInfo(receptionId);
                } else {
                    $('#reception-info-card').hide();
                }
            });

            // Form validation
            $('#payment-form').on('submit', function(e) {
                if (!this.checkValidity()) {
                    e.preventDefault();
                    e.stopPropagation();
                }
                $(this).addClass('was-validated');
            });

            // Real-time validation
            $('input, select, textarea').on('blur', function() {
                validateField($(this));
            });

            // Initialize
            var initialMethod = $('#payment-method-select').val();
            if (initialMethod) {
                togglePaymentMethodFields(initialMethod);
            }

            var initialReception = $('#reception-select').val();
            if (initialReception) {
                loadReceptionInfo(initialReception);
            }
        });

        function togglePaymentMethodFields(method) {
            // Hide all conditional fields
            $('#pos-terminal-group, #payment-gateway-group, #cash-session-group').hide();
            $('#pos-terminal-select, #payment-gateway-select, #cash-session-select').removeAttr('required');

            // Show relevant fields based on method
            switch (method) {
                case 'POS':
                    $('#pos-terminal-group').show();
                    $('#pos-terminal-select').attr('required', 'required');
                    break;
                case 'Online':
                    $('#payment-gateway-group').show();
                    $('#payment-gateway-select').attr('required', 'required');
                    break;
                case 'Cash':
                    $('#cash-session-group').show();
                    $('#cash-session-select').attr('required', 'required');
                    break;
            }
        }

        function loadReceptionInfo(receptionId) {
            $.ajax({
                url: '@Url.Action("GetReceptionInfo", "Reception")',
                type: 'GET',
                data: { id: receptionId },
                success: function(data) {
                    if (data.success) {
                        var content = `
                            <div class="row g-2">
                                <div class="col-12">
                                    <label class="form-label fw-bold">بیمار:</label>
                                    <p class="form-control-plaintext">${data.data.patientName}</p>
                                </div>
                                <div class="col-12">
                                    <label class="form-label fw-bold">تاریخ پذیرش:</label>
                                    <p class="form-control-plaintext">${data.data.createdAt}</p>
                                </div>
                                <div class="col-12">
                                    <label class="form-label fw-bold">مبلغ کل:</label>
                                    <p class="form-control-plaintext text-success fw-bold">${data.data.totalAmount} تومان</p>
                                </div>
                                <div class="col-12">
                                    <label class="form-label fw-bold">مبلغ پرداخت شده:</label>
                                    <p class="form-control-plaintext text-info">${data.data.paidAmount} تومان</p>
                                </div>
                                <div class="col-12">
                                    <label class="form-label fw-bold">مبلغ باقی‌مانده:</label>
                                    <p class="form-control-plaintext text-warning fw-bold">${data.data.remainingAmount} تومان</p>
                                </div>
                            </div>
                        `;
                        $('#reception-info-content').html(content);
                        $('#reception-info-card').show();
                        
                        // Update amount field with remaining amount
                        $('#amount-input').val(data.data.remainingAmountNumeric);
                    }
                },
                error: function() {
                    $('#reception-info-card').hide();
                }
            });
        }

        function validateField(field) {
            var isValid = field[0].checkValidity();
            if (isValid) {
                field.removeClass('is-invalid').addClass('is-valid');
            } else {
                field.removeClass('is-valid').addClass('is-invalid');
            }
            updateValidationStatus();
        }

        function updateValidationStatus() {
            var form = $('#payment-form')[0];
            var isValid = form.checkValidity();
            var statusDiv = $('#validation-status');
            
            if (isValid) {
                statusDiv.html(`
                    <div class="d-flex align-items-center text-success">
                        <i class="fa fa-check-circle me-2"></i>
                        <small>فرم آماده ثبت است</small>
                    </div>
                `);
            } else {
                statusDiv.html(`
                    <div class="d-flex align-items-center text-warning">
                        <i class="fa fa-exclamation-triangle me-2"></i>
                        <small>لطفاً فیلدهای الزامی را تکمیل کنید</small>
                    </div>
                `);
            }
        }

        function showToast(type, message) {
            var toastId = type === 'success' ? '#success-toast' : '#error-toast';
            var messageId = type === 'success' ? '#success-message' : '#error-message';
            
            $(messageId).text(message);
            var toast = new bootstrap.Toast(document.querySelector(toastId));
            toast.show();
        }
    </script>
}
