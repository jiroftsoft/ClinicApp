@using ClinicApp.ViewModels.Reception
@using ClinicApp.Models.Enums
@model ClinicApp.ViewModels.Reception.ReceptionCreateViewModel

@{
    ViewBag.Title = "پذیرش جدید";
    ViewBag.RequireDataTables = true;
    ViewBag.RequireSelect2 = true;
    ViewBag.RequireDatePicker = true;
    ViewBag.RequireFormValidation = true;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <!-- ✅ بخش ۱: ساختار کلی -->
            <h2 class="text-center mb-4">پذیرش جدید</h2>
            <p class="text-center text-muted mb-4">ثبت پذیرش جدید برای بیمار در کلینیک شفا</p>
            
            <!-- ✅ بخش ۲: طراحی بصری -->
            <div class="card shadow-sm">
                <div class="card-header bg-success text-white d-flex justify-content-between align-items-center">
                    <h4 class="mb-0">
                        <i class="fas fa-user-plus me-2"></i>
                        فرم پذیرش جدید
                    </h4>
                    <button type="button" id="reset-form-header-btn" class="btn btn-light btn-sm" title="پاک کردن تمام اطلاعات فرم">
                        <i class="fas fa-undo me-1"></i>
                        ریست فرم
                    </button>
                </div>
                <div class="card-body">
                    @using (Html.BeginForm("Create", "Reception", FormMethod.Post, new { id = "create-reception-form", @class = "needs-validation", novalidate = "novalidate" }))
                    {
                        @Html.AntiForgeryToken()
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        
                        <!-- ✅ Progress Indicator -->
                        <div class="mb-4">
                            <div class="progress" style="height: 8px;">
                                <div class="progress-bar bg-success" role="progressbar" id="form-progress" style="width: 0%"></div>
                            </div>
                            <small class="text-muted mt-1 d-block text-center">
                                <span id="progress-text">0% تکمیل شده</span>
                            </small>
                        </div>

                        <!-- ✅ بخش ۱: اطلاعات بیمار -->
                        <div class="form-section mb-4">
                            <div class="form-section-header">
                                <i class="fas fa-user text-primary me-2"></i>
                                <h5 class="mb-0">اطلاعات بیمار</h5>
                            </div>
                            <div class="form-section-body">
                                <div class="row g-3">
                                    <!-- جستجوی بیمار -->
                                    <div class="col-md-6">
                                        <label for="patient-search" class="form-label">جستجوی بیمار <span class="text-danger">*</span></label>
                                        <div class="input-group">
                                            <input type="text" id="patient-search" class="form-control" placeholder="کد ملی یا نام بیمار">
                                            <button type="button" class="btn btn-outline-primary" id="search-patient-btn">
                                                <i class="fas fa-search"></i>
                                            </button>
                                        </div>
                                        <div id="patient-search-results" class="mt-2"></div>
                                    </div>

                                    <!-- اطلاعات بیمار -->
                                    <div class="col-md-6">
                                        <label class="form-label">اطلاعات بیمار <span class="text-danger">*</span></label>
                                        <div id="selected-patient-info" class="mt-2">
                                            <div class="alert alert-info">
                                                <i class="fas fa-info-circle me-1"></i>
                                                ابتدا بیمار را جستجو کنید
                                            </div>
                                        </div>
                                        @Html.HiddenFor(model => model.PatientId)
                                    </div>
                                </div>

                                <!-- فیلدهای اطلاعات بیمار -->
                                <div class="row g-3 mt-3" id="patient-info-fields" style="display: none;">
                                    <div class="col-md-4">
                                        <label for="FirstName" class="form-label">نام <span class="text-danger">*</span></label>
                                        @Html.TextBoxFor(model => model.FirstName, new { @class = "form-control", placeholder = "نام بیمار" })
                                        @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-md-4">
                                        <label for="LastName" class="form-label">نام خانوادگی <span class="text-danger">*</span></label>
                                        @Html.TextBoxFor(model => model.LastName, new { @class = "form-control", placeholder = "نام خانوادگی بیمار" })
                                        @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-md-4">
                                        <label for="NationalCode" class="form-label">کد ملی <span class="text-danger">*</span></label>
                                        @Html.TextBoxFor(model => model.NationalCode, new { @class = "form-control", placeholder = "کد ملی ۱۰ رقمی" })
                                        @Html.ValidationMessageFor(model => model.NationalCode, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-md-4">
                                        <label for="PhoneNumber" class="form-label">شماره تلفن</label>
                                        @Html.TextBoxFor(model => model.PhoneNumber, new { @class = "form-control", placeholder = "شماره تلفن" })
                                        @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-md-4">
                                        <label for="Gender" class="form-label">جنسیت</label>
                                        @Html.DropDownListFor(model => model.Gender, new SelectList(new List<object> { new { Value = "", Text = "انتخاب کنید" }, new { Value = "1", Text = "مرد" }, new { Value = "2", Text = "زن" } }, "Value", "Text"), new { @class = "form-select" })
                                        @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-md-4">
                                        <label for="BirthDateShamsi" class="form-label">تاریخ تولد</label>
                                        @Html.TextBoxFor(model => model.BirthDateShamsi, new { @class = "form-control persian-datepicker", placeholder = "انتخاب تاریخ تولد", id = "birthDateShamsi", value = "" })
                                        @Html.HiddenFor(model => model.BirthDate)
                                        @Html.ValidationMessageFor(model => model.BirthDateShamsi, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-md-2">
                                        <label for="Age" class="form-label">سن</label>
                                        <input type="text" id="Age" class="form-control" readonly placeholder="سن" />
                                    </div>
                                    <div class="col-md-6">
                                        <label for="Address" class="form-label">آدرس</label>
                                        @Html.TextAreaFor(model => model.Address, new { @class = "form-control", rows = "2", placeholder = "آدرس کامل" })
                                        @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                                    </div>
                                <div class="col-12">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div>
                                            <small class="text-muted">
                                                <i class="fas fa-info-circle"></i>
                                                اطلاعات بیمار از دیتابیس لود شده است
                                            </small>
                                        </div>
                                        <div class="d-flex gap-2">
                                            <button type="button" id="edit-patient-btn" class="btn btn-outline-warning btn-sm" style="display: none;">
                                                <i class="fas fa-edit"></i> ویرایش اطلاعات بیمار
                                            </button>
                                            <button type="button" id="reset-form-btn" class="btn btn-outline-danger btn-sm" title="پاک کردن تمام اطلاعات فرم">
                                                <i class="fas fa-undo"></i> ریست فرم
                                            </button>
                                        </div>
                                    </div>
                                </div>
                                </div>

                                <!-- فیلدهای اطلاعات بیمه -->
                                <div class="row g-3 mt-3" id="insurance-info-fields" style="display: none;">
                                    <div class="col-md-6">
                                        <label for="PrimaryInsuranceName" class="form-label">بیمه اولیه</label>
                                        @Html.TextBoxFor(model => model.PrimaryInsuranceName, new { @class = "form-control", placeholder = "نام بیمه اولیه" })
                                        @Html.ValidationMessageFor(model => model.PrimaryInsuranceName, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-md-6">
                                        <label for="SecondaryInsuranceName" class="form-label">بیمه تکمیلی</label>
                                        @Html.TextBoxFor(model => model.SecondaryInsuranceName, new { @class = "form-control", placeholder = "نام بیمه تکمیلی" })
                                        @Html.ValidationMessageFor(model => model.SecondaryInsuranceName, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-md-6">
                                        <label for="InsuranceNumber" class="form-label">شماره بیمه</label>
                                        @Html.TextBoxFor(model => model.InsuranceNumber, new { @class = "form-control", placeholder = "شماره بیمه" })
                                        @Html.ValidationMessageFor(model => model.InsuranceNumber, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-md-6">
                                        <label for="InsuranceShare" class="form-label">سهم بیمه (تومان)</label>
                                        @Html.TextBoxFor(model => model.InsuranceShare, new { @class = "form-control", type = "number", step = "1000", placeholder = "مبلغ سهم بیمه" })
                                        @Html.ValidationMessageFor(model => model.InsuranceShare, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <!-- استعلام کمکی -->
                                <div class="row g-3 mt-3">
                                    <div class="col-md-4">
                                        <label for="NationalCodeForInquiry" class="form-label">کد ملی برای استعلام</label>
                                        @Html.TextBoxFor(model => model.NationalCodeForInquiry, new { @class = "form-control", placeholder = "کد ملی ۱۰ رقمی" })
                                        @Html.ValidationMessageFor(model => model.NationalCodeForInquiry, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-md-4">
                                        <label for="BirthDateShamsiForInquiry" class="form-label">تاریخ تولد برای استعلام</label>
                                        @Html.TextBoxFor(model => model.BirthDateShamsiForInquiry, new { @class = "form-control persian-datepicker", placeholder = "انتخاب تاریخ تولد", id = "birthDateShamsiForInquiry", value = "" })
                                        @Html.HiddenFor(model => model.BirthDateForInquiry)
                                        @Html.ValidationMessageFor(model => model.BirthDateShamsiForInquiry, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-md-4">
                                        <label class="form-label">&nbsp;</label>
                                        <div class="d-grid">
                                            <button type="button" class="btn btn-outline-info" id="inquiry-btn">
                                                <i class="fas fa-search me-1"></i> استعلام هویت
                                            </button>
                                        </div>
                                    </div>
                                </div>
                                
                                <!-- نتایج استعلام -->
                                <div id="inquiry-results" class="mt-3"></div>
                            </div>
                        </div>

                        <!-- ✅ بخش ۲: اطلاعات پزشک -->
                        <div class="form-section mb-4">
                            <div class="form-section-header">
                                <i class="fas fa-user-md text-primary me-2"></i>
                                <h5 class="mb-0">اطلاعات پزشک</h5>
                            </div>
                            <div class="form-section-body">
                                <div class="row g-3">
                                    <div class="col-md-6">
                                        <label for="DoctorId" class="form-label">پزشک معالج <span class="text-danger">*</span></label>
                                        @Html.DropDownListFor(model => model.DoctorId, Model.DoctorList, "انتخاب پزشک", new { @class = "form-select", id = "doctorSelect" })
                                        @Html.ValidationMessageFor(model => model.DoctorId, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-md-6">
                                        <label for="ReceptionDateShamsi" class="form-label">تاریخ پذیرش <span class="text-danger">*</span></label>
                                        @Html.TextBoxFor(model => model.ReceptionDateShamsi, new { @class = "form-control persian-datepicker", placeholder = "انتخاب تاریخ پذیرش", id = "receptionDateShamsi", value = "" })
                                        @Html.HiddenFor(model => model.ReceptionDate)
                                        @Html.ValidationMessageFor(model => model.ReceptionDateShamsi, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- ✅ بخش ۳: اطلاعات خدمات -->
                        <div class="form-section mb-4">
                            <div class="form-section-header">
                                <i class="fas fa-stethoscope text-primary me-2"></i>
                                <h5 class="mb-0">اطلاعات خدمات</h5>
                            </div>
                            <div class="form-section-body">
                                <div class="row g-3">
                                    <div class="col-md-6">
                                        <label for="service-category" class="form-label">دسته‌بندی خدمات</label>
                                        <select id="service-category" class="form-select">
                                            <option value="">انتخاب دسته‌بندی</option>
                                        </select>
                                    </div>
                                    <div class="col-md-6">
                                        <label for="services" class="form-label">خدمات <span class="text-danger">*</span></label>
                                        <select id="services" class="form-select" multiple>
                                            <option value="">ابتدا دسته‌بندی را انتخاب کنید</option>
                                        </select>
                                        @Html.ValidationMessageFor(model => model.SelectedServiceIds, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="mt-3">
                                    <label class="form-label">خدمات انتخاب شده:</label>
                                    <div id="selected-services" class="border rounded p-2 min-height-50">
                                        <span class="text-muted">هیچ خدمتی انتخاب نشده است</span>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- ✅ بخش ۴: اطلاعات پرداخت -->
                        <div class="form-section mb-4">
                            <div class="form-section-header">
                                <i class="fas fa-money-bill-wave text-primary me-2"></i>
                                <h5 class="mb-0">اطلاعات پرداخت</h5>
                            </div>
                            <div class="form-section-body">
                                <div class="row g-3">
                                    <div class="col-md-4">
                                        <label for="TotalAmount" class="form-label">مجموع مبلغ <span class="text-danger">*</span></label>
                                        @Html.TextBoxFor(model => model.TotalAmount, new { @class = "form-control", type = "number", step = "1000", placeholder = "مبلغ به تومان" })
                                        @Html.ValidationMessageFor(model => model.TotalAmount, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-md-4">
                                        <label for="PaymentMethod" class="form-label">روش پرداخت <span class="text-danger">*</span></label>
                                        @Html.DropDownListFor(model => model.PaymentMethod, Model.PaymentMethodList, "انتخاب روش پرداخت", new { @class = "form-select", id = "paymentMethodSelect" })
                                        @Html.ValidationMessageFor(model => model.PaymentMethod, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-md-4">
                                        <label for="PosTransactionId" class="form-label">شناسه تراکنش POS</label>
                                        @Html.TextBoxFor(model => model.PosTransactionId, new { @class = "form-control", placeholder = "شناسه تراکنش" })
                                        @Html.ValidationMessageFor(model => model.PosTransactionId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="row g-3 mt-2">
                                    <div class="col-md-4">
                                        <label for="PaidAmount" class="form-label">مبلغ پرداخت شده</label>
                                        @Html.TextBoxFor(model => model.PaidAmount, new { @class = "form-control", type = "number", step = "1000", placeholder = "مبلغ پرداخت شده" })
                                        @Html.ValidationMessageFor(model => model.PaidAmount, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-md-4">
                                        <label for="InsuranceShare" class="form-label">سهم بیمه</label>
                                        @Html.TextBoxFor(model => model.InsuranceShare, new { @class = "form-control", type = "number", step = "1000", placeholder = "سهم بیمه" })
                                        @Html.ValidationMessageFor(model => model.InsuranceShare, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-md-4">
                                        <label for="PatientShare" class="form-label">سهم بیمار</label>
                                        @Html.TextBoxFor(model => model.PatientShare, new { @class = "form-control", type = "number", step = "1000", placeholder = "سهم بیمار" })
                                        @Html.ValidationMessageFor(model => model.PatientShare, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- ✅ بخش ۵: اطلاعات اضافی -->
                        <div class="form-section mb-4">
                            <div class="form-section-header">
                                <i class="fas fa-info-circle text-primary me-2"></i>
                                <h5 class="mb-0">اطلاعات اضافی</h5>
                            </div>
                            <div class="form-section-body">
                                <div class="row g-3">
                                    <div class="col-md-6">
                                        <div class="form-check">
                                            @Html.CheckBoxFor(model => model.IsEmergency, new { @class = "form-check-input" })
                                            <label class="form-check-label" for="IsEmergency">
                                                پذیرش اورژانس
                                            </label>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-check">
                                            @Html.CheckBoxFor(model => model.IsOnlineReception, new { @class = "form-check-input" })
                                            <label class="form-check-label" for="IsOnlineReception">
                                                پذیرش آنلاین
                                            </label>
                                        </div>
                                    </div>
                                </div>
                                <div class="row g-3 mt-2">
                                    <div class="col-12">
                                        <label for="Notes" class="form-label">یادداشت‌ها</label>
                                        @Html.TextAreaFor(model => model.Notes, new { @class = "form-control", rows = 3, placeholder = "یادداشت‌های اضافی..." })
                                        @Html.ValidationMessageFor(model => model.Notes, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- ✅ بخش ۶: دکمه‌ها -->
                        <div class="row mt-4">
                            <div class="col-12 text-center">
                                <button type="submit" id="submit-button" class="btn btn-success me-2">
                                    <span id="submit-button-text">
                                        <i class="fa fa-save me-1"></i> ثبت پذیرش
                                    </span>
                                    <span id="submit-button-spinner" class="spinner-border spinner-border-sm" style="display: none;"></span>
                                </button>
                                <button type="button" id="reset-form-footer-btn" class="btn btn-outline-danger me-2" title="پاک کردن تمام اطلاعات فرم">
                                    <i class="fas fa-undo me-1"></i> ریست فرم
                                </button>
                                <a href="@Url.Action("Index")" class="btn btn-secondary">
                                    <i class="fa fa-arrow-right me-1"></i> بازگشت
                                </a>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <link href="~/Content/css/reception-standards.css" rel="stylesheet" />
    
    <style>
        /* ✅ Persian DatePicker Styles */
        .persian-datepicker {
            direction: rtl;
            text-align: right;
        }
        
        /* ✅ Select2 Persian Support */
        .select2-container--default .select2-selection--single {
            height: 38px;
            border: 2px solid #e9ecef;
            border-radius: 10px;
        }
        
        .select2-container--default .select2-selection--single .select2-selection__rendered {
            line-height: 34px;
            padding-right: 12px;
            padding-left: 20px;
        }
        
        .select2-container--default .select2-selection--single .select2-selection__arrow {
            height: 36px;
            right: 8px;
        }
        
        .select2-dropdown {
            border: 2px solid #e9ecef;
            border-radius: 10px;
        }
        
        /* ✅ Form Section Styles */
        .form-section {
            border: 1px solid #e9ecef;
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 20px;
            background: #f8f9fa;
        }
        
        .form-section-header {
            display: flex;
            align-items: center;
            margin-bottom: 15px;
            padding-bottom: 10px;
            border-bottom: 2px solid #dee2e6;
        }
        
        .form-section-header h5 {
            color: #495057;
            font-weight: 600;
        }
        
        .form-section-body {
            padding: 10px 0;
        }
        
        /* ✅ Progress Bar Styles */
        .progress {
            border-radius: 10px;
            background-color: #e9ecef;
        }
        
        .progress-bar {
            border-radius: 10px;
            transition: width 0.6s ease;
        }
        
        /* ✅ Min Height for Selected Services */
        .min-height-50 {
            min-height: 50px;
        }
    </style>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    
    <script type="text/javascript">
        $(document).ready(function () {
            // ✅ مقداردهی اولیه Persian DatePicker
            initializePersianDatePickers();
            
            // ✅ مقداردهی اولیه Select2
            initializeSelect2();
            
            // ✅ بارگذاری اولیه داده‌ها
            loadDoctors();
            // loadServiceCategories(); // حذف شد - حالا بر اساس پزشک لود می‌شود

            // ✅ جستجوی بیمار
            $('#search-patient-btn').on('click', function () {
                var searchTerm = $('#patient-search').val().trim();
                if (searchTerm.length >= 2) {
                    searchPatients(searchTerm);
                } else {
                    showError('لطفاً حداقل ۲ کاراکتر وارد کنید');
                }
            });

            // ✅ انتخاب بیمار - حذف شده چون از populatePatientForm استفاده می‌کنیم

            // ✅ انتخاب پزشک - Cascade Loading
            $('#doctorSelect').on('change', function () {
                var doctorId = $(this).val();
                console.log('👨‍⚕️ Doctor selected:', doctorId);
                
                if (doctorId) {
                    // لود کردن دپارتمان‌های پزشک
                    loadDoctorDepartments(doctorId);
                } else {
                    // پاک کردن تمام فیلدهای وابسته
                    clearServiceFields();
                }
            });

            // ✅ انتخاب دسته‌بندی خدمات
            $('#service-category').on('change', function () {
                var categoryId = $(this).val();
                console.log('📋 Service category selected:', categoryId);
                
                if (categoryId) {
                    loadServicesByCategory(categoryId);
                } else {
                    $('#services').empty().append('<option value="">ابتدا دسته‌بندی را انتخاب کنید</option>');
                }
            });

            // ✅ انتخاب خدمات
            $('#services').on('change', function () {
                updateSelectedServices();
            });

            // ✅ استعلام هویت
            $('#inquiry-btn').on('click', function () {
                var nationalCode = $('#NationalCodeForInquiry').val().trim();
                var birthDateShamsi = $('#BirthDateShamsiForInquiry').val();
                var birthDate = $('#BirthDateForInquiry').val();
                
                if (nationalCode && birthDateShamsi) {
                    inquiryPatientIdentity(nationalCode, birthDate);
                } else {
                    showError('لطفاً کد ملی و تاریخ تولد را وارد کنید');
                }
            });

            // ✅ ارسال فرم
            $('#create-reception-form').on('submit', function (e) {
                e.preventDefault();
                
                // اعتبارسنجی
                if (!validateForm()) {
                    return;
                }

                // ارسال AJAX
                submitForm();
            });

            // ✅ توابع کمکی
            function searchPatients(searchTerm) {
                console.log('🔍 Starting search for:', searchTerm);
                
                $.ajax({
                    url: '@Url.Action("SearchPatientsByName", "Reception")',
                    type: 'GET',
                    data: { searchTerm: searchTerm, pageNumber: 1, pageSize: 10 },
                    beforeSend: function () {
                        $('#patient-search-results').html('<div class="text-center"><i class="fas fa-spinner fa-spin"></i> در حال جستجو...</div>');
                    },
                    success: function (response) {
                        console.log('✅ Raw Response:', response);
                        console.log('✅ Response Type:', typeof response);
                        
                        // Parse response if it's a string
                        var parsedResponse = response;
                        if (typeof response === 'string') {
                            try {
                                parsedResponse = JSON.parse(response);
                                console.log('✅ Parsed Response:', parsedResponse);
                            } catch (e) {
                                console.error('❌ JSON Parse Error:', e);
                                showError('خطا در تجزیه پاسخ سرور');
                                return;
                            }
                        }
                        
                        console.log('✅ Response Success:', parsedResponse.success);
                        console.log('✅ Response Data:', parsedResponse.data);
                        console.log('✅ Response Items:', parsedResponse.data?.Items);
                        console.log('✅ Items Length:', parsedResponse.data?.Items?.length);
                        
                        if (parsedResponse.success) {
                            try {
                                if (parsedResponse.data && parsedResponse.data.Items) {
                                    console.log('✅ Valid response structure - calling displayPatientSearchResults');
                                    displayPatientSearchResults(parsedResponse.data);
                                    showSuccess('جستجو با موفقیت انجام شد');
                        } else {
                                    console.error('❌ Invalid response data structure:', parsedResponse.data);
                                    showError('ساختار پاسخ نامعتبر است');
                                }
                            } catch (error) {
                                console.error('❌ Error in displayPatientSearchResults:', error);
                                console.error('❌ Error Stack:', error.stack);
                                showError('خطا در نمایش نتایج: ' + error.message);
                            }
                        } else {
                            console.error('❌ Response not successful:', parsedResponse);
                            showError('خطا در جستجو: ' + (parsedResponse.message || 'خطای نامشخص'));
                        }
                    },
                    error: function () {
                        showError('خطا در ارتباط با سرور');
                    }
                });
            }

            function displayPatientSearchResults(data) {
                console.log('🎯 Display Data:', data);
                console.log('🎯 Data Items:', data.Items);
                console.log('🎯 Items Length:', data.Items?.length);
                
                var results = $('#patient-search-results');
                results.empty();

                if (data.Items && data.Items.length > 0) {
                    console.log('✅ Found items, processing...');
                    
                    // Auto-select if only one result
                    if (data.Items.length === 1) {
                        var patient = data.Items[0];
                        console.log('🎯 Auto-selecting single patient:', patient);
                        console.log('🎯 Patient ID:', patient.PatientId);
                        console.log('🎯 Patient Name:', patient.FullName);
                        
                        try {
                            populatePatientForm(patient);
                            console.log('✅ Auto-select completed successfully');
                        } catch (error) {
                            console.error('❌ Error in auto-select:', error);
                            console.error('❌ Error Stack:', error.stack);
                            showError('خطا در انتخاب خودکار بیمار: ' + error.message);
                        }
                        return;
                    }
                    
                    var html = '<div class="list-group">';
                    $.each(data.Items, function (index, patient) {
                        console.log('Processing Patient:', patient); // Debug log
                        
                        // Safe handling of patient data
                        var patientId = patient.PatientId || 0;
                        var fullName = (patient.FullName && patient.FullName.trim()) || 'نامشخص';
                        var nationalCode = patient.NationalCode || 'نامشخص';
                        var phoneNumber = patient.PhoneNumber || 'نامشخص';
                        
                        // Create onclick with patient data
                        var patientData = JSON.stringify(patient).replace(/"/g, '&quot;');
                        
                        html += '<a href="#" class="list-group-item list-group-item-action" onclick="populatePatientForm(' + patientData + ')">';
                        html += '<div class="d-flex w-100 justify-content-between">';
                        html += '<h6 class="mb-1">' + fullName + '</h6>';
                        html += '<small>' + nationalCode + '</small>';
                        html += '</div>';
                        html += '<p class="mb-1">' + phoneNumber + '</p>';
                        html += '</a>';
                    });
                    html += '</div>';
                    results.html(html);
                    console.log('HTML Generated:', html); // Debug log
                } else {
                    // ✅ سناریو دوم: نمایش فرم ایجاد بیمار جدید
                    results.html(`
                        <div class="alert alert-warning">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            <strong>بیمار یافت نشد!</strong>
                            <p class="mb-2">بیماری با این کد ملی در سیستم وجود ندارد.</p>
                            <div class="d-flex gap-2">
                                <button type="button" id="create-new-patient-btn" class="btn btn-primary btn-sm">
                                    <i class="fas fa-user-plus me-1"></i>
                                    ایجاد بیمار جدید
                                </button>
                                <button type="button" id="retry-search-btn" class="btn btn-outline-secondary btn-sm">
                                    <i class="fas fa-redo me-1"></i>
                                    جستجوی مجدد
                                </button>
                            </div>
                            <small class="text-muted mt-2 d-block">
                                <i class="fas fa-info-circle me-1"></i>
                                با کلیک روی "ایجاد بیمار جدید"، فرم ثبت بیمار در تب جدید باز می‌شود
                            </small>
                        </div>
                    `);
                }
            }

            function selectPatient(patientId, patientName) {
                console.log('Selecting Patient:', patientId, patientName); // Debug log
                
                // Set the dropdown value
                $('#patient-select').val(patientId);
                
                // Update the selected patient info
                $('#selected-patient-info').html('<div class="alert alert-success"><i class="fas fa-check me-1"></i>بیمار انتخاب شد: ' + patientName + '</div>');
                
                // Clear search results
                $('#patient-search-results').empty();
                
                // Update progress
                updateProgress();
                
                // Show success message
                showSuccess('بیمار با موفقیت انتخاب شد: ' + patientName);
            }

            function populatePatientForm(patient) {
                console.log('🏥 Populating Patient Form:', patient);
                console.log('🏥 Patient ID:', patient.PatientId);
                console.log('🏥 Patient Name:', patient.FullName);
                console.log('🏥 Patient FirstName:', patient.FirstName);
                console.log('🏥 Patient LastName:', patient.LastName);
                console.log('🏥 Patient NationalCode:', patient.NationalCode);
                console.log('🏥 Patient PhoneNumber:', patient.PhoneNumber);
                console.log('🏥 Patient Gender:', patient.Gender);
                console.log('🏥 Patient BirthDate:', patient.BirthDate);
                console.log('🏥 Patient Address:', patient.Address);
                
                try {
                    // Show patient info fields
                    console.log('🏥 Showing patient info fields...');
                    $('#patient-info-fields').show();
                    
                    // Show insurance info fields
                    console.log('🏥 Showing insurance info fields...');
                    $('#insurance-info-fields').show();
                    
                    // Populate patient information fields directly
                    console.log('🏥 Populating form fields...');
                    $('#FirstName').val(patient.FirstName || '');
                    $('#LastName').val(patient.LastName || '');
                    $('#NationalCode').val(patient.NationalCode || '');
                    $('#PhoneNumber').val(patient.PhoneNumber || '');
                    $('#Address').val(patient.Address || '');
                    
                    // Set gender
                    if (patient.Gender) {
                        console.log('🏥 Setting gender:', patient.Gender);
                        $('#Gender').val(patient.Gender);
                    }
                    
                    // Set birth date (Persian DatePicker)
                    if (patient.BirthDate) {
                        console.log('🏥 Setting birth date:', patient.BirthDate);
                        console.log('🏥 Birth date type:', typeof patient.BirthDate);
                        try {
                            // تبدیل تاریخ میلادی به شمسی برای نمایش
                            var birthDate = new Date(parseInt(patient.BirthDate.substr(6)));
                            if (!isNaN(birthDate.getTime())) {
                                // تبدیل به تاریخ شمسی
                                var persianDate = convertGregorianToPersian(birthDate);
                                console.log('🏥 Persian birth date:', persianDate);
                                
                                // تنظیم فیلد شمسی
                                $('#birthDateShamsi').val(persianDate);
                                
                                // تنظیم فیلد میلادی مخفی
                                var isoDate = birthDate.getFullYear() + '-' + 
                                            String(birthDate.getMonth() + 1).padStart(2, '0') + '-' + 
                                            String(birthDate.getDate()).padStart(2, '0');
                                $('#BirthDate').val(isoDate);
                                
                                console.log('✅ Birth date set successfully:', { persian: persianDate, gregorian: isoDate });
                                
                                // محاسبه و نمایش سن
                                displayAge(patient.BirthDate);
                            } else {
                                console.warn('⚠️ Invalid birth date format:', patient.BirthDate);
                            }
                        } catch (error) {
                            console.error('❌ Error setting birth date:', error);
                            console.error('❌ Birth date value:', patient.BirthDate);
                        }
                    } else {
                        console.log('🏥 No birth date provided');
                        $('#Age').val(''); // پاک کردن سن
                    }
                    
                    // Set patient ID for form submission
                    console.log('🏥 Setting patient ID:', patient.PatientId);
                    $('#PatientId').val(patient.PatientId);
                    
                    // Update selected patient info
                    console.log('🏥 Updating selected patient info...');
                    $('#selected-patient-info').html(`
                        <div class="alert alert-success">
                            <i class="fas fa-check me-1"></i>
                            <strong>بیمار انتخاب شد:</strong> ${patient.FullName}
                            <br>
                            <small>کد ملی: ${patient.NationalCode} | تلفن: ${patient.PhoneNumber}</small>
                        </div>
                    `);
                    
                    // Clear search results
                    console.log('🏥 Clearing search results...');
                    $('#patient-search-results').empty();
                    
                    // Update progress
                    console.log('🏥 Updating progress...');
                    updateProgress();
                    
                    // Show success message
                    console.log('🏥 Showing success message...');
                    showSuccess('اطلاعات بیمار با موفقیت در فرم قرار گرفت');
                    
                    // نمایش دکمه ویرایش اطلاعات بیمار
                    $('#edit-patient-btn').show();
                    
                    console.log('✅ Patient form populated successfully');
                } catch (error) {
                    console.error('❌ Error in populatePatientForm:', error);
                    console.error('❌ Error Stack:', error.stack);
                    showError('خطا در پر کردن فرم: ' + error.message);
                }
            }

            function loadPatientInfo(patientId) {
                // بارگذاری اطلاعات بیمار
                updateProgress();
            }

            function loadServiceCategories() {
                console.log('🔄 Loading service categories...');
                
                $.ajax({
                    url: '@Url.Action("GetServiceCategories", "Reception")',
                    type: 'GET',
                    dataType: 'json',
                    success: function (response) {
                        console.log('📋 Raw Service Categories Response:', response);
                        console.log('📋 Response Type:', typeof response);
                        
                        // Parse response if it's a string
                        var parsedResponse = response;
                        if (typeof response === 'string') {
                            try {
                                parsedResponse = JSON.parse(response);
                                console.log('📋 Parsed Service Categories Response:', parsedResponse);
                            } catch (e) {
                                console.error('❌ JSON Parse Error:', e);
                                console.error('❌ Raw Response:', response);
                                return;
                            }
                        }
                        
                        console.log('📋 Response Success:', parsedResponse.success);
                        console.log('📋 Response Data:', parsedResponse.data);
                        console.log('📋 Data Type:', typeof parsedResponse.data);
                        console.log('📋 Data Length:', parsedResponse.data ? parsedResponse.data.length : 'undefined');
                        
                        if (parsedResponse.success) {
                            var select = $('#service-category');
                            console.log('📋 Select Element Found:', select.length > 0);
                            
                            select.empty().append('<option value="">انتخاب دسته‌بندی</option>');
                            
                            if (parsedResponse.data && parsedResponse.data.length > 0) {
                                console.log('📋 Processing categories...');
                                $.each(parsedResponse.data, function (index, category) {
                                    console.log('📋 Category:', index, category);
                                    console.log('📋 Category ID:', category.ServiceCategoryId);
                                    console.log('📋 Category Title:', category.Title);
                                    
                                    select.append('<option value="' + category.ServiceCategoryId + '">' + category.Title + '</option>');
                                });
                                console.log('✅ Service categories loaded successfully');
                            } else {
                                console.warn('⚠️ No service categories found in response');
                            }
                        } else {
                            console.error('❌ Service categories request failed:', parsedResponse.message);
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error('❌ Service categories AJAX error:', {
                            status: status,
                            error: error,
                            responseText: xhr.responseText
                        });
                    }
                });
            }

            function loadServicesByCategory(categoryId) {
                console.log('🔄 Loading services for category:', categoryId);
                
                $.ajax({
                    url: '@Url.Action("GetServicesByCategory", "Reception")',
                    type: 'GET',
                    dataType: 'json',
                    data: { categoryId: categoryId },
                    success: function (response) {
                        console.log('📋 Raw Services Response:', response);
                        console.log('📋 Response Type:', typeof response);
                        
                        // Parse response if it's a string
                        var parsedResponse = response;
                        if (typeof response === 'string') {
                            try {
                                parsedResponse = JSON.parse(response);
                                console.log('📋 Parsed Services Response:', parsedResponse);
                            } catch (e) {
                                console.error('❌ JSON Parse Error:', e);
                                console.error('❌ Raw Response:', response);
                                return;
                            }
                        }
                        
                        console.log('📋 Response Success:', parsedResponse.success);
                        console.log('📋 Response Data:', parsedResponse.data);
                        console.log('📋 Data Type:', typeof parsedResponse.data);
                        console.log('📋 Data Length:', parsedResponse.data ? parsedResponse.data.length : 'undefined');
                        
                        if (parsedResponse.success) {
                            var select = $('#services');
                            console.log('📋 Services Select Element Found:', select.length > 0);
                            
                            select.empty().append('<option value="">انتخاب خدمت</option>');
                            
                            if (parsedResponse.data && parsedResponse.data.length > 0) {
                                console.log('📋 Processing services...');
                                $.each(parsedResponse.data, function (index, service) {
                                    console.log('📋 Service:', index, service);
                                    console.log('📋 Service ID:', service.ServiceId);
                                    console.log('📋 Service Title:', service.Title);
                                    console.log('📋 Service Price:', service.BasePrice);
                                    
                                    select.append('<option value="' + service.ServiceId + '">' + service.Title + ' - ' + service.BasePrice + ' تومان</option>');
                                });
                                console.log('✅ Services loaded successfully');
                            } else {
                                console.warn('⚠️ No services found for category:', categoryId);
                                select.append('<option value="">خدمتی یافت نشد</option>');
                            }
                        } else {
                            console.error('❌ Services request failed:', parsedResponse.message);
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error('❌ Services AJAX error:', {
                            status: status,
                            error: error,
                            responseText: xhr.responseText
                        });
                    }
                });
            }

            function updateSelectedServices() {
                var selected = $('#services').val();
                var selectedDiv = $('#selected-services');
                
                if (selected && selected.length > 0) {
                    var html = '';
                    $.each(selected, function (index, serviceId) {
                        var serviceText = $('#services option[value="' + serviceId + '"]').text();
                        html += '<span class="badge bg-primary me-1 mb-1">' + serviceText + '</span>';
                    });
                    selectedDiv.html(html);
                } else {
                    selectedDiv.html('<span class="text-muted">هیچ خدمتی انتخاب نشده است</span>');
                }
                
                updateProgress();
            }

            function inquiryPatientIdentity(nationalCode, birthDate) {
                $.ajax({
                    url: '@Url.Action("InquiryPatientIdentity", "Reception")',
                    type: 'POST',
                    data: {
                        nationalCode: nationalCode,
                        birthDate: birthDate,
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    },
                    beforeSend: function () {
                        $('#inquiry-btn').prop('disabled', true).html('<i class="fas fa-spinner fa-spin me-1"></i>در حال استعلام...');
                    },
                    success: function (response) {
                        console.log('Inquiry Response:', response); // Debug log
                        if (response.success) {
                            showSuccess('استعلام با موفقیت انجام شد');
                            // نمایش نتایج استعلام
                            showInquiryResults(response.data);
                            // پر کردن فرم با اطلاعات استعلام شده
                            populateFormFromInquiry(response.data);
                        } else {
                            showError('خطا در استعلام: ' + (response.message || 'خطای نامشخص'));
                        }
                    },
                    error: function () {
                        showError('خطا در ارتباط با سرور');
                    },
                    complete: function () {
                        $('#inquiry-btn').prop('disabled', false).html('<i class="fas fa-search me-1"></i>استعلام هویت');
                    }
                });
            }

            function showInquiryResults(inquiryData) {
                console.log('Showing Inquiry Results:', inquiryData); // Debug log
                
                if (!inquiryData || !inquiryData.IdentityData) {
                    showError('اطلاعات استعلام نامعتبر است');
                    return;
                }

                var identityData = inquiryData.IdentityData;
                var insuranceData = inquiryData.InsuranceData;

                // نمایش نتایج در یک modal یا panel
                var resultsHtml = '<div class="card mt-3">';
                resultsHtml += '<div class="card-header bg-warning text-dark">';
                resultsHtml += '<h6 class="mb-0"><i class="fas fa-exclamation-triangle me-2"></i>نتایج استعلام هویت</h6>';
                resultsHtml += '</div>';
                resultsHtml += '<div class="card-body">';
                
                // اطلاعات هویت
                resultsHtml += '<div class="row">';
                resultsHtml += '<div class="col-md-6">';
                resultsHtml += '<h6 class="text-primary">اطلاعات هویت:</h6>';
                resultsHtml += '<p><strong>نام:</strong> ' + (identityData.FirstName || 'نامشخص') + '</p>';
                resultsHtml += '<p><strong>نام خانوادگی:</strong> ' + (identityData.LastName || 'نامشخص') + '</p>';
                resultsHtml += '<p><strong>نام پدر:</strong> ' + (identityData.FatherName || 'نامشخص') + '</p>';
                resultsHtml += '<p><strong>جنسیت:</strong> ' + (identityData.Gender === 1 ? 'مرد' : 'زن') + '</p>';
                resultsHtml += '<p><strong>محل تولد:</strong> ' + (identityData.BirthPlace || 'نامشخص') + '</p>';
                resultsHtml += '</div>';
                
                // اطلاعات بیمه
                resultsHtml += '<div class="col-md-6">';
                resultsHtml += '<h6 class="text-primary">اطلاعات بیمه:</h6>';
                resultsHtml += '<p><strong>نام بیمه:</strong> ' + (insuranceData.InsuranceName || 'نامشخص') + '</p>';
                resultsHtml += '<p><strong>شماره بیمه:</strong> ' + (insuranceData.InsuranceNumber || 'نامشخص') + '</p>';
                resultsHtml += '<p><strong>وضعیت:</strong> ' + (insuranceData.InsuranceStatus || 'نامشخص') + '</p>';
                resultsHtml += '<p><strong>درصد پوشش:</strong> ' + (insuranceData.CoveragePercentage || 0) + '%</p>';
                resultsHtml += '<p><strong>فرانشیز:</strong> ' + (insuranceData.Deductible || 0).toLocaleString() + ' ریال</p>';
                resultsHtml += '</div>';
                
                // نمایش منبع اطلاعات
                resultsHtml += '<div class="col-12 mt-2">';
                resultsHtml += '<div class="alert alert-info">';
                resultsHtml += '<i class="fas fa-info-circle me-2"></i>';
                resultsHtml += '<strong>منبع اطلاعات:</strong> دیتابیس لوکال کلینیک شفا (7 هزار رکورد بیمار)';
                resultsHtml += '</div>';
                resultsHtml += '</div>';
                
                // نمایش پیام برای بیمار جدید
                if (inquiryData.Message && inquiryData.Message.includes('بیمار جدید')) {
                    resultsHtml += '<div class="col-12 mt-2">';
                    resultsHtml += '<div class="alert alert-warning">';
                    resultsHtml += '<i class="fas fa-exclamation-triangle me-2"></i>';
                    resultsHtml += '<strong>توجه:</strong> این بیمار در دیتابیس لوکال موجود نیست. لطفاً اطلاعات را دستی وارد کنید.';
                    resultsHtml += '</div>';
                    resultsHtml += '</div>';
                }
                resultsHtml += '</div>';
                
                resultsHtml += '<div class="mt-3">';
                resultsHtml += '<button type="button" class="btn btn-primary" onclick="applyInquiryData()">';
                resultsHtml += '<i class="fas fa-check me-1"></i>اعمال اطلاعات به فرم';
                resultsHtml += '</button>';
                resultsHtml += '<button type="button" class="btn btn-secondary ms-2" onclick="clearInquiryResults()">';
                resultsHtml += '<i class="fas fa-times me-1"></i>بستن';
                resultsHtml += '</button>';
                resultsHtml += '</div>';
                
                resultsHtml += '</div></div>';

                // نمایش نتایج
                $('#inquiry-results').html(resultsHtml);
                
                // ذخیره داده‌ها برای استفاده بعدی
                window.currentInquiryData = inquiryData;
            }

            function populateFormFromInquiry(inquiryData) {
                if (!inquiryData || !inquiryData.IdentityData) {
                    return;
                }

                var identityData = inquiryData.IdentityData;
                var insuranceData = inquiryData.InsuranceData;

                // پر کردن فیلدهای فرم
                $('#FirstName').val(identityData.FirstName || '');
                $('#LastName').val(identityData.LastName || '');
                $('#Gender').val(identityData.Gender || '');
                $('#BirthDate').val(identityData.BirthDate ? new Date(identityData.BirthDate).toISOString().split('T')[0] : '');
                $('#Address').val(identityData.Address || '');
                
                // پر کردن اطلاعات بیمه
                if (insuranceData && insuranceData.InsuranceName) {
                    $('#InsuranceName').val(insuranceData.InsuranceName);
                    $('#InsuranceNumber').val(insuranceData.InsuranceNumber);
                }

                // نمایش پیام مناسب
                if (inquiryData.Message && inquiryData.Message.includes('بیمار جدید')) {
                    showWarning('بیمار جدید - لطفاً اطلاعات را تکمیل کنید');
                } else {
                    showSuccess('اطلاعات استعلام شده به فرم اعمال شد');
                }
            }

            function applyInquiryData() {
                if (window.currentInquiryData) {
                    populateFormFromInquiry(window.currentInquiryData);
                    clearInquiryResults();
                }
            }

            function clearInquiryResults() {
                $('#inquiry-results').empty();
                window.currentInquiryData = null;
            }

            function loadDoctors() {
                console.log('👨‍⚕️ Loading doctors...');
                
                $.ajax({
                    url: '@Url.Action("GetDoctors", "Reception")',
                    type: 'GET',
                    dataType: 'json',
                    success: function (response) {
                        console.log('👨‍⚕️ Doctors response:', response);
                        
                        if (response.success) {
                            var select = $('#doctorSelect');
                            select.empty().append('<option value="">انتخاب پزشک</option>');
                            
                            if (response.data && response.data.length > 0) {
                            $.each(response.data, function (index, doctor) {
                                    console.log('👨‍⚕️ Doctor:', doctor);
                                    select.append('<option value="' + doctor.DoctorId + '">' + doctor.FullName + '</option>');
                                });
                                console.log('✅ Doctors loaded successfully');
                            } else {
                                console.warn('⚠️ No doctors found');
                            }
                        } else {
                            console.error('❌ Failed to load doctors:', response.message);
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error('❌ Error loading doctors:', { status: status, error: error });
                    }
                });
            }
            
            // ✅ تابع لود کردن دپارتمان‌های پزشک
            function loadDoctorDepartments(doctorId) {
                console.log('🏥 Loading departments for doctor:', doctorId);
                
                $.ajax({
                    url: '@Url.Action("GetDoctorDepartments", "Reception")',
                    type: 'GET',
                    dataType: 'json',
                    data: { doctorId: doctorId },
                    success: function (response) {
                        console.log('🏥 Doctor departments response:', response);
                        
                        if (response.success) {
                            // لود کردن سرفصل‌های دپارتمان‌ها
                            loadServiceCategoriesByDepartments(response.data);
                        } else {
                            console.error('❌ Failed to load doctor departments:', response.message);
                            showError('خطا در دریافت دپارتمان‌های پزشک: ' + response.message);
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error('❌ Error loading doctor departments:', { status: status, error: error });
                        showError('خطا در ارتباط با سرور برای دریافت دپارتمان‌ها');
                    }
                });
            }
            
            // ✅ تابع لود کردن سرفصل‌ها بر اساس دپارتمان‌ها
            function loadServiceCategoriesByDepartments(departments) {
                console.log('📋 Loading service categories for departments:', departments);
                
                if (!departments || departments.length === 0) {
                    console.warn('⚠️ No departments provided');
                    clearServiceFields();
                    return;
                }
                
                // جمع‌آوری شناسه‌های دپارتمان‌ها
                var departmentIds = departments.map(function(dept) { return dept.DepartmentId; });
                console.log('📋 Department IDs:', departmentIds);
                
                $.ajax({
                    url: '@Url.Action("GetServiceCategoriesByDepartments", "Reception")',
                    type: 'GET',
                    dataType: 'json',
                    data: { departmentIds: departmentIds.join(',') },
                    success: function (response) {
                        console.log('📋 Service categories response:', response);
                        
                        if (response.success) {
                            populateServiceCategories(response.data);
                        } else {
                            console.error('❌ Failed to load service categories:', response.message);
                            showError('خطا در دریافت سرفصل‌های خدمات: ' + response.message);
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error('❌ Error loading service categories:', { status: status, error: error });
                        showError('خطا در ارتباط با سرور برای دریافت سرفصل‌ها');
                    }
                });
            }
            
            // ✅ تابع پر کردن سرفصل‌های خدمات
            function populateServiceCategories(categories) {
                console.log('📋 Populating service categories:', categories);
                
                var select = $('#service-category');
                select.empty().append('<option value="">انتخاب دسته‌بندی</option>');
                
                if (categories && categories.length > 0) {
                    $.each(categories, function (index, category) {
                        console.log('📋 Category:', category);
                        select.append('<option value="' + category.ServiceCategoryId + '">' + category.Title + ' (' + category.DepartmentName + ')</option>');
                    });
                    console.log('✅ Service categories populated successfully');
                } else {
                    console.warn('⚠️ No service categories found');
                    select.append('<option value="">سرفصل‌ای یافت نشد</option>');
                }
                
                // پاک کردن فیلد خدمات
                $('#services').empty().append('<option value="">ابتدا دسته‌بندی را انتخاب کنید</option>');
            }
            
            // ✅ تابع پاک کردن فیلدهای خدمات
            function clearServiceFields() {
                console.log('🔄 Clearing service fields...');
                
                $('#service-category').empty().append('<option value="">ابتدا پزشک را انتخاب کنید</option>');
                $('#services').empty().append('<option value="">ابتدا دسته‌بندی را انتخاب کنید</option>');
            }

            function validateForm() {
                var isValid = true;
                
                // اعتبارسنجی بیمار
                if (!$('#PatientId').val()) {
                    showError('لطفاً بیمار را انتخاب کنید');
                    isValid = false;
                }
                
                // اعتبارسنجی پزشک
                if (!$('#DoctorId').val()) {
                    showError('لطفاً پزشک را انتخاب کنید');
                    isValid = false;
                }
                
                // اعتبارسنجی تاریخ پذیرش
                if (!$('#ReceptionDateShamsi').val()) {
                    showError('لطفاً تاریخ پذیرش را وارد کنید');
                    isValid = false;
                }
                
                // اعتبارسنجی خدمات
                if (!$('#services').val() || $('#services').val().length === 0) {
                    showError('لطفاً حداقل یک خدمت انتخاب کنید');
                    isValid = false;
                }
                
                // اعتبارسنجی Persian DatePicker
                if (!validatePersianDates()) {
                    isValid = false;
                }
                
                return isValid;
            }
            
            // ✅ اعتبارسنجی تاریخ‌های فارسی
            function validatePersianDates() {
                var isValid = true;
                
                // اعتبارسنجی تاریخ پذیرش
                var receptionDate = $('#ReceptionDateShamsi').val();
                if (receptionDate && !isValidPersianDate(receptionDate)) {
                    showError('فرمت تاریخ پذیرش صحیح نیست');
                    isValid = false;
                }
                
                // اعتبارسنجی تاریخ تولد (اختیاری)
                var birthDate = $('#BirthDateShamsiForInquiry').val();
                if (birthDate && !isValidPersianDate(birthDate)) {
                    showError('فرمت تاریخ تولد صحیح نیست');
                    isValid = false;
                }
                
                return isValid;
            }
            
            // ✅ بررسی صحت فرمت تاریخ فارسی
            function isValidPersianDate(persianDate) {
                if (!persianDate || persianDate.trim() === '') {
                    return true; // فیلد خالی مجاز است
                }
                
                var persianDatePattern = /^[۱۲۳۴۵۶۷۸۹۰]+[/][۱۲۳۴۵۶۷۸۹۰]+[/][۱۲۳۴۵۶۷۸۹۰]+$/;
                return persianDatePattern.test(persianDate);
            }

            function submitForm() {
                var formData = $('#create-reception-form').serialize();
                
                $.ajax({
                    url: '@Url.Action("Create", "Reception")',
                    type: 'POST',
                    data: formData,
                    beforeSend: function () {
                        $('#submit-button').prop('disabled', true);
                        $('#submit-button-text').hide();
                        $('#submit-button-spinner').show();
                    },
                    success: function (response) {
                        if (response.success) {
                            showSuccess('پذیرش با موفقیت ثبت شد');
                            setTimeout(function () {
                                window.location.href = '@Url.Action("Index")';
                            }, 2000);
                        } else {
                            showError('خطا در ثبت پذیرش: ' + (response.message || 'خطای نامشخص'));
                        }
                    },
                    error: function () {
                        showError('خطا در ارتباط با سرور');
                    },
                    complete: function () {
                        $('#submit-button').prop('disabled', false);
                        $('#submit-button-text').show();
                        $('#submit-button-spinner').hide();
                    }
                });
            }

            function updateProgress() {
                var progress = 0;
                var totalFields = 6; // تعداد فیلدهای اصلی
                
                if ($('#PatientId').val()) progress += 1;
                if ($('#DoctorId').val()) progress += 1;
                if ($('#services').val() && $('#services').val().length > 0) progress += 1;
                if ($('#TotalAmount').val()) progress += 1;
                if ($('#PaymentMethod').val()) progress += 1;
                if ($('#ReceptionDateShamsi').val()) progress += 1;
                
                var percentage = Math.round((progress / totalFields) * 100);
                $('#form-progress').css('width', percentage + '%');
                $('#progress-text').text(percentage + '% تکمیل شده');
            }

            function showSuccess(message) {
                console.log('✅ Success:', message);
                toastr.success(message);
            }

            function showError(message) {
                console.error('❌ Error:', message);
                toastr.error(message);
            }

            function showWarning(message) {
                console.warn('⚠️ Warning:', message);
                toastr.warning(message);
            }
            
            // ✅ مقداردهی اولیه Persian DatePicker
            function initializePersianDatePickers() {
                $('.persian-datepicker').each(function() {
                    var $this = $(this);
                    var currentValue = $this.val();
                    
                    // اگر مقدار اولیه مشکل‌ساز وجود دارد، آن را پاک کن
                    if (currentValue && currentValue.includes('۷۸۳')) {
                        $this.val('');
                    }
                    
                    $this.persianDatepicker({
                        format: 'YYYY/MM/DD',
                        initialValue: false,
                        autoClose: true,
                        calendar: {
                            persian: {
                                locale: 'fa',
                                showHint: true,
                                leapYearMode: 'algorithmic'
                            }
                        }
                    });
                    
                    // تنظیم مقدار اولیه صحیح
                    setTimeout(function() {
                        if (!$this.val() || $this.val().includes('۷۸۳')) {
                            $this.val('');
                        }
                    }, 100);
                });
                
                // ✅ Event delegation برای تغییر تاریخ - فقط Persian DatePicker
                $(document).on('change', '.persian-datepicker', function() {
                    console.log('🗓️ Persian datepicker change event triggered');
                    convertPersianDateToGregorian($(this));
                });
                
            // ✅ Event delegation برای input events - فقط Persian DatePicker
                $(document).on('input blur', '.persian-datepicker', function() {
                console.log('🗓️ Persian datepicker input/blur event triggered');
                var $element = $(this);
                    setTimeout(function() {
                    convertPersianDateToGregorian($element);
                    }, 100);
                });
            
            // ✅ Event delegation برای تغییر تاریخ تولد (محاسبه سن)
            $(document).on('change', '#BirthDate', function() {
                console.log('📅 Birth date changed');
                var birthDate = $(this).val();
                console.log('📅 Birth date value:', birthDate);
                console.log('📅 Birth date type:', typeof birthDate);
                if (birthDate) {
                    displayAge(birthDate);
                } else {
                    $('#Age').val('');
                }
            });
            
            // ✅ Event delegation برای بررسی مقدار فیلد تاریخ تولد
            $(document).on('focus blur', '#BirthDate', function() {
                var currentValue = $(this).val();
                console.log('📅 BirthDate field value on focus/blur:', currentValue);
            });
            
            // ✅ Event delegation برای دکمه ویرایش اطلاعات بیمار
            $(document).on('click', '#edit-patient-btn', function() {
                var patientId = $('#PatientId').val();
                if (patientId) {
                    console.log('🏥 Opening patient edit page for ID:', patientId);
                    // باز کردن صفحه ویرایش بیمار در تب جدید
                    window.open('@Url.Action("Edit", "Patient")/' + patientId, '_blank');
                } else {
                    showError('شناسه بیمار یافت نشد');
                }
            });
            
            // ✅ Event delegation برای دکمه ایجاد بیمار جدید
            $(document).on('click', '#create-new-patient-btn', function() {
                var nationalCode = $('#NationalCodeForInquiry').val();
                console.log('🏥 Creating new patient with national code:', nationalCode);
                
                if (nationalCode) {
                    // باز کردن صفحه ایجاد بیمار جدید در تب جدید با کد ملی
                    var createUrl = '@Url.Action("Create", "Patient")' + '?nationalCode=' + encodeURIComponent(nationalCode);
                    window.open(createUrl, '_blank');
                } else {
                    // باز کردن صفحه ایجاد بیمار جدید بدون کد ملی
                    window.open('@Url.Action("Create", "Patient")', '_blank');
                }
            });
            
            // ✅ Event delegation برای دکمه جستجوی مجدد
            $(document).on('click', '#retry-search-btn', function() {
                console.log('🔄 Retrying patient search...');
                $('#patient-search-results').empty();
                $('#NationalCodeForInquiry').focus();
                showInfo('لطفاً کد ملی را مجدداً وارد کنید');
            });
            
            // ✅ Event delegation برای دکمه‌های Reset Form
            $(document).on('click', '#reset-form-header-btn, #reset-form-footer-btn, #reset-form-btn', function() {
                console.log('🔄 Resetting form...');
                resetReceptionForm();
            });
            
            // ✅ Keyboard Shortcut برای Reset Form (Ctrl+R)
            $(document).on('keydown', function(e) {
                if (e.ctrlKey && e.key === 'r') {
                    e.preventDefault(); // جلوگیری از reload صفحه
                    console.log('🔄 Reset form triggered by keyboard shortcut (Ctrl+R)');
                    resetReceptionForm();
                }
            });
            
            // ✅ تابع Reset Form
            function resetReceptionForm() {
                try {
                    console.log('🔄 Starting form reset...');
                    
                    // تایید از کاربر
                    if (!confirm('آیا مطمئن هستید که می‌خواهید تمام اطلاعات فرم را پاک کنید؟')) {
                        console.log('🔄 Form reset cancelled by user');
                        return;
                    }
                    
                    // پاک کردن فیلدهای جستجوی بیمار
                    console.log('🔄 Clearing patient search fields...');
                    $('#NationalCodeForInquiry').val('');
                    $('#patient-search-results').empty();
                    $('#selected-patient-info').empty();
                    
                    // پاک کردن فیلدهای اطلاعات بیمار
                    console.log('🔄 Clearing patient info fields...');
                    $('#PatientId').val('');
                    $('#FirstName').val('');
                    $('#LastName').val('');
                    $('#NationalCode').val('');
                    $('#PhoneNumber').val('');
                    $('#Gender').val('');
                    $('#birthDateShamsi').val('');
                    $('#BirthDate').val('');
                    $('#Age').val('');
                    $('#Address').val('');
                    
                    // پاک کردن فیلدهای اطلاعات بیمه
                    console.log('🔄 Clearing insurance info fields...');
                    $('#InsuranceType').val('');
                    $('#InsuranceNumber').val('');
                    $('#InsuranceExpiryDate').val('');
                    
                    // پاک کردن فیلدهای پذیرش
                    console.log('🔄 Clearing reception fields...');
                    $('#ReceptionDate').val('');
                    $('#receptionDateShamsi').val('');
                    $('#ReceptionTime').val('');
                    $('#ReceptionType').val('');
                    $('#IsEmergency').prop('checked', false);
                    $('#IsOnlineReception').prop('checked', false);
                    $('#Notes').val('');
                    
                    // پاک کردن فیلدهای پزشک و خدمت
                    console.log('🔄 Clearing doctor and service fields...');
                    $('#doctorSelect').val('');
                    clearServiceFields();
                    
                    // مخفی کردن بخش‌های فرم
                    console.log('🔄 Hiding form sections...');
                    $('#patient-info-fields').hide();
                    $('#insurance-info-fields').hide();
                    $('#edit-patient-btn').hide();
                    
                    // پاک کردن پیام‌ها
                    console.log('🔄 Clearing messages...');
                    $('.alert').remove();
                    
                    // بازنشانی Progress Indicator
                    console.log('🔄 Resetting progress...');
                    updateProgress();
                    
                    // فوکوس روی فیلد کد ملی
                    console.log('🔄 Focusing on national code field...');
                    $('#NationalCodeForInquiry').focus();
                    
                    // نمایش پیام موفقیت
                    console.log('🔄 Showing success message...');
                    showSuccess('فرم با موفقیت ریست شد. آماده برای پذیرش جدید.');
                    
                    console.log('✅ Form reset completed successfully');
                    
                } catch (error) {
                    console.error('❌ Error resetting form:', error);
                    showError('خطا در ریست کردن فرم: ' + error.message);
                }
            }
                
                // ✅ Event delegation برای HTML5 date fields - فقط برای logging
                $(document).on('change', 'input[type="date"]', function() {
                    var $element = $(this);
                    var fieldId = $element.attr('id');
                    var dateValue = $element.val();
                    console.log('📅 HTML5 date field changed:', {
                        fieldId: fieldId,
                        dateValue: dateValue
                    });
                });
            }
            
            // ✅ تابع جداگانه برای تبدیل تاریخ
            function convertPersianDateToGregorian($element) {
                try {
                    // بررسی وجود element
                    if (!$element || $element.length === 0) {
                        console.warn('⚠️ Element not found for date conversion');
                        return;
                    }
                    
                    var fieldId = $element.attr('id');
                    var fieldType = $element.attr('type');
                    var fieldClass = $element.attr('class');
                    
                    console.log('🗓️ Converting date for field:', {
                        fieldId: fieldId,
                        fieldType: fieldType,
                        fieldClass: fieldClass
                    });
                    
                    // بررسی نوع فیلد
                    if (fieldType === 'date') {
                        console.log('📅 HTML5 date field detected - skipping Persian conversion');
                        return;
                    }
                    
                    // بررسی کلاس persian-datepicker
                    if (!fieldClass || !fieldClass.includes('persian-datepicker')) {
                        console.log('📅 Not a Persian datepicker field - skipping conversion');
                        return;
                    }
                    
                    var persianDate = $element.val();
                    
                    // بررسی وجود مقدار
                    if (!persianDate || persianDate.trim() === '') {
                        console.log('📅 Empty date value - skipping conversion');
                        return;
                    }
                    
                    console.log('📅 Persian date value:', persianDate);
                    
                        // بررسی فرمت تاریخ فارسی (پشتیبانی از اعداد فارسی و انگلیسی)
                        var persianDatePattern = /^[۱۲۳۴۵۶۷۸۹۰0-9]+[/][۱۲۳۴۵۶۷۸۹۰0-9]+[/][۱۲۳۴۵۶۷۸۹۰0-9]+$/;
                        
                        console.log('🔍 Testing date pattern:', persianDate);
                        console.log('🔍 Pattern test result:', persianDatePattern.test(persianDate));
                        
                        if (persianDatePattern.test(persianDate)) {
                            // تبدیل تاریخ شمسی به میلادی
                        try {
                            var gregorianDate = convertPersianToGregorian(persianDate);
                            if (gregorianDate) {
                                var isoDate = gregorianDate.toISOString().split('T')[0];
                                
                                if (fieldId === 'receptionDateShamsi') {
                                    $('#ReceptionDate').val(isoDate);
                                    console.log('✅ Reception date converted:', isoDate);
                                } else if (fieldId === 'birthDateShamsiForInquiry') {
                                    $('#BirthDateForInquiry').val(isoDate);
                                    console.log('✅ Birth date for inquiry converted:', isoDate);
                                }
                                
                                console.log('✅ تاریخ تبدیل شد:', {
                                    fieldId: fieldId,
                                    persianDate: persianDate,
                                    gregorianDate: isoDate
                                });
                            } else {
                                console.warn('⚠️ تاریخ شمسی قابل تبدیل نیست:', persianDate);
                            }
                        } catch (conversionError) {
                            console.error('❌ Error in date conversion:', conversionError);
                            console.warn('⚠️ تاریخ شمسی قابل تبدیل نیست:', persianDate);
                            }
                        } else {
                        console.warn('⚠️ فرمت تاریخ شمسی صحیح نیست:', persianDate);
                    }
                } catch (error) {
                    console.error('❌ خطا در تبدیل تاریخ:', error);
                    console.error('❌ Error details:', {
                        message: error.message,
                        stack: error.stack,
                        element: $element
                    });
                }
            }
            
            // ✅ تابع محاسبه سن
            function calculateAge(birthDate) {
                try {
                    console.log('📅 Calculating age for birth date:', birthDate);
                    
                    if (!birthDate) {
                        console.log('📅 No birth date provided');
                        return null;
                    }
                    
                    var birth;
                    
                    // بررسی فرمت .NET Date
                    if (typeof birthDate === 'string' && birthDate.includes('/Date(')) {
                        console.log('📅 Processing .NET Date format');
                        birth = new Date(parseInt(birthDate.substr(6)));
                    } else if (typeof birthDate === 'string') {
                        console.log('📅 Processing string date format');
                        birth = new Date(birthDate);
                    } else {
                        console.log('📅 Processing other date format');
                        birth = new Date(birthDate);
                    }
                    
                    console.log('📅 Parsed birth date:', birth);
                    
                    if (isNaN(birth.getTime())) {
                        console.error('❌ Invalid birth date after parsing:', birthDate);
                        return null;
                    }
                    
                    var today = new Date();
                    var age = today.getFullYear() - birth.getFullYear();
                    var monthDiff = today.getMonth() - birth.getMonth();
                    
                    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
                        age--;
                    }
                    
                    console.log('📅 Calculated age:', age);
                    return age;
                } catch (error) {
                    console.error('❌ Error calculating age:', error);
                    return null;
                }
            }
            
            // ✅ تابع نمایش سن
            function displayAge(birthDate) {
                var age = calculateAge(birthDate);
                if (age !== null) {
                    $('#Age').val(age + ' سال');
                    console.log('✅ Age displayed:', age + ' سال');
                } else {
                    $('#Age').val('');
                    console.log('⚠️ Age could not be calculated');
                }
            }
            
            // ✅ تابع تبدیل تاریخ تولد به فرمت مناسب
            function formatBirthDateForDisplay(birthDate) {
                try {
                    console.log('📅 Formatting birth date for display:', birthDate);
                    
                    if (!birthDate) {
                        console.log('📅 No birth date provided');
                        return null;
                    }
                    
                    var date;
                    if (typeof birthDate === 'string' && birthDate.includes('/Date(')) {
                        // فرمت .NET Date
                        console.log('📅 Processing .NET Date format for display');
                        date = new Date(parseInt(birthDate.substr(6)));
                    } else if (typeof birthDate === 'string') {
                        // فرمت ISO string یا سایر فرمت‌ها
                        console.log('📅 Processing string date format for display');
                        date = new Date(birthDate);
                    } else {
                        // Date object
                        console.log('📅 Processing object date format for display');
                        date = new Date(birthDate);
                    }
                    
                    console.log('📅 Parsed date for display:', date);
                    
                    if (isNaN(date.getTime())) {
                        console.error('❌ Invalid birth date format:', birthDate);
                        return null;
                    }
                    
                    // تبدیل به فرمت ISO برای HTML5 date input (YYYY-MM-DD)
                    var year = date.getFullYear();
                    var month = String(date.getMonth() + 1).padStart(2, '0');
                    var day = String(date.getDate()).padStart(2, '0');
                    var isoDate = year + '-' + month + '-' + day;
                    
                    console.log('✅ Formatted birth date:', isoDate);
                    console.log('📅 Date components:', { year: year, month: month, day: day });
                    return isoDate;
                } catch (error) {
                    console.error('❌ Error formatting birth date:', error);
                    return null;
                }
            }
            
            // ✅ تابع تبدیل میلادی به شمسی
            function convertGregorianToPersian(gregorianDate) {
                try {
                    console.log('🗓️ Converting Gregorian to Persian:', gregorianDate);
                    
                    if (!gregorianDate || isNaN(gregorianDate.getTime())) {
                        console.error('❌ Invalid Gregorian date');
                        return null;
                    }
                    
                    var year = gregorianDate.getFullYear();
                    var month = gregorianDate.getMonth() + 1;
                    var day = gregorianDate.getDate();
                    
                    // تبدیل تقریبی میلادی به شمسی
                    var persianYear = year - 621;
                    var persianMonth = month;
                    var persianDay = day;
                    
                    // تنظیم ماه و روز برای تقویم شمسی
                    if (month > 2) {
                        persianMonth = month - 2;
                    } else {
                        persianYear -= 1;
                        persianMonth = month + 10;
                    }
                    
                    // فرمت کردن به صورت شمسی
                    var persianDate = persianYear + '/' + 
                                    String(persianMonth).padStart(2, '0') + '/' + 
                                    String(persianDay).padStart(2, '0');
                    
                    console.log('✅ Persian date created:', persianDate);
                    return persianDate;
                } catch (error) {
                    console.error('❌ Error converting to Persian:', error);
                    return null;
                }
            }
            
            // ✅ تابع تبدیل تاریخ شمسی به میلادی (دستی)
            function convertPersianToGregorian(persianDate) {
                try {
                    console.log('🗓️ Converting Persian date:', persianDate);
                    
                    // تبدیل اعداد فارسی به انگلیسی
                    var englishDate = persianDate
                        .replace(/۰/g, '0')
                        .replace(/۱/g, '1')
                        .replace(/۲/g, '2')
                        .replace(/۳/g, '3')
                        .replace(/۴/g, '4')
                        .replace(/۵/g, '5')
                        .replace(/۶/g, '6')
                        .replace(/۷/g, '7')
                        .replace(/۸/g, '8')
                        .replace(/۹/g, '9');
                    
                    console.log('🗓️ English date:', englishDate);
                    
                    // تجزیه تاریخ
                    var parts = englishDate.split('/');
                    if (parts.length !== 3) {
                        console.error('❌ Invalid date format:', persianDate);
                        return null;
                    }
                    
                    var year = parseInt(parts[0]);
                    var month = parseInt(parts[1]);
                    var day = parseInt(parts[2]);
                    
                    console.log('🗓️ Parsed parts:', { year: year, month: month, day: day });
                    
                    // اعتبارسنجی
                    if (isNaN(year) || isNaN(month) || isNaN(day)) {
                        console.error('❌ Invalid date numbers:', { year: year, month: month, day: day });
                        return null;
                    }
                    
                    if (year < 1300 || year > 1500) {
                        console.error('❌ Invalid year range:', year);
                        return null;
                    }
                    
                    if (month < 1 || month > 12) {
                        console.error('❌ Invalid month range:', month);
                        return null;
                    }
                    
                    if (day < 1 || day > 31) {
                        console.error('❌ Invalid day range:', day);
                        return null;
                    }
                    
                    console.log('✅ Date validation passed:', { year: year, month: month, day: day });
                    
                    // تبدیل شمسی به میلادی (تقریبی)
                    // این یک تبدیل ساده است - برای دقت بیشتر از library استفاده کنید
                    var gregorianYear = year + 621;
                    var gregorianMonth = month;
                    var gregorianDay = day;
                    
                    // تنظیم ماه و روز برای تقویم میلادی
                    if (month > 10) {
                        gregorianYear += 1;
                        gregorianMonth = month - 10;
                    } else {
                        gregorianMonth = month + 2;
                    }
                    
                    // ایجاد تاریخ میلادی
                    var gregorianDate = new Date(gregorianYear, gregorianMonth - 1, gregorianDay);
                    
                    // بررسی معتبر بودن تاریخ
                    if (isNaN(gregorianDate.getTime())) {
                        console.error('❌ Invalid Gregorian date created');
                        return null;
                    }
                    
                    console.log('✅ Gregorian date created:', gregorianDate);
                    return gregorianDate;
                    
                } catch (error) {
                    console.error('❌ Error in convertPersianToGregorian:', error);
                    return null;
                }
            }
            
            // ✅ مقداردهی اولیه Select2
            function initializeSelect2() {
                $('#doctorSelect').select2({
                    placeholder: 'انتخاب پزشک',
                    allowClear: true,
                    width: '100%',
                    language: {
                        noResults: function() {
                            return "نتیجه‌ای یافت نشد";
                        },
                        searching: function() {
                            return "در حال جستجو...";
                        }
                    }
                });
                
                $('#paymentMethodSelect').select2({
                    placeholder: 'انتخاب روش پرداخت',
                    allowClear: true,
                    width: '100%',
                    language: {
                        noResults: function() {
                            return "نتیجه‌ای یافت نشد";
                        },
                        searching: function() {
                            return "در حال جستجو...";
                        }
                    }
                });
            }

            // ✅ اعمال قوانین اعتبارسنجی
            $('#create-reception-form').validate({
                rules: {
                    'PatientId': {
                        required: true
                    },
                    'DoctorId': {
                        required: true
                    },
                    'TotalAmount': {
                        required: true,
                        min: 0
                    },
                    'PaymentMethod': {
                        required: true
                    },
                    'ReceptionDateShamsi': {
                        required: true
                    },
                    'BirthDateShamsiForInquiry': {
                        required: false
                    }
                },
                messages: {
                    'PatientId': {
                        required: "لطفاً بیمار را انتخاب کنید"
                    },
                    'DoctorId': {
                        required: "لطفاً پزشک را انتخاب کنید"
                    },
                    'TotalAmount': {
                        required: "لطفاً مجموع مبلغ را وارد کنید",
                        min: "مبلغ نمی‌تواند منفی باشد"
                    },
                    'PaymentMethod': {
                        required: "لطفاً روش پرداخت را انتخاب کنید"
                    },
                    'ReceptionDateShamsi': {
                        required: "لطفاً تاریخ پذیرش را وارد کنید"
                    },
                    'BirthDateShamsiForInquiry': {
                        required: "لطفاً تاریخ تولد را وارد کنید"
                    }
                }
            });
        });
    </script>
}
