@model ClinicApp.ViewModels.ReceptionSearchViewModel

@{
    ViewBag.Title = "مدیریت پذیرش‌ها";
    ViewBag.RequireDataTables = true;
    ViewBag.RequireSelect2 = true;
    ViewBag.RequireDatePicker = true;
    ViewBag.RequireFormValidation = true;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <!-- ✅ بخش ۱: ساختار کلی -->
            <h2 class="text-center mb-4">مدیریت پذیرش‌ها</h2>
            <p class="text-center text-muted mb-4">جستجو، فیلتر و مدیریت پذیرش‌های بیماران کلینیک شفا</p>
            
            <!-- ✅ بخش ۲: طراحی بصری -->
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white">
                    <h4 class="mb-0">
                        <i class="fas fa-clipboard-list me-2"></i>
                        لیست پذیرش‌ها
                    </h4>
                </div>
                <div class="card-body">
                    <!-- ✅ بخش جستجو و فیلتر -->
                    <div class="form-section mb-4">
                        <div class="form-section-header">
                            <i class="fas fa-search text-primary me-2"></i>
                            <h5 class="mb-0">جستجو و فیلتر</h5>
                        </div>
                        <div class="form-section-body">
                            @using (Html.BeginForm("Index", "Reception", FormMethod.Get, new { id = "search-form", @class = "needs-validation", novalidate = "novalidate" }))
                            {
                                <div class="row g-3">
                                    <!-- کد ملی بیمار -->
                                    <div class="col-md-3">
                                        <label for="PatientNationalCode" class="form-label">کد ملی بیمار</label>
                                        @Html.TextBoxFor(model => model.PatientNationalCode, new { @class = "form-control", placeholder = "کد ملی ۱۰ رقمی" })
                                        @Html.ValidationMessageFor(model => model.PatientNationalCode, "", new { @class = "text-danger" })
                                    </div>

                                    <!-- نام بیمار -->
                                    <div class="col-md-3">
                                        <label for="PatientName" class="form-label">نام بیمار</label>
                                        @Html.TextBoxFor(model => model.PatientName, new { @class = "form-control", placeholder = "نام و نام خانوادگی" })
                                        @Html.ValidationMessageFor(model => model.PatientName, "", new { @class = "text-danger" })
                                    </div>

                                    <!-- نام پزشک -->
                                    <div class="col-md-3">
                                        <label for="DoctorName" class="form-label">نام پزشک</label>
                                        @Html.TextBoxFor(model => model.DoctorName, new { @class = "form-control", placeholder = "نام پزشک" })
                                        @Html.ValidationMessageFor(model => model.DoctorName, "", new { @class = "text-danger" })
                                    </div>

                                    <!-- وضعیت پذیرش -->
                                    <div class="col-md-3">
                                        <label for="Status" class="form-label">وضعیت پذیرش</label>
                                        @Html.DropDownListFor(model => model.Status, Model.StatusList, "همه وضعیت‌ها", new { @class = "form-select", id = "statusFilter" })
                                        @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                                    </div>

                                    <!-- تاریخ شروع -->
                                    <div class="col-md-3">
                                        <label for="StartDateShamsi" class="form-label">تاریخ شروع</label>
                                        @Html.TextBoxFor(model => model.StartDateShamsi, new { @class = "form-control persian-datepicker", placeholder = "انتخاب تاریخ شروع", id = "startDateShamsi", value = "" })
                                        @Html.HiddenFor(model => model.StartDate)
                                        @Html.ValidationMessageFor(model => model.StartDateShamsi, "", new { @class = "text-danger" })
                                    </div>

                                    <!-- تاریخ پایان -->
                                    <div class="col-md-3">
                                        <label for="EndDateShamsi" class="form-label">تاریخ پایان</label>
                                        @Html.TextBoxFor(model => model.EndDateShamsi, new { @class = "form-control persian-datepicker", placeholder = "انتخاب تاریخ پایان", id = "endDateShamsi", value = "" })
                                        @Html.HiddenFor(model => model.EndDate)
                                        @Html.ValidationMessageFor(model => model.EndDateShamsi, "", new { @class = "text-danger" })
                                    </div>

                                    <!-- نوع پذیرش -->
                                    <div class="col-md-3">
                                        <label for="Type" class="form-label">نوع پذیرش</label>
                                        @Html.DropDownListFor(model => model.Type, Model.TypeList, "همه انواع", new { @class = "form-select", id = "typeFilter" })
                                        @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })
                                    </div>

                                    <!-- دکمه‌های جستجو -->
                                    <div class="col-md-3">
                                        <label class="form-label">&nbsp;</label>
                                        <div class="d-grid gap-2">
                                            <button type="submit" class="btn btn-primary">
                                                <i class="fas fa-search me-1"></i> جستجو
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>

                    <!-- ✅ بخش نتایج -->
                    <div class="form-section">
                        <div class="form-section-header">
                            <i class="fas fa-list text-primary me-2"></i>
                            <h5 class="mb-0">نتایج جستجو</h5>
                            <div class="ms-auto">
                                <a href="@Url.Action("Create")" class="btn btn-success btn-sm">
                                    <i class="fas fa-plus me-1"></i> پذیرش جدید
                                </a>
                            </div>
                        </div>
                        <div class="form-section-body">
                            <!-- جدول نتایج -->
                            <div class="table-responsive">
                                <table class="table table-hover table-striped" id="receptions-table">
                                    <thead class="table-dark">
                                        <tr>
                                            <th>شناسه</th>
                                            <th>نام بیمار</th>
                                            <th>نام پزشک</th>
                                            <th>تاریخ پذیرش</th>
                                            <th>نوع</th>
                                            <th>وضعیت</th>
                                            <th>مبلغ</th>
                                            <th>عملیات</th>
                                        </tr>
                                    </thead>
                                    <tbody id="receptions-tbody">
                                        <!-- نتایج از طریق AJAX بارگذاری می‌شوند -->
                                        <tr>
                                            <td colspan="8" class="text-center text-muted">
                                                <i class="fas fa-spinner fa-spin me-2"></i>
                                                در حال بارگذاری...
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>

                            <!-- صفحه‌بندی -->
                            <nav aria-label="صفحه‌بندی نتایج" class="mt-3">
                                <ul class="pagination justify-content-center" id="pagination">
                                    <!-- صفحه‌بندی از طریق AJAX بارگذاری می‌شود -->
                                </ul>
                            </nav>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <link href="~/Content/css/reception-standards.css" rel="stylesheet" />
    <style>
        /* ✅ استایل‌های اضافی برای Persian DatePicker */
        .persian-datepicker {
            direction: rtl;
            text-align: right;
        }
        
        .persian-datepicker:focus {
            border-color: #007bff;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        }
        
        /* ✅ استایل‌های Select2 */
        .select2-container--default .select2-selection--single {
            height: 38px;
            border: 2px solid #e9ecef;
            border-radius: 0.375rem;
        }
        
        .select2-container--default .select2-selection--single:focus {
            border-color: #007bff;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        }
    </style>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    
    <script type="text/javascript">
        $(document).ready(function () {
            // ✅ مقداردهی اولیه Persian DatePicker
            initializePersianDatePickers();
            
            // ✅ مقداردهی اولیه Select2
            initializeSelect2();
            
            // ✅ بارگذاری اولیه نتایج
            loadReceptions();

            // ✅ جستجو با فرم
            $('#search-form').on('submit', function (e) {
                e.preventDefault();
                
                // ✅ اعتبارسنجی تاریخ‌های فارسی
                if (!validatePersianDates()) {
                    return false;
                }
                
                loadReceptions();
            });

            // ✅ تابع بارگذاری نتایج
            function loadReceptions() {
                var formData = $('#search-form').serialize();
                
                $.ajax({
                    url: '@Url.Action("GetReceptions", "Reception")',
                    type: 'GET',
                    dataType: 'json',
                    data: formData,
                    beforeSend: function () {
                        $('#receptions-tbody').html('<tr><td colspan="8" class="text-center text-muted"><i class="fas fa-spinner fa-spin me-2"></i>در حال بارگذاری...</td></tr>');
                    },
                    success: function (response) {
                        // Parse response if it's a string
                        var parsedResponse = response;
                        if (typeof response === 'string') {
                            try {
                                parsedResponse = JSON.parse(response);
                            } catch (e) {
                                console.error('خطا در Parse کردن Response:', e);
                                showError('خطا در پردازش پاسخ سرور');
                                return;
                            }
                        }
                        
                        // لاگ‌گیری حرفه‌ای برای Debugging
                        console.log('Reception API Response:', {
                            success: parsedResponse.success,
                            requestId: parsedResponse.requestId,
                            timestamp: parsedResponse.timestamp,
                            dataCount: parsedResponse.data ? parsedResponse.data.items ? parsedResponse.data.items.length : 0 : 0,
                            totalCount: parsedResponse.data ? parsedResponse.data.totalCount : 0
                        });

                        if (parsedResponse.success) {
                            displayReceptions(parsedResponse.data);
                        } else {
                            var errorMessage = parsedResponse.message || 'خطای نامشخص';
                            var errorCode = parsedResponse.errorCode || 'UNKNOWN_ERROR';
                            var errorId = parsedResponse.errorId || 'N/A';
                            
                            console.error('خطا در API Response:', {
                                message: errorMessage,
                                errorCode: errorCode,
                                errorId: errorId,
                                fullResponse: parsedResponse
                            });
                            
                            showError(`خطا در بارگذاری نتایج: ${errorMessage} (کد خطا: ${errorCode})`);
                        }
                    },
                    error: function (xhr, status, error) {
                        // لاگ‌گیری حرفه‌ای برای خطاها
                        console.error('Reception API Error:', {
                            status: xhr.status,
                            statusText: xhr.statusText,
                            responseText: xhr.responseText,
                            error: error
                        });
                        
                        var errorMessage = 'خطا در ارتباط با سرور';
                        if (xhr.status === 404) {
                            errorMessage = 'سرویس یافت نشد';
                        } else if (xhr.status === 500) {
                            errorMessage = 'خطای داخلی سرور';
                        }
                        
                        showError(errorMessage);
                    }
                });
            }

            // ✅ نمایش نتایج
            function displayReceptions(data) {
                // لاگ‌گیری حرفه‌ای برای Debugging
                console.log('Display Receptions Data:', {
                    hasData: !!data,
                    hasItems: !!(data && data.items),
                    itemsCount: data && data.items ? data.items.length : 0,
                    totalCount: data ? data.totalCount : 0,
                    data: data
                });

                var tbody = $('#receptions-tbody');
                tbody.empty();

                if (data && data.items && data.items.length > 0) {
                    $.each(data.items, function (index, reception) {
                        var row = '<tr>' +
                            '<td>' + reception.receptionId + '</td>' +
                            '<td>' + reception.patientFullName + '</td>' +
                            '<td>' + reception.doctorFullName + '</td>' +
                            '<td>' + reception.receptionDate + '</td>' +
                            '<td>' + reception.type + '</td>' +
                            '<td><span class="badge bg-' + getStatusColor(reception.status) + '">' + reception.status + '</span></td>' +
                            '<td>' + formatCurrency(reception.totalAmount) + '</td>' +
                            '<td>' +
                                '<div class="btn-group btn-group-sm" role="group">' +
                                    '<a href="@Url.Action("Details")/' + reception.receptionId + '" class="btn btn-outline-info" title="مشاهده جزئیات">' +
                                        '<i class="fas fa-eye"></i>' +
                                    '</a>' +
                                    '<a href="@Url.Action("Edit")/' + reception.receptionId + '" class="btn btn-outline-warning" title="ویرایش">' +
                                        '<i class="fas fa-edit"></i>' +
                                    '</a>' +
                                    '<button type="button" class="btn btn-outline-danger" onclick="deleteReception(' + reception.receptionId + ')" title="حذف">' +
                                        '<i class="fas fa-trash"></i>' +
                                    '</button>' +
                                '</div>' +
                            '</td>' +
                        '</tr>';
                        tbody.append(row);
                    });
                } else {
                    tbody.html('<tr><td colspan="8" class="text-center text-muted">هیچ پذیرشی یافت نشد</td></tr>');
                }

                // نمایش صفحه‌بندی
                displayPagination(data);
            }

            // ✅ نمایش صفحه‌بندی
            function displayPagination(data) {
                var pagination = $('#pagination');
                pagination.empty();

                if (data.totalPages > 1) {
                    // دکمه قبلی
                    if (data.pageNumber > 1) {
                        pagination.append('<li class="page-item"><a class="page-link" href="#" onclick="changePage(' + (data.pageNumber - 1) + ')">قبلی</a></li>');
                    }

                    // صفحات
                    for (var i = 1; i <= data.totalPages; i++) {
                        var activeClass = i === data.pageNumber ? 'active' : '';
                        pagination.append('<li class="page-item ' + activeClass + '"><a class="page-link" href="#" onclick="changePage(' + i + ')">' + i + '</a></li>');
                    }

                    // دکمه بعدی
                    if (data.pageNumber < data.totalPages) {
                        pagination.append('<li class="page-item"><a class="page-link" href="#" onclick="changePage(' + (data.pageNumber + 1) + ')">بعدی</a></li>');
                    }
                }
            }

            // ✅ تغییر صفحه
            window.changePage = function (pageNumber) {
                // اضافه کردن فیلد مخفی برای شماره صفحه
                var pageInput = $('#search-form').find('input[name="pageNumber"]');
                if (pageInput.length === 0) {
                    $('#search-form').append('<input type="hidden" name="pageNumber" value="' + pageNumber + '">');
                } else {
                    pageInput.val(pageNumber);
                }
                loadReceptions();
            };

            // ✅ حذف پذیرش
            window.deleteReception = function (receptionId) {
                if (confirm('آیا از حذف این پذیرش اطمینان دارید؟')) {
                    $.ajax({
                        url: '@Url.Action("DeleteConfirmed", "Reception")/' + receptionId,
                        type: 'POST',
                        data: {
                            __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                        },
                        success: function (response) {
                            if (response.success) {
                                showSuccess('پذیرش با موفقیت حذف شد');
                                loadReceptions();
                            } else {
                                showError('خطا در حذف پذیرش: ' + response.message);
                            }
                        },
                        error: function () {
                            showError('خطا در ارتباط با سرور');
                        }
                    });
                }
            };

            // ✅ توابع کمکی
            function getStatusColor(status) {
                switch (status) {
                    case 'تکمیل شده': return 'success';
                    case 'در انتظار': return 'warning';
                    case 'لغو شده': return 'danger';
                    case 'در حال انجام': return 'info';
                    default: return 'secondary';
                }
            }

            function formatCurrency(amount) {
                return new Intl.NumberFormat('fa-IR').format(amount) + ' تومان';
            }

            function showSuccess(message) {
                // نمایش پیام موفقیت
                toastr.success(message);
            }

            function showError(message) {
                // نمایش پیام خطا
                toastr.error(message);
            }
            
            // ✅ اعتبارسنجی تاریخ‌های فارسی
            function validatePersianDates() {
                var isValid = true;
                var startDateShamsi = $('#startDateShamsi').val();
                var endDateShamsi = $('#endDateShamsi').val();
                
                // پاک کردن پیام‌های خطای قبلی
                $('.text-danger').text('');
                
                // اعتبارسنجی تاریخ شروع
                if (startDateShamsi && !isValidPersianDate(startDateShamsi)) {
                    $('#startDateShamsi').next('.text-danger').text('فرمت تاریخ شروع صحیح نیست');
                    isValid = false;
                }
                
                // اعتبارسنجی تاریخ پایان
                if (endDateShamsi && !isValidPersianDate(endDateShamsi)) {
                    $('#endDateShamsi').next('.text-danger').text('فرمت تاریخ پایان صحیح نیست');
                    isValid = false;
                }
                
                // اعتبارسنجی منطقی بودن بازه تاریخ
                if (startDateShamsi && endDateShamsi && isValidPersianDate(startDateShamsi) && isValidPersianDate(endDateShamsi)) {
                    var startDate = persianDatepicker.parseDate(startDateShamsi);
                    var endDate = persianDatepicker.parseDate(endDateShamsi);
                    
                    if (startDate > endDate) {
                        $('#endDateShamsi').next('.text-danger').text('تاریخ پایان باید بعد از تاریخ شروع باشد');
                        isValid = false;
                    }
                }
                
                return isValid;
            }
            
            // ✅ بررسی صحت فرمت تاریخ فارسی
            function isValidPersianDate(dateString) {
                if (!dateString) return true; // فیلد اختیاری
                
                // الگوی تاریخ فارسی: YYYY/MM/DD
                var persianDatePattern = /^[۱۲۳۴۵۶۷۸۹۰]+[/][۱۲۳۴۵۶۷۸۹۰]+[/][۱۲۳۴۵۶۷۸۹۰]+$/;
                
                if (!persianDatePattern.test(dateString)) {
                    return false;
                }
                
                try {
                    // تلاش برای parse کردن تاریخ
                    var parsedDate = persianDatepicker.parseDate(dateString);
                    return parsedDate !== null;
                } catch (e) {
                    return false;
                }
            }
            
            // ✅ مقداردهی اولیه Persian DatePicker
            function initializePersianDatePickers() {
                // مقداردهی Persian DatePicker با تنظیمات ساده و صحیح
                $('.persian-datepicker').each(function() {
                    var $this = $(this);
                    var currentValue = $this.val();
                    
                    // اگر مقدار اولیه وجود دارد، آن را پاک کن
                    if (currentValue && currentValue.includes('۷۸۳')) {
                        $this.val('');
                    }
                    
                    $this.persianDatepicker({
                        format: 'YYYY/MM/DD',
                        initialValue: false,
                        autoClose: true,
                        calendar: {
                            persian: {
                                locale: 'fa',
                                showHint: true,
                                leapYearMode: 'algorithmic'
                            }
                        }
                    });
                    
                    // تنظیم مقدار اولیه صحیح
                    setTimeout(function() {
                        if (!$this.val() || $this.val().includes('۷۸۳')) {
                            $this.val('');
                        }
                    }, 100);
                });
                
                // ✅ Event delegation برای تغییر تاریخ
                $(document).on('change', '.persian-datepicker', function() {
                    convertPersianDateToGregorian($(this));
                });
                
                // ✅ Event delegation برای input events
                $(document).on('input blur', '.persian-datepicker', function() {
                    setTimeout(function() {
                        convertPersianDateToGregorian($(this));
                    }, 100);
                });
            }
            
            // ✅ تابع جداگانه برای تبدیل تاریخ
            function convertPersianDateToGregorian($element) {
                try {
                    var fieldId = $element.attr('id');
                    var persianDate = $element.val();
                    
                    if (persianDate && persianDate.trim() !== '') {
                        // بررسی فرمت تاریخ فارسی
                        var persianDatePattern = /^[۱۲۳۴۵۶۷۸۹۰]+[/][۱۲۳۴۵۶۷۸۹۰]+[/][۱۲۳۴۵۶۷۸۹۰]+$/;
                        
                        if (persianDatePattern.test(persianDate)) {
                            // تبدیل تاریخ شمسی به میلادی
                            var gregorianDate = persianDatepicker.parseDate(persianDate);
                            if (gregorianDate) {
                                var isoDate = gregorianDate.toISOString().split('T')[0];
                                
                                if (fieldId === 'startDateShamsi') {
                                    $('#StartDate').val(isoDate);
                                } else if (fieldId === 'endDateShamsi') {
                                    $('#EndDate').val(isoDate);
                                }
                                
                                console.log('تاریخ تبدیل شد:', {
                                    fieldId: fieldId,
                                    persianDate: persianDate,
                                    gregorianDate: isoDate
                                });
                            } else {
                                console.warn('تاریخ شمسی قابل تبدیل نیست:', persianDate);
                            }
                        } else {
                            console.warn('فرمت تاریخ شمسی صحیح نیست:', persianDate);
                        }
                    }
                } catch (error) {
                    console.error('خطا در تبدیل تاریخ:', error);
                }
            }
            
            // ✅ مقداردهی اولیه Select2
            function initializeSelect2() {
                $('#statusFilter').select2({
                    placeholder: 'انتخاب وضعیت',
                    allowClear: true,
                    width: '100%',
                    language: {
                        noResults: function() {
                            return "نتیجه‌ای یافت نشد";
                        },
                        searching: function() {
                            return "در حال جستجو...";
                        }
                    }
                });
                
                $('#typeFilter').select2({
                    placeholder: 'انتخاب نوع',
                    allowClear: true,
                    width: '100%',
                    language: {
                        noResults: function() {
                            return "نتیجه‌ای یافت نشد";
                        },
                        searching: function() {
                            return "در حال جستجو...";
                        }
                    }
                });
            }
        });
    </script>
}
