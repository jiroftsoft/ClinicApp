@model ClinicApp.ViewModels.Reception.ReceptionIndexViewModel

@{
    ViewBag.Title = "مدیریت پذیرش";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="reception-dashboard">
    <!-- Header -->
    <div class="dashboard-header">
        <div class="header-content">
            <h1 class="dashboard-title">
                <i class="fas fa-clipboard-list me-3"></i>
                مدیریت پذیرش
            </h1>
            <p class="dashboard-subtitle">سیستم مدیریت پذیرش بیماران - کامپوننت محور و بدون رفرش صفحه</p>
        </div>
        <div class="header-actions">
            <button type="button" class="btn btn-primary" data-action="new-reception">
                <i class="fas fa-plus me-2"></i>
                پذیرش جدید
            </button>
            <button type="button" class="btn btn-outline-primary" data-action="quick-search">
                <i class="fas fa-search me-2"></i>
                جستجوی سریع
            </button>
        </div>
    </div>

    <!-- Main Content -->
    <div class="dashboard-content">
        <div class="content-grid">
            <!-- Left Column - Patient Search -->
            <div class="content-column">
                <div class="column-header">
                    <h5 class="column-title">
                        <i class="fas fa-user-search me-2"></i>
                        انتخاب بیمار
                    </h5>
                </div>
                <div class="column-content">
                    @Html.Partial("Components/_PatientSearchComponent", new ClinicApp.ViewModels.Reception.PatientSearchComponentViewModel())
                </div>
            </div>

            <!-- Right Column - Reception Form -->
            <div class="content-column">
                <div class="column-header">
                    <h5 class="column-title">
                        <i class="fas fa-clipboard-list me-2"></i>
                        فرم پذیرش
                    </h5>
                </div>
                <div class="column-content">
                    @Html.Partial("Components/_ReceptionFormComponent", new ClinicApp.ViewModels.Reception.ReceptionFormComponentViewModel())
                </div>
            </div>
        </div>

        <!-- Bottom Section - Reception History -->
        <div class="history-section">
            <div class="section-header">
                <h5 class="section-title">
                    <i class="fas fa-history me-2"></i>
                    تاریخچه پذیرش‌ها
                </h5>
            </div>
            <div class="section-content">
                @Html.Partial("Components/_ReceptionHistoryComponent", new ClinicApp.ViewModels.Reception.ReceptionHistoryComponentViewModel())
            </div>
        </div>
    </div>

    <!-- Quick Actions Panel -->
    <div class="quick-actions-panel" id="quickActionsPanel" style="display: none;">
        <div class="panel-header">
            <h6 class="panel-title">عملیات سریع</h6>
            <button type="button" class="btn-close" data-action="close-panel">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="panel-content">
            <div class="quick-actions">
                <button type="button" class="quick-action-btn" data-action="insurance-check">
                    <i class="fas fa-shield-alt"></i>
                    <span>بررسی بیمه</span>
                </button>
                <button type="button" class="quick-action-btn" data-action="payment-calc">
                    <i class="fas fa-calculator"></i>
                    <span>محاسبه پرداخت</span>
                </button>
                <button type="button" class="quick-action-btn" data-action="appointment-schedule">
                    <i class="fas fa-calendar-alt"></i>
                    <span>زمان‌بندی</span>
                </button>
                <button type="button" class="quick-action-btn" data-action="report-generate">
                    <i class="fas fa-file-alt"></i>
                    <span>گزارش</span>
                </button>
            </div>
        </div>
    </div>

    <!-- Status Bar -->
    <div class="status-bar">
        <div class="status-info">
            <span class="status-item">
                <i class="fas fa-user me-1"></i>
                <span id="selectedPatientInfo">هیچ بیمار انتخاب نشده</span>
            </span>
            <span class="status-item">
                <i class="fas fa-clock me-1"></i>
                <span id="currentTime"></span>
            </span>
            <span class="status-item">
                <i class="fas fa-user-md me-1"></i>
                <span id="currentUser">@User.Identity.Name</span>
            </span>
        </div>
        <div class="status-actions">
            <button type="button" class="btn btn-sm btn-outline-primary" data-action="toggle-quick-actions">
                <i class="fas fa-bolt"></i>
            </button>
            <button type="button" class="btn btn-sm btn-outline-secondary" data-action="refresh-all">
                <i class="fas fa-sync-alt"></i>
            </button>
        </div>
    </div>
</div>

<!-- Global Styles -->
<style>
.reception-dashboard {
    min-height: 100vh;
    background: #f8f9fa;
    padding: 20px;
}

.dashboard-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
    padding: 20px;
    background: #fff;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.dashboard-title {
    margin: 0;
    font-size: 28px;
    font-weight: 700;
    color: #333;
}

.dashboard-subtitle {
    margin: 5px 0 0 0;
    color: #6c757d;
    font-size: 14px;
}

.header-actions {
    display: flex;
    gap: 10px;
}

.dashboard-content {
    display: flex;
    flex-direction: column;
    gap: 30px;
}

.content-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 30px;
}

.content-column {
    background: #fff;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    overflow: hidden;
}

.column-header {
    padding: 20px;
    background: #f8f9fa;
    border-bottom: 1px solid #e0e0e0;
}

.column-title {
    margin: 0;
    font-size: 18px;
    font-weight: 600;
    color: #333;
}

.column-content {
    padding: 0;
}

.history-section {
    background: #fff;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    overflow: hidden;
}

.section-header {
    padding: 20px;
    background: #f8f9fa;
    border-bottom: 1px solid #e0e0e0;
}

.section-title {
    margin: 0;
    font-size: 18px;
    font-weight: 600;
    color: #333;
}

.section-content {
    padding: 0;
}

.quick-actions-panel {
    position: fixed;
    top: 50%;
    right: 20px;
    transform: translateY(-50%);
    width: 200px;
    background: #fff;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    z-index: 1000;
}

.panel-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 15px;
    background: #f8f9fa;
    border-bottom: 1px solid #e0e0e0;
}

.panel-title {
    margin: 0;
    font-size: 14px;
    font-weight: 600;
    color: #333;
}

.btn-close {
    background: none;
    border: none;
    font-size: 14px;
    color: #6c757d;
    cursor: pointer;
}

.panel-content {
    padding: 15px;
}

.quick-actions {
    display: flex;
    flex-direction: column;
    gap: 10px;
}

.quick-action-btn {
    display: flex;
    align-items: center;
    gap: 10px;
    padding: 10px;
    background: #f8f9fa;
    border: 1px solid #e0e0e0;
    border-radius: 6px;
    cursor: pointer;
    transition: all 0.2s ease;
    font-size: 14px;
    color: #333;
}

.quick-action-btn:hover {
    background: #e9ecef;
    border-color: #007bff;
}

.quick-action-btn i {
    font-size: 16px;
    color: #007bff;
}

.status-bar {
    position: fixed;
    bottom: 0;
    left: 0;
    right: 0;
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 10px 20px;
    background: #fff;
    border-top: 1px solid #e0e0e0;
    box-shadow: 0 -2px 4px rgba(0, 0, 0, 0.1);
    z-index: 1000;
}

.status-info {
    display: flex;
    gap: 20px;
}

.status-item {
    display: flex;
    align-items: center;
    font-size: 14px;
    color: #6c757d;
}

.status-item i {
    color: #007bff;
}

.status-actions {
    display: flex;
    gap: 10px;
}

/* Responsive Design */
@@media (max-width: 1200px) {
    .content-grid {
        grid-template-columns: 1fr;
    }
}

@@media (max-width: 768px) {
    .dashboard-header {
        flex-direction: column;
        gap: 20px;
        text-align: center;
    }
    
    .header-actions {
        width: 100%;
        justify-content: center;
    }
    
    .quick-actions-panel {
        right: 10px;
        width: 180px;
    }
    
    .status-bar {
        flex-direction: column;
        gap: 10px;
        text-align: center;
    }
}

/* Animation Classes */
.fade-in {
    animation: fadeIn 0.3s ease-in-out;
}

.slide-in-right {
    animation: slideInRight 0.3s ease-in-out;
}

.slide-in-left {
    animation: slideInLeft 0.3s ease-in-out;
}

@@keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
}

@@keyframes slideInRight {
    from { transform: translateX(100%); }
    to { transform: translateX(0); }
}

@@keyframes slideInLeft {
    from { transform: translateX(-100%); }
    to { transform: translateX(0); }
}
</style>

<!-- Global JavaScript -->
<script>
$(document).ready(function() {
    // Initialize Reception Dashboard
    initializeReceptionDashboard();
});

function initializeReceptionDashboard() {
    // Initialize components
    initializeComponents();
    
    // Initialize event handlers
    initializeEventHandlers();
    
    // Initialize status bar
    initializeStatusBar();
    
    // Initialize quick actions
    initializeQuickActions();
    
    // Start real-time updates
    startRealTimeUpdates();
}

function initializeComponents() {
    // Initialize all components
    $('[data-component]').each(function() {
        const component = $(this);
        const componentName = component.data('component');
        
        // Add fade-in animation
        component.addClass('fade-in');
        
        // Initialize component-specific functionality
        switch (componentName) {
            case 'patient-search':
                // Already initialized in component
                break;
            case 'reception-form':
                // Already initialized in component
                break;
            case 'reception-history':
                // Already initialized in component
                break;
        }
    });
}

function initializeEventHandlers() {
    // New reception button
    $('[data-action="new-reception"]').on('click', function() {
        createNewReception();
    });
    
    // Quick search button
    $('[data-action="quick-search"]').on('click', function() {
        openQuickSearch();
    });
    
    // Refresh all button
    $('[data-action="refresh-all"]').on('click', function() {
        refreshAllComponents();
    });
    
    // Toggle quick actions
    $('[data-action="toggle-quick-actions"]').on('click', function() {
        toggleQuickActions();
    });
    
    // Close quick actions panel
    $('[data-action="close-panel"]').on('click', function() {
        closeQuickActions();
    });
    
    // Quick action buttons
    $('[data-action="insurance-check"]').on('click', function() {
        performInsuranceCheck();
    });
    
    $('[data-action="payment-calc"]').on('click', function() {
        performPaymentCalculation();
    });
    
    $('[data-action="appointment-schedule"]').on('click', function() {
        scheduleAppointment();
    });
    
    $('[data-action="report-generate"]').on('click', function() {
        generateReport();
    });
}

function initializeStatusBar() {
    // Update current time
    updateCurrentTime();
    setInterval(updateCurrentTime, 1000);
    
    // Update selected patient info
    $(document).on('patientSelected', function(event, patient) {
        updateSelectedPatientInfo(patient);
    });
}

function initializeQuickActions() {
    // Quick actions are initialized in HTML
}

function startRealTimeUpdates() {
    // Start real-time updates for components
    setInterval(function() {
        updateComponentStatuses();
    }, 30000); // Update every 30 seconds
}

function createNewReception() {
    // Reset form and show new reception
    $('[data-component="reception-form"]').trigger('reset');
    $('[data-component="patient-search"]').trigger('clear');
    
    // Show success message
    showNotification('آماده برای پذیرش جدید', 'success');
}

function openQuickSearch() {
    // Focus on patient search
    $('[data-component="patient-search"] #nationalCodeInput').focus();
    
    // Show quick search modal if needed
    showQuickSearchModal();
}

function refreshAllComponents() {
    // Refresh all components
    $('[data-component]').each(function() {
        const component = $(this);
        component.trigger('refresh');
    });
    
    showNotification('همه کامپوننت‌ها به‌روزرسانی شدند', 'info');
}

function toggleQuickActions() {
    const panel = $('#quickActionsPanel');
    panel.toggle();
    
    if (panel.is(':visible')) {
        panel.addClass('slide-in-right');
    }
}

function closeQuickActions() {
    $('#quickActionsPanel').hide();
}

function performInsuranceCheck() {
    const selectedPatientId = getSelectedPatientId();
    if (selectedPatientId) {
        // Trigger insurance validation
        $('[data-component="reception-form"]').trigger('validateInsurance', [selectedPatientId]);
        showNotification('بررسی بیمه در حال انجام است', 'info');
    } else {
        showNotification('ابتدا بیمار را انتخاب کنید', 'warning');
    }
}

function performPaymentCalculation() {
    const selectedPatientId = getSelectedPatientId();
    const serviceId = $('#serviceId').val();
    
    if (selectedPatientId && serviceId) {
        // Trigger payment calculation
        $('[data-component="reception-form"]').trigger('calculatePayment', [selectedPatientId, serviceId]);
        showNotification('محاسبه پرداخت در حال انجام است', 'info');
    } else {
        showNotification('ابتدا بیمار و خدمت را انتخاب کنید', 'warning');
    }
}

function scheduleAppointment() {
    const selectedPatientId = getSelectedPatientId();
    if (selectedPatientId) {
        // Open appointment scheduling
        window.open('/Appointment/Schedule', '_blank');
        showNotification('صفحه زمان‌بندی باز شد', 'info');
    } else {
        showNotification('ابتدا بیمار را انتخاب کنید', 'warning');
    }
}

function generateReport() {
    // Generate reception report
    window.open('/Report/Reception', '_blank');
    showNotification('گزارش پذیرش در حال تولید است', 'info');
}

function updateCurrentTime() {
    const now = new Date();
    const timeString = now.toLocaleTimeString('fa-IR');
    $('#currentTime').text(timeString);
}

function updateSelectedPatientInfo(patient) {
    const info = `${patient.firstName} ${patient.lastName} - ${patient.nationalCode}`;
    $('#selectedPatientInfo').text(info);
}

function updateComponentStatuses() {
    // Update component statuses
    $('[data-component]').each(function() {
        const component = $(this);
        const statusIndicator = component.find('.status-indicator');
        const statusText = component.find('.status-text');
        
        // Check if component is responsive
        if (component.hasClass('loading')) {
            statusIndicator.removeClass('error success').addClass('loading');
            statusText.text('در حال پردازش...');
        } else {
            statusIndicator.removeClass('loading error').addClass('success');
            statusText.text('آماده');
        }
    });
}

function getSelectedPatientId() {
    return $('#selectedPatient').data('patient-id');
}

function showNotification(message, type) {
    // Create notification element
    const notification = $(`
        <div class="notification notification-${type}">
            <i class="fas fa-${getNotificationIcon(type)} me-2"></i>
            <span>${message}</span>
        </div>
    `);
    
    // Add to page
    $('body').append(notification);
    
    // Show notification
    notification.addClass('show');
    
    // Auto-hide after 3 seconds
    setTimeout(function() {
        notification.removeClass('show');
        setTimeout(function() {
            notification.remove();
        }, 300);
    }, 3000);
}

function getNotificationIcon(type) {
    switch (type) {
        case 'success': return 'check-circle';
        case 'error': return 'exclamation-circle';
        case 'warning': return 'exclamation-triangle';
        case 'info': return 'info-circle';
        default: return 'info-circle';
    }
}

function showQuickSearchModal() {
    // Show quick search modal if needed
    const modal = $(`
        <div class="modal fade" id="quickSearchModal" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">جستجوی سریع</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="input-group">
                            <input type="text" class="form-control" placeholder="کد ملی یا نام بیمار">
                            <button class="btn btn-primary" type="button">جستجو</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    `);
    
    $('body').append(modal);
    $('#quickSearchModal').modal('show');
}

// Global error handler
$(document).ajaxError(function(event, xhr, settings, thrownError) {
    console.error('AJAX Error:', thrownError);
    showNotification('خطا در ارتباط با سرور', 'error');
});

// Global success handler
$(document).ajaxSuccess(function(event, xhr, settings) {
    if (xhr.responseJSON && xhr.responseJSON.success) {
        // Component-specific success handling
        const url = settings.url;
        if (url.includes('ReceptionPatient')) {
            // Patient-related success
        } else if (url.includes('ReceptionService')) {
            // Service-related success
        } else if (url.includes('ReceptionInsurance')) {
            // Insurance-related success
        }
    }
});
</script>

<!-- Notification Styles -->
<style>
.notification {
    position: fixed;
    top: 20px;
    right: 20px;
    padding: 15px 20px;
    border-radius: 6px;
    color: #fff;
    font-weight: 500;
    z-index: 9999;
    transform: translateX(100%);
    transition: transform 0.3s ease;
}

.notification.show {
    transform: translateX(0);
}

.notification-success {
    background: #28a745;
}

.notification-error {
    background: #dc3545;
}

.notification-warning {
    background: #ffc107;
    color: #333;
}

.notification-info {
    background: #17a2b8;
}
</style>