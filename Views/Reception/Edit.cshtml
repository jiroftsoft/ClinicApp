@using ClinicApp.ViewModels
@model ClinicApp.ViewModels.ReceptionEditViewModel

@{
    ViewBag.Title = "ویرایش پذیرش";
    ViewBag.RequireDataTables = true;
    ViewBag.RequireSelect2 = true;
    ViewBag.RequireDatePicker = true;
    ViewBag.RequireFormValidation = true;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <!-- ✅ بخش ۱: ساختار کلی -->
            <h2 class="text-center mb-4">ویرایش پذیرش</h2>
            <p class="text-center text-muted mb-4">ویرایش اطلاعات پذیرش شماره @Model.ReceptionId</p>
            
            <!-- ✅ بخش ۲: طراحی بصری -->
            <div class="card shadow-sm">
                <div class="card-header bg-warning text-dark">
                    <h4 class="mb-0">
                        <i class="fas fa-user-edit me-2"></i>
                        فرم ویرایش پذیرش
                    </h4>
                </div>
                <div class="card-body">
                    @using (Html.BeginForm("Edit", "Reception", FormMethod.Post, new { id = "edit-reception-form", @class = "needs-validation", novalidate = "novalidate" }))
                    {
                        @Html.AntiForgeryToken()
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        
                        <!-- ✅ فیلد مخفی برای شناسه پذیرش -->
                        @Html.HiddenFor(model => model.ReceptionId)
                        
                        <!-- ✅ Progress Indicator -->
                        <div class="mb-4">
                            <div class="progress" style="height: 8px;">
                                <div class="progress-bar bg-warning" role="progressbar" id="form-progress" style="width: 100%"></div>
                            </div>
                            <small class="text-muted mt-1 d-block text-center">
                                <span id="progress-text">100% تکمیل شده</span>
                            </small>
                        </div>

                        <!-- ✅ بخش ۱: اطلاعات بیمار -->
                        <div class="form-section mb-4">
                            <div class="form-section-header">
                                <i class="fas fa-user text-primary me-2"></i>
                                <h5 class="mb-0">اطلاعات بیمار</h5>
                            </div>
                            <div class="form-section-body">
                                <div class="row g-3">
                                    <div class="col-md-6">
                                        <label for="PatientId" class="form-label">بیمار <span class="text-danger">*</span></label>
                                        @Html.DropDownListFor(model => model.PatientId, Model.PatientList, "انتخاب بیمار", new { @class = "form-select", id = "patientSelect" })
                                        @Html.ValidationMessageFor(model => model.PatientId, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-md-6">
                                        <label class="form-label">نام بیمار:</label>
                                        <p class="form-control-plaintext">@Model.PatientFullName</p>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- ✅ بخش ۲: اطلاعات پزشک -->
                        <div class="form-section mb-4">
                            <div class="form-section-header">
                                <i class="fas fa-user-md text-primary me-2"></i>
                                <h5 class="mb-0">اطلاعات پزشک</h5>
                            </div>
                            <div class="form-section-body">
                                <div class="row g-3">
                                    <div class="col-md-6">
                                        <label for="DoctorId" class="form-label">پزشک معالج <span class="text-danger">*</span></label>
                                        @Html.DropDownListFor(model => model.DoctorId, Model.DoctorList, "انتخاب پزشک", new { @class = "form-select", id = "doctorSelect" })
                                        @Html.ValidationMessageFor(model => model.DoctorId, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-md-6">
                                        <label class="form-label">نام پزشک:</label>
                                        <p class="form-control-plaintext">@Model.DoctorFullName</p>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- ✅ بخش ۳: اطلاعات پذیرش -->
                        <div class="form-section mb-4">
                            <div class="form-section-header">
                                <i class="fas fa-calendar text-primary me-2"></i>
                                <h5 class="mb-0">اطلاعات پذیرش</h5>
                            </div>
                            <div class="form-section-body">
                                <div class="row g-3">
                                    <div class="col-md-4">
                                        <label for="ReceptionDateShamsi" class="form-label">تاریخ پذیرش <span class="text-danger">*</span></label>
                                        @Html.TextBoxFor(model => model.ReceptionDateShamsi, new { @class = "form-control persian-datepicker", placeholder = "انتخاب تاریخ پذیرش", id = "receptionDateShamsi", value = "" })
                                        @Html.HiddenFor(model => model.ReceptionDate)
                                        @Html.ValidationMessageFor(model => model.ReceptionDateShamsi, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-md-4">
                                        <label for="Type" class="form-label">نوع پذیرش</label>
                                        @Html.DropDownListFor(model => model.Type, new SelectList(Enum.GetValues(typeof(ClinicApp.Models.Entities.ReceptionType)).Cast<ClinicApp.Models.Entities.ReceptionType>().Select(x => new { Value = (int)x, Text = x.ToString() }), "Value", "Text"), "انتخاب نوع", new { @class = "form-select" })
                                        @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-md-4">
                                        <label for="Priority" class="form-label">اولویت</label>
                                        @Html.DropDownListFor(model => model.Priority, new SelectList(Enum.GetValues(typeof(ClinicApp.Models.Entities.AppointmentPriority)).Cast<ClinicApp.Models.Entities.AppointmentPriority>().Select(x => new { Value = (int)x, Text = x.ToString() }), "Value", "Text"), "انتخاب اولویت", new { @class = "form-select" })
                                        @Html.ValidationMessageFor(model => model.Priority, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="row g-3 mt-2">
                                    <div class="col-md-6">
                                        <div class="form-check">
                                            @Html.CheckBoxFor(model => model.IsEmergency, new { @class = "form-check-input" })
                                            <label class="form-check-label" for="IsEmergency">
                                                پذیرش اورژانس
                                            </label>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-check">
                                            @Html.CheckBoxFor(model => model.IsOnlineReception, new { @class = "form-check-input" })
                                            <label class="form-check-label" for="IsOnlineReception">
                                                پذیرش آنلاین
                                            </label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- ✅ بخش ۴: اطلاعات خدمات -->
                        <div class="form-section mb-4">
                            <div class="form-section-header">
                                <i class="fas fa-stethoscope text-primary me-2"></i>
                                <h5 class="mb-0">خدمات ارائه شده</h5>
                            </div>
                            <div class="form-section-body">
                                <div class="row g-3">
                                    <div class="col-md-6">
                                        <label for="service-category" class="form-label">دسته‌بندی خدمات</label>
                                        <select id="service-category" class="form-select">
                                            <option value="">انتخاب دسته‌بندی</option>
                                        </select>
                                    </div>
                                    <div class="col-md-6">
                                        <label for="services" class="form-label">خدمات <span class="text-danger">*</span></label>
                                        <select id="services" class="form-select" multiple>
                                            <option value="">ابتدا دسته‌بندی را انتخاب کنید</option>
                                        </select>
                                        @Html.ValidationMessageFor(model => model.SelectedServiceIds, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="mt-3">
                                    <label class="form-label">خدمات انتخاب شده:</label>
                                    <div id="selected-services" class="border rounded p-2 min-height-50">
                                        <span class="text-muted">هیچ خدمتی انتخاب نشده است</span>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- ✅ بخش ۵: اطلاعات پرداخت -->
                        <div class="form-section mb-4">
                            <div class="form-section-header">
                                <i class="fas fa-money-bill-wave text-primary me-2"></i>
                                <h5 class="mb-0">اطلاعات پرداخت</h5>
                            </div>
                            <div class="form-section-body">
                                <div class="row g-3">
                                    <div class="col-md-4">
                                        <label for="TotalAmount" class="form-label">مجموع مبلغ <span class="text-danger">*</span></label>
                                        @Html.TextBoxFor(model => model.TotalAmount, new { @class = "form-control", type = "number", step = "1000", placeholder = "مبلغ به تومان" })
                                        @Html.ValidationMessageFor(model => model.TotalAmount, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-md-4">
                                        <label for="PaymentMethod" class="form-label">روش پرداخت <span class="text-danger">*</span></label>
                                        @Html.DropDownListFor(model => model.PaymentMethod, Model.PaymentMethodList, "انتخاب روش پرداخت", new { @class = "form-select", id = "paymentMethodSelect" })
                                        @Html.ValidationMessageFor(model => model.PaymentMethod, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-md-4">
                                        <label for="PosTransactionId" class="form-label">شناسه تراکنش POS</label>
                                        @Html.TextBoxFor(model => model.PosTransactionId, new { @class = "form-control", placeholder = "شناسه تراکنش" })
                                        @Html.ValidationMessageFor(model => model.PosTransactionId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="row g-3 mt-2">
                                    <div class="col-md-4">
                                        <label for="PaidAmount" class="form-label">مبلغ پرداخت شده</label>
                                        @Html.TextBoxFor(model => model.PaidAmount, new { @class = "form-control", type = "number", step = "1000", placeholder = "مبلغ پرداخت شده" })
                                        @Html.ValidationMessageFor(model => model.PaidAmount, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-md-4">
                                        <label for="InsuranceShare" class="form-label">سهم بیمه</label>
                                        @Html.TextBoxFor(model => model.InsuranceShare, new { @class = "form-control", type = "number", step = "1000", placeholder = "سهم بیمه" })
                                        @Html.ValidationMessageFor(model => model.InsuranceShare, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-md-4">
                                        <label for="PatientShare" class="form-label">سهم بیمار</label>
                                        @Html.TextBoxFor(model => model.PatientShare, new { @class = "form-control", type = "number", step = "1000", placeholder = "سهم بیمار" })
                                        @Html.ValidationMessageFor(model => model.PatientShare, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- ✅ بخش ۶: اطلاعات بیمه -->
                        <div class="form-section mb-4">
                            <div class="form-section-header">
                                <i class="fas fa-shield-alt text-primary me-2"></i>
                                <h5 class="mb-0">اطلاعات بیمه</h5>
                            </div>
                            <div class="form-section-body">
                                <div class="row g-3">
                                    <div class="col-md-6">
                                        <label for="PrimaryInsuranceId" class="form-label">بیمه اولیه</label>
                                        @Html.DropDownListFor(model => model.PrimaryInsuranceId, Model.InsuranceList, "انتخاب بیمه اولیه", new { @class = "form-select" })
                                        @Html.ValidationMessageFor(model => model.PrimaryInsuranceId, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-md-6">
                                        <label for="SecondaryInsuranceId" class="form-label">بیمه تکمیلی</label>
                                        @Html.DropDownListFor(model => model.SecondaryInsuranceId, Model.InsuranceList, "انتخاب بیمه تکمیلی", new { @class = "form-select" })
                                        @Html.ValidationMessageFor(model => model.SecondaryInsuranceId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- ✅ بخش ۷: یادداشت‌ها -->
                        <div class="form-section mb-4">
                            <div class="form-section-header">
                                <i class="fas fa-sticky-note text-primary me-2"></i>
                                <h5 class="mb-0">یادداشت‌ها</h5>
                            </div>
                            <div class="form-section-body">
                                <div class="row g-3">
                                    <div class="col-12">
                                        <label for="Notes" class="form-label">یادداشت‌ها</label>
                                        @Html.TextAreaFor(model => model.Notes, new { @class = "form-control", rows = 3, placeholder = "یادداشت‌های اضافی..." })
                                        @Html.ValidationMessageFor(model => model.Notes, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- ✅ بخش ۸: اطلاعات سیستم -->
                        <div class="form-section mb-4">
                            <div class="form-section-header">
                                <i class="fas fa-cog text-primary me-2"></i>
                                <h5 class="mb-0">اطلاعات سیستم</h5>
                            </div>
                            <div class="form-section-body">
                                <div class="row g-3">
                                    <div class="col-md-4">
                                        <label class="form-label fw-bold">تاریخ ایجاد:</label>
                                        <p class="form-control-plaintext">@Model.CreatedAt</p>
                                    </div>
                                    <div class="col-md-4">
                                        <label class="form-label fw-bold">آخرین ویرایش:</label>
                                        <p class="form-control-plaintext">@(Model.UpdatedAt?.ToString() ?? "هیچ‌گاه")</p>
                                    </div>
                                    <div class="col-md-4">
                                        <label for="Status" class="form-label">وضعیت پذیرش</label>
                                        @Html.DropDownListFor(model => model.Status, new SelectList(Enum.GetValues(typeof(ClinicApp.Models.Entities.ReceptionStatus)).Cast<ClinicApp.Models.Entities.ReceptionStatus>().Select(x => new { Value = (int)x, Text = x.ToString() }), "Value", "Text"), "انتخاب وضعیت", new { @class = "form-select" })
                                        @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- ✅ بخش ۹: دکمه‌ها -->
                        <div class="row mt-4">
                            <div class="col-12 text-center">
                                <button type="submit" id="submit-button" class="btn btn-warning me-2">
                                    <span id="submit-button-text">
                                        <i class="fa fa-save me-1"></i> ذخیره تغییرات
                                    </span>
                                    <span id="submit-button-spinner" class="spinner-border spinner-border-sm" style="display: none;"></span>
                                </button>
                                <a href="@Url.Action("Details", new { id = Model.ReceptionId })" class="btn btn-info me-2">
                                    <i class="fa fa-eye me-1"></i> مشاهده
                                </a>
                                <a href="@Url.Action("Index")" class="btn btn-secondary">
                                    <i class="fa fa-arrow-right me-1"></i> بازگشت
                                </a>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <link href="~/Content/css/reception-standards.css" rel="stylesheet" />
    
    <style>
        /* ✅ Persian DatePicker Styles */
        .persian-datepicker {
            direction: rtl;
            text-align: right;
        }
        
        /* ✅ Select2 Persian Support */
        .select2-container--default .select2-selection--single {
            height: 38px;
            border: 2px solid #e9ecef;
            border-radius: 10px;
        }
        
        .select2-container--default .select2-selection--single .select2-selection__rendered {
            line-height: 34px;
            padding-right: 12px;
            padding-left: 20px;
        }
        
        .select2-container--default .select2-selection--single .select2-selection__arrow {
            height: 36px;
            right: 8px;
        }
        
        .select2-dropdown {
            border: 2px solid #e9ecef;
            border-radius: 10px;
        }
        
        /* ✅ Form Section Styles */
        .form-section {
            border: 1px solid #e9ecef;
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 20px;
            background: #f8f9fa;
        }
        
        .form-section-header {
            display: flex;
            align-items: center;
            margin-bottom: 15px;
            padding-bottom: 10px;
            border-bottom: 2px solid #dee2e6;
        }
        
        .form-section-header h5 {
            color: #495057;
            font-weight: 600;
        }
        
        .form-section-body {
            padding: 10px 0;
        }
        
        /* ✅ Progress Bar Styles */
        .progress {
            border-radius: 10px;
            background-color: #e9ecef;
        }
        
        .progress-bar {
            border-radius: 10px;
            transition: width 0.6s ease;
        }
        
        /* ✅ Min Height for Selected Services */
        .min-height-50 {
            min-height: 50px;
        }
    </style>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    
    <script type="text/javascript">
        $(document).ready(function () {
            // ✅ مقداردهی اولیه Persian DatePicker
            initializePersianDatePickers();
            
            // ✅ مقداردهی اولیه Select2
            initializeSelect2();
            
            // ✅ بارگذاری اولیه داده‌ها
            loadServiceCategories();
            loadServices();

            // ✅ انتخاب دسته‌بندی خدمات
            $('#service-category').on('change', function () {
                var categoryId = $(this).val();
                if (categoryId) {
                    loadServicesByCategory(categoryId);
                } else {
                    $('#services').empty().append('<option value="">ابتدا دسته‌بندی را انتخاب کنید</option>');
                }
            });

            // ✅ انتخاب خدمات
            $('#services').on('change', function () {
                updateSelectedServices();
            });

            // ✅ ارسال فرم
            $('#edit-reception-form').on('submit', function (e) {
                e.preventDefault();
                
                // اعتبارسنجی
                if (!validateForm()) {
                    return;
                }

                // ارسال AJAX
                submitForm();
            });

            // ✅ توابع کمکی
            function loadServiceCategories() {
                $.ajax({
                    url: '@Url.Action("GetServiceCategories", "Reception")',
                    type: 'GET',
                    success: function (response) {
                        if (response.success) {
                            var select = $('#service-category');
                            select.empty().append('<option value="">انتخاب دسته‌بندی</option>');
                            $.each(response.data, function (index, category) {
                                select.append('<option value="' + category.id + '">' + category.name + '</option>');
                            });
                        }
                    }
                });
            }

            function loadServices() {
                // بارگذاری خدمات موجود
                var selectedServices = @Html.Raw(Json.Encode(Model.SelectedServiceIds));
                if (selectedServices && selectedServices.length > 0) {
                    // نمایش خدمات انتخاب شده
                    updateSelectedServices();
                }
            }

            function loadServicesByCategory(categoryId) {
                $.ajax({
                    url: '@Url.Action("GetServicesByCategory", "Reception")',
                    type: 'GET',
                    data: { categoryId: categoryId },
                    success: function (response) {
                        if (response.success) {
                            var select = $('#services');
                            select.empty();
                            $.each(response.data, function (index, service) {
                                select.append('<option value="' + service.id + '">' + service.name + ' - ' + service.price + ' تومان</option>');
                            });
                        }
                    }
                });
            }

            function updateSelectedServices() {
                var selected = $('#services').val();
                var selectedDiv = $('#selected-services');
                
                if (selected && selected.length > 0) {
                    var html = '';
                    $.each(selected, function (index, serviceId) {
                        var serviceText = $('#services option[value="' + serviceId + '"]').text();
                        html += '<span class="badge bg-primary me-1 mb-1">' + serviceText + '</span>';
                    });
                    selectedDiv.html(html);
                } else {
                    selectedDiv.html('<span class="text-muted">هیچ خدمتی انتخاب نشده است</span>');
                }
            }

            function validateForm() {
                var isValid = true;
                
                // اعتبارسنجی بیمار
                if (!$('#PatientId').val()) {
                    showError('لطفاً بیمار را انتخاب کنید');
                    isValid = false;
                }
                
                // اعتبارسنجی پزشک
                if (!$('#DoctorId').val()) {
                    showError('لطفاً پزشک را انتخاب کنید');
                    isValid = false;
                }
                
                // اعتبارسنجی تاریخ پذیرش
                if (!$('#ReceptionDateShamsi').val()) {
                    showError('لطفاً تاریخ پذیرش را وارد کنید');
                    isValid = false;
                }
                
                // اعتبارسنجی خدمات
                if (!$('#services').val() || $('#services').val().length === 0) {
                    showError('لطفاً حداقل یک خدمت انتخاب کنید');
                    isValid = false;
                }
                
                // اعتبارسنجی Persian DatePicker
                if (!validatePersianDates()) {
                    isValid = false;
                }
                
                return isValid;
            }
            
            // ✅ اعتبارسنجی تاریخ‌های فارسی
            function validatePersianDates() {
                var isValid = true;
                
                // اعتبارسنجی تاریخ پذیرش
                var receptionDate = $('#ReceptionDateShamsi').val();
                if (receptionDate && !isValidPersianDate(receptionDate)) {
                    showError('فرمت تاریخ پذیرش صحیح نیست');
                    isValid = false;
                }
                
                return isValid;
            }
            
            // ✅ بررسی صحت فرمت تاریخ فارسی
            function isValidPersianDate(persianDate) {
                if (!persianDate || persianDate.trim() === '') {
                    return true; // فیلد خالی مجاز است
                }
                
                var persianDatePattern = /^[۱۲۳۴۵۶۷۸۹۰]+[/][۱۲۳۴۵۶۷۸۹۰]+[/][۱۲۳۴۵۶۷۸۹۰]+$/;
                return persianDatePattern.test(persianDate);
            }

            function submitForm() {
                var formData = $('#edit-reception-form').serialize();
                
                $.ajax({
                    url: '@Url.Action("Edit", "Reception")',
                    type: 'POST',
                    data: formData,
                    beforeSend: function () {
                        $('#submit-button').prop('disabled', true);
                        $('#submit-button-text').hide();
                        $('#submit-button-spinner').show();
                    },
                    success: function (response) {
                        if (response.success) {
                            showSuccess('پذیرش با موفقیت ویرایش شد');
                            setTimeout(function () {
                                window.location.href = '@Url.Action("Details", new { id = Model.ReceptionId })';
                            }, 2000);
                        } else {
                            showError('خطا در ویرایش پذیرش: ' + response.message);
                        }
                    },
                    error: function () {
                        showError('خطا در ارتباط با سرور');
                    },
                    complete: function () {
                        $('#submit-button').prop('disabled', false);
                        $('#submit-button-text').show();
                        $('#submit-button-spinner').hide();
                    }
                });
            }

            function showSuccess(message) {
                toastr.success(message);
            }

            function showError(message) {
                toastr.error(message);
            }
            
            // ✅ مقداردهی اولیه Persian DatePicker
            function initializePersianDatePickers() {
                $('.persian-datepicker').each(function() {
                    var $this = $(this);
                    var currentValue = $this.val();
                    
                    // اگر مقدار اولیه مشکل‌ساز وجود دارد، آن را پاک کن
                    if (currentValue && currentValue.includes('۷۸۳')) {
                        $this.val('');
                    }
                    
                    $this.persianDatepicker({
                        format: 'YYYY/MM/DD',
                        initialValue: false,
                        autoClose: true,
                        calendar: {
                            persian: {
                                locale: 'fa',
                                showHint: true,
                                leapYearMode: 'algorithmic'
                            }
                        }
                    });
                    
                    // تنظیم مقدار اولیه صحیح
                    setTimeout(function() {
                        if (!$this.val() || $this.val().includes('۷۸۳')) {
                            $this.val('');
                        }
                    }, 100);
                });
                
                // ✅ Event delegation برای تغییر تاریخ
                $(document).on('change', '.persian-datepicker', function() {
                    convertPersianDateToGregorian($(this));
                });
                
                // ✅ Event delegation برای input events
                $(document).on('input blur', '.persian-datepicker', function() {
                    setTimeout(function() {
                        convertPersianDateToGregorian($(this));
                    }, 100);
                });
            }
            
            // ✅ تابع جداگانه برای تبدیل تاریخ
            function convertPersianDateToGregorian($element) {
                try {
                    var fieldId = $element.attr('id');
                    var persianDate = $element.val();
                    
                    if (persianDate && persianDate.trim() !== '') {
                        // بررسی فرمت تاریخ فارسی
                        var persianDatePattern = /^[۱۲۳۴۵۶۷۸۹۰]+[/][۱۲۳۴۵۶۷۸۹۰]+[/][۱۲۳۴۵۶۷۸۹۰]+$/;
                        
                        if (persianDatePattern.test(persianDate)) {
                            // تبدیل تاریخ شمسی به میلادی
                            var gregorianDate = persianDatepicker.parseDate(persianDate);
                            if (gregorianDate) {
                                var isoDate = gregorianDate.toISOString().split('T')[0];
                                
                                if (fieldId === 'receptionDateShamsi') {
                                    $('#ReceptionDate').val(isoDate);
                                }
                                
                                console.log('تاریخ تبدیل شد:', {
                                    fieldId: fieldId,
                                    persianDate: persianDate,
                                    gregorianDate: isoDate
                                });
                            } else {
                                console.warn('تاریخ شمسی قابل تبدیل نیست:', persianDate);
                            }
                        } else {
                            console.warn('فرمت تاریخ شمسی صحیح نیست:', persianDate);
                        }
                    }
                } catch (error) {
                    console.error('خطا در تبدیل تاریخ:', error);
                }
            }
            
            // ✅ مقداردهی اولیه Select2
            function initializeSelect2() {
                $('#patientSelect').select2({
                    placeholder: 'انتخاب بیمار',
                    allowClear: true,
                    width: '100%',
                    language: {
                        noResults: function() {
                            return "نتیجه‌ای یافت نشد";
                        },
                        searching: function() {
                            return "در حال جستجو...";
                        }
                    }
                });
                
                $('#doctorSelect').select2({
                    placeholder: 'انتخاب پزشک',
                    allowClear: true,
                    width: '100%',
                    language: {
                        noResults: function() {
                            return "نتیجه‌ای یافت نشد";
                        },
                        searching: function() {
                            return "در حال جستجو...";
                        }
                    }
                });
                
                $('#paymentMethodSelect').select2({
                    placeholder: 'انتخاب روش پرداخت',
                    allowClear: true,
                    width: '100%',
                    language: {
                        noResults: function() {
                            return "نتیجه‌ای یافت نشد";
                        },
                        searching: function() {
                            return "در حال جستجو...";
                        }
                    }
                });
            }

            // ✅ اعمال قوانین اعتبارسنجی
            $('#edit-reception-form').validate({
                rules: {
                    'PatientId': {
                        required: true
                    },
                    'DoctorId': {
                        required: true
                    },
                    'TotalAmount': {
                        required: true,
                        min: 0
                    },
                    'PaymentMethod': {
                        required: true
                    },
                    'ReceptionDateShamsi': {
                        required: true
                    }
                },
                messages: {
                    'PatientId': {
                        required: "لطفاً بیمار را انتخاب کنید"
                    },
                    'DoctorId': {
                        required: "لطفاً پزشک را انتخاب کنید"
                    },
                    'TotalAmount': {
                        required: "لطفاً مجموع مبلغ را وارد کنید",
                        min: "مبلغ نمی‌تواند منفی باشد"
                    },
                    'PaymentMethod': {
                        required: "لطفاً روش پرداخت را انتخاب کنید"
                    },
                    'ReceptionDateShamsi': {
                        required: "لطفاً تاریخ پذیرش را وارد کنید"
                    }
                }
            });
        });
    </script>
}
