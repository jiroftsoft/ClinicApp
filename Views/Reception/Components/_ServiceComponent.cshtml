@using ClinicApp.ViewModels.Reception

<!-- Service Selection Component - Medical Environment -->
<div class="service-component" id="serviceComponent">
    <div class="component-header">
        <h6 class="component-title">
            <i class="fas fa-stethoscope me-2"></i>
            انتخاب خدمات
        </h6>
        <div class="component-status" id="serviceStatus">
            <i class="fas fa-circle text-muted"></i>
            <span>آماده</span>
        </div>
    </div>

    <div class="component-content">
        <!-- Service Search -->
        <div class="service-search">
            <div class="search-container">
                <label for="serviceCodeSearch" class="form-label">
                    <i class="fas fa-search me-1"></i>
                    جستجوی خدمت
                </label>
                <div class="input-group">
                    <input type="text" 
                           id="serviceCodeSearch" 
                           class="form-control" 
                           placeholder="کد خدمت یا نام خدمت را وارد کنید"
                           autocomplete="off">
                    <button type="button" 
                            class="btn btn-primary" 
                            id="searchServiceBtn">
                        <i class="fas fa-search"></i>
                    </button>
                </div>
                <div class="search-feedback" id="serviceSearchFeedback"></div>
            </div>
        </div>

        <!-- Service Categories -->
        <div class="service-categories">
            <div class="form-group">
                <label class="form-label">
                    <i class="fas fa-list me-1"></i>
                    دسته‌بندی خدمات
                </label>
                <select id="serviceCategoryId" class="form-control">
                    <option value="">انتخاب دسته‌بندی...</option>
                </select>
            </div>
        </div>

        <!-- Services List -->
        <div class="services-list" id="servicesList">
            <div class="services-header">
                <h6 class="services-title">
                    <i class="fas fa-clipboard-list me-2"></i>
                    خدمات موجود
                </h6>
                <div class="services-count" id="servicesCount">
                    <span class="badge bg-info">0</span>
                </div>
            </div>
            <div class="services-grid" id="servicesGrid">
                <!-- Dynamic services will be loaded here -->
                <div class="no-services">
                    <i class="fas fa-info-circle"></i>
                    <p>ابتدا دسته‌بندی را انتخاب کنید</p>
                </div>
            </div>
        </div>

        <!-- Selected Services -->
        <div class="selected-services" id="selectedServices" style="display: none;">
            <div class="selected-header">
                <h6 class="selected-title">
                    <i class="fas fa-check-circle me-2"></i>
                    خدمات انتخاب شده
                </h6>
                <button type="button" class="btn btn-sm btn-outline-danger" id="clearSelectedBtn">
                    <i class="fas fa-trash me-1"></i>
                    پاک کردن همه
                </button>
            </div>
            <div class="selected-list" id="selectedList">
                <!-- Dynamic selected services will be loaded here -->
            </div>
        </div>

        <!-- Service Calculation Summary -->
        <div class="service-calculation" id="serviceCalculation" style="display: none;">
            <div class="calculation-card">
                <div class="calculation-header">
                    <h6 class="calculation-title">
                        <i class="fas fa-calculator me-2"></i>
                        محاسبه هزینه
                    </h6>
                </div>
                <div class="calculation-body">
                    <div class="calculation-row">
                        <span class="calculation-label">مجموع خدمات:</span>
                        <span class="calculation-value" id="totalServicesAmount">0 تومان</span>
                    </div>
                    <div class="calculation-row">
                        <span class="calculation-label">سهم بیمه:</span>
                        <span class="calculation-value" id="insuranceShare">0 تومان</span>
                    </div>
                    <div class="calculation-row total">
                        <span class="calculation-label">سهم بیمار:</span>
                        <span class="calculation-value" id="patientShare">0 تومان</span>
                    </div>
                </div>
                <div class="calculation-actions">
                    <button type="button" class="btn btn-primary" id="calculateInsuranceBtn">
                        <i class="fas fa-calculator me-1"></i>
                        محاسبه بیمه
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Service Component Styles -->
<style>
    .service-component {
        background: white;
        border: 1px solid #e9ecef;
        border-radius: 8px;
        overflow: hidden;
        margin-bottom: 1.5rem;
    }

    .component-header {
        background: #f8f9fa;
        padding: 1rem 1.5rem;
        border-bottom: 1px solid #e9ecef;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .component-title {
        margin: 0;
        font-weight: 600;
        color: #495057;
    }

    .component-status {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 0.9rem;
    }

    .component-content {
        padding: 1.5rem;
    }

    .service-search {
        margin-bottom: 1.5rem;
    }

    .search-container {
        max-width: 500px;
    }

    .form-label {
        font-weight: 600;
        color: #495057;
        margin-bottom: 0.5rem;
    }

    .input-group {
        position: relative;
    }

    .form-control {
        border: 1px solid #ced4da;
        border-radius: 6px;
        padding: 0.75rem;
        transition: all 0.3s ease;
    }

    .form-control:focus {
        border-color: #667eea;
        box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
    }

    .btn {
        border-radius: 6px;
        font-weight: 500;
        transition: all 0.3s ease;
    }

    .btn-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border: none;
    }

    .btn-primary:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
    }

    .search-feedback {
        margin-top: 0.5rem;
        font-size: 0.9rem;
    }

    .service-categories {
        margin-bottom: 1.5rem;
    }

    .services-list {
        margin-bottom: 1.5rem;
    }

    .services-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
    }

    .services-title {
        margin: 0;
        font-weight: 600;
        color: #495057;
    }

    .services-count {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .services-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 1rem;
        max-height: 400px;
        overflow-y: auto;
        border: 1px solid #e9ecef;
        border-radius: 8px;
        padding: 1rem;
    }

    .no-services {
        grid-column: 1 / -1;
        text-align: center;
        padding: 2rem;
        color: #6c757d;
    }

    .no-services i {
        font-size: 2rem;
        margin-bottom: 1rem;
        display: block;
    }

    .service-item {
        background: #f8f9fa;
        border: 1px solid #e9ecef;
        border-radius: 8px;
        padding: 1rem;
        transition: all 0.3s ease;
        cursor: pointer;
    }

    .service-item:hover {
        border-color: #667eea;
        box-shadow: 0 2px 8px rgba(102, 126, 234, 0.1);
        transform: translateY(-2px);
    }

    .service-item.selected {
        border-color: #28a745;
        background: #e8f5e8;
    }

    .service-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: 0.5rem;
    }

    .service-title {
        font-weight: 600;
        color: #212529;
        margin: 0;
        font-size: 0.9rem;
    }

    .service-code {
        background: #e9ecef;
        color: #6c757d;
        padding: 0.25rem 0.5rem;
        border-radius: 4px;
        font-size: 0.8rem;
        font-weight: 500;
    }

    .service-price {
        font-weight: 600;
        color: #28a745;
        font-size: 1.1rem;
    }

    .service-description {
        color: #6c757d;
        font-size: 0.8rem;
        margin-top: 0.5rem;
    }

    .service-actions {
        display: flex;
        gap: 0.5rem;
        margin-top: 0.75rem;
    }

    .selected-services {
        background: #e8f5e8;
        border: 1px solid #28a745;
        border-radius: 8px;
        padding: 1rem;
        margin-bottom: 1.5rem;
    }

    .selected-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
    }

    .selected-title {
        margin: 0;
        font-weight: 600;
        color: #28a745;
    }

    .selected-list {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .selected-item {
        background: white;
        border: 1px solid #28a745;
        border-radius: 6px;
        padding: 0.75rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .selected-item-info {
        flex: 1;
    }

    .selected-item-title {
        font-weight: 600;
        color: #212529;
        margin: 0;
        font-size: 0.9rem;
    }

    .selected-item-code {
        color: #6c757d;
        font-size: 0.8rem;
    }

    .selected-item-price {
        font-weight: 600;
        color: #28a745;
        margin-left: 1rem;
    }

    .selected-item-actions {
        display: flex;
        gap: 0.5rem;
        margin-left: 1rem;
    }

    .service-calculation {
        background: #f8f9fa;
        border: 1px solid #e9ecef;
        border-radius: 8px;
        padding: 1rem;
    }

    .calculation-card {
        background: white;
        border-radius: 6px;
        overflow: hidden;
    }

    .calculation-header {
        background: #e9ecef;
        padding: 0.75rem 1rem;
        border-bottom: 1px solid #dee2e6;
    }

    .calculation-title {
        margin: 0;
        font-weight: 600;
        color: #495057;
        font-size: 0.9rem;
    }

    .calculation-body {
        padding: 1rem;
    }

    .calculation-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.5rem 0;
        border-bottom: 1px solid #f8f9fa;
    }

    .calculation-row.total {
        border-top: 2px solid #28a745;
        border-bottom: none;
        font-weight: 600;
        color: #28a745;
        margin-top: 0.5rem;
        padding-top: 0.75rem;
    }

    .calculation-label {
        color: #6c757d;
        font-size: 0.9rem;
    }

    .calculation-value {
        font-weight: 600;
        color: #212529;
    }

    .calculation-actions {
        padding: 1rem;
        border-top: 1px solid #f8f9fa;
    }

    /* Medical Environment Specific */
    .service-component.medical-critical {
        border-left: 4px solid #dc3545;
    }

    .service-component.medical-critical .component-header {
        background: linear-gradient(135deg, #ffebee 0%, #ffcdd2 100%);
    }

    .service-component.medical-critical .component-title {
        color: #c62828;
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .services-grid {
            grid-template-columns: 1fr;
        }
        
        .selected-item {
            flex-direction: column;
            align-items: flex-start;
            gap: 0.5rem;
        }
        
        .selected-item-price {
            margin-left: 0;
        }
        
        .selected-item-actions {
            margin-left: 0;
            width: 100%;
            justify-content: flex-end;
        }
    }
</style>

<!-- Service Component JavaScript -->
<script>
    // Wait for jQuery to be available
    function waitForJQueryService() {
        if (typeof jQuery !== 'undefined' && typeof $ !== 'undefined') {
            $(document).ready(function() {
                initializeServiceComponent();
            });
        } else {
            setTimeout(waitForJQueryService, 50);
        }
    }
    
    // Start waiting for jQuery
    waitForJQueryService();

    function initializeServiceComponent() {
        console.log('🏥 Service Component Initialized');
        
        // Setup event handlers
        setupServiceSearch();
        setupServiceCategories();
        setupServiceSelection();
        setupServiceCalculation();
        
        // Listen for department selection
        $(document).on('departmentSelected', function(event, departmentId) {
            loadServiceCategories(departmentId);
        });
    }

    function setupServiceSearch() {
        // Service search input
        $('#serviceCodeSearch').on('input', function() {
            const value = $(this).val();
            if (value.length >= 2) {
                searchServices(value);
            } else {
                clearServiceSearch();
            }
        });

        // Search button
        $('#searchServiceBtn').on('click', function() {
            const searchTerm = $('#serviceCodeSearch').val();
            if (searchTerm) {
                searchServices(searchTerm);
            }
        });

        // Search on Enter key
        $('#serviceCodeSearch').on('keypress', function(e) {
            if (e.which === 13) {
                const searchTerm = $(this).val();
                if (searchTerm) {
                    searchServices(searchTerm);
                }
            }
        });
    }

    function setupServiceCategories() {
        $('#serviceCategoryId').on('change', function() {
            const categoryId = $(this).val();
            if (categoryId) {
                loadServicesByCategory(categoryId);
                updateComponentStatus('completed');
            } else {
                clearServicesList();
                updateComponentStatus('pending');
            }
        });
    }

    function setupServiceSelection() {
        // Clear selected services
        $('#clearSelectedBtn').on('click', function() {
            clearSelectedServices();
        });
    }

    function setupServiceCalculation() {
        // Calculate insurance
        $('#calculateInsuranceBtn').on('click', function() {
            calculateInsuranceShare();
        });
    }

    function loadServiceCategories(departmentId) {
        if (!departmentId) {
            console.warn('No department ID provided for service categories');
            return;
        }
        
        console.log('🏥 Loading service categories for department:', departmentId);
        
        $.ajax({
            url: '@Url.Action("GetServiceCategoriesByDepartment", "ReceptionService")',
            type: 'GET',
            data: { departmentId: departmentId },
            dataType: 'json',
            success: function(response) {
                if (response.success && response.data) {
                    populateServiceCategories(response.data);
                }
            },
            error: function() {
                console.error('Error loading service categories');
                showError('خطا در بارگذاری دسته‌بندی‌های خدمات');
            }
        });
    }

    function populateServiceCategories(categories) {
        const select = $('#serviceCategoryId');
        select.find('option:not(:first)').remove();
        
        categories.forEach(function(category) {
            const option = `<option value="${category.serviceCategoryId}">${category.title}</option>`;
            select.append(option);
        });
    }

    function loadServicesByCategory(categoryId) {
        console.log('🏥 Loading services for category:', categoryId);
        
        $.ajax({
            url: '@Url.Action("GetServicesByCategory", "ReceptionService")',
            type: 'GET',
            data: { categoryId: categoryId },
            dataType: 'json',
            success: function(response) {
                if (response.success && response.data) {
                    displayServices(response.data);
                }
            },
            error: function() {
                console.error('Error loading services');
                showError('خطا در بارگذاری خدمات');
            }
        });
    }

    function displayServices(services) {
        const servicesGrid = $('#servicesGrid');
        const servicesCount = $('#servicesCount');
        
        if (!services || services.length === 0) {
            servicesGrid.html(`
                <div class="no-services">
                    <i class="fas fa-info-circle"></i>
                    <p>هیچ خدمتی در این دسته‌بندی یافت نشد</p>
                </div>
            `);
            servicesCount.find('.badge').text('0');
            return;
        }
        
        let servicesHtml = '';
        services.forEach(function(service) {
            servicesHtml += `
                <div class="service-item" data-service-id="${service.serviceId}">
                    <div class="service-header">
                        <h6 class="service-title">${service.title}</h6>
                        <span class="service-code">${service.serviceCode}</span>
                    </div>
                    <div class="service-price">${formatPrice(service.price)}</div>
                    ${service.description ? `<div class="service-description">${service.description}</div>` : ''}
                    <div class="service-actions">
                        <button type="button" class="btn btn-sm btn-primary add-service-btn" data-service-id="${service.serviceId}">
                            <i class="fas fa-plus me-1"></i>
                            اضافه کردن
                        </button>
                    </div>
                </div>
            `;
        });
        
        servicesGrid.html(servicesHtml);
        servicesCount.find('.badge').text(services.length);
        
        // Setup add service buttons
        $('.add-service-btn').on('click', function() {
            const serviceId = $(this).data('service-id');
            addServiceToSelected(serviceId);
        });
    }

    function searchServices(searchTerm) {
        console.log('🔍 Searching services:', searchTerm);
        
        $.ajax({
            url: '@Url.Action("SearchServices", "ReceptionService")',
            type: 'GET',
            data: { searchTerm: searchTerm },
            dataType: 'json',
            success: function(response) {
                if (response.success && response.data) {
                    displayServices(response.data);
                }
            },
            error: function() {
                console.error('Error searching services');
                showError('خطا در جستجوی خدمات');
            }
        });
    }

    function clearServiceSearch() {
        const categoryId = $('#serviceCategoryId').val();
        if (categoryId) {
            loadServicesByCategory(categoryId);
        } else {
            clearServicesList();
        }
    }

    function clearServicesList() {
        $('#servicesGrid').html(`
            <div class="no-services">
                <i class="fas fa-info-circle"></i>
                <p>ابتدا دسته‌بندی را انتخاب کنید</p>
            </div>
        `);
        $('#servicesCount .badge').text('0');
    }

    function addServiceToSelected(serviceId) {
        // Find service data
        const serviceItem = $(`.service-item[data-service-id="${serviceId}"]`);
        if (serviceItem.length === 0) return;
        
        const serviceTitle = serviceItem.find('.service-title').text();
        const serviceCode = serviceItem.find('.service-code').text();
        const servicePrice = serviceItem.find('.service-price').text();
        
        // Check if already selected
        if ($(`#selectedList .selected-item[data-service-id="${serviceId}"]`).length > 0) {
            showError('این خدمت قبلاً انتخاب شده است');
            return;
        }
        
        // Add to selected list
        const selectedItem = `
            <div class="selected-item" data-service-id="${serviceId}">
                <div class="selected-item-info">
                    <h6 class="selected-item-title">${serviceTitle}</h6>
                    <div class="selected-item-code">${serviceCode}</div>
                </div>
                <div class="selected-item-price">${servicePrice}</div>
                <div class="selected-item-actions">
                    <button type="button" class="btn btn-sm btn-outline-danger remove-service-btn" data-service-id="${serviceId}">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            </div>
        `;
        
        $('#selectedList').append(selectedItem);
        $('#selectedServices').show();
        
        // Setup remove button
        $(`.remove-service-btn[data-service-id="${serviceId}"]`).on('click', function() {
            removeServiceFromSelected(serviceId);
        });
        
        // Update calculation
        updateServiceCalculation();
        
        showSuccess('خدمت اضافه شد');
    }

    function removeServiceFromSelected(serviceId) {
        $(`.selected-item[data-service-id="${serviceId}"]`).remove();
        
        // Hide selected services if empty
        if ($('#selectedList .selected-item').length === 0) {
            $('#selectedServices').hide();
        }
        
        // Update calculation
        updateServiceCalculation();
    }

    function clearSelectedServices() {
        $('#selectedList').empty();
        $('#selectedServices').hide();
        updateServiceCalculation();
    }

    function updateServiceCalculation() {
        const selectedItems = $('#selectedList .selected-item');
        if (selectedItems.length === 0) {
            $('#serviceCalculation').hide();
            return;
        }
        
        let totalAmount = 0;
        selectedItems.each(function() {
            const priceText = $(this).find('.selected-item-price').text();
            const price = parseFloat(priceText.replace(/[^\d]/g, '')) || 0;
            totalAmount += price;
        });
        
        $('#totalServicesAmount').text(formatPrice(totalAmount));
        $('#patientShare').text(formatPrice(totalAmount));
        $('#insuranceShare').text('0 تومان');
        
        $('#serviceCalculation').show();
    }

    function calculateInsuranceShare() {
        const patientId = window.PatientIdentityComponent?.getPatientId();
        if (!patientId) {
            showError('ابتدا بیمار را انتخاب کنید');
            return;
        }
        
        const selectedServices = getSelectedServices();
        if (selectedServices.length === 0) {
            showError('هیچ خدمتی انتخاب نشده است');
            return;
        }
        
        console.log('🧮 Calculating insurance share for services:', selectedServices);
        
        $.ajax({
            url: '@Url.Action("CalculateInsuranceShare", "ReceptionService")',
            type: 'POST',
            data: { 
                patientId: patientId,
                serviceIds: selectedServices.map(s => s.serviceId)
            },
            dataType: 'json',
            success: function(response) {
                if (response.success && response.data) {
                    displayInsuranceCalculation(response.data);
                } else {
                    showError('خطا در محاسبه سهم بیمه');
                }
            },
            error: function() {
                showError('خطا در محاسبه سهم بیمه');
            }
        });
    }

    function displayInsuranceCalculation(calculation) {
        $('#insuranceShare').text(formatPrice(calculation.insuranceShare));
        $('#patientShare').text(formatPrice(calculation.patientShare));
        
        showSuccess('محاسبه سهم بیمه انجام شد');
    }

    function getSelectedServices() {
        const selectedItems = $('#selectedList .selected-item');
        const services = [];
        
        selectedItems.each(function() {
            const serviceId = $(this).data('service-id');
            const title = $(this).find('.selected-item-title').text();
            const code = $(this).find('.selected-item-code').text();
            const priceText = $(this).find('.selected-item-price').text();
            const price = parseFloat(priceText.replace(/[^\d]/g, '')) || 0;
            
            services.push({
                serviceId: serviceId,
                title: title,
                code: code,
                price: price
            });
        });
        
        return services;
    }

    function formatPrice(price) {
        return new Intl.NumberFormat('fa-IR').format(price) + ' تومان';
    }

    function updateComponentStatus(status) {
        const statusElement = $('#serviceStatus');
        const statusIcon = statusElement.find('i');
        const statusText = statusElement.find('span');
        
        statusElement.removeClass('text-muted text-success text-warning text-danger');
        statusIcon.removeClass('fa-circle fa-check fa-exclamation fa-times');
        
        switch (status) {
            case 'completed':
                statusElement.addClass('text-success');
                statusIcon.addClass('fa-check');
                statusText.text('تکمیل شده');
                break;
            case 'error':
                statusElement.addClass('text-danger');
                statusIcon.addClass('fa-times');
                statusText.text('خطا');
                break;
            case 'warning':
                statusElement.addClass('text-warning');
                statusIcon.addClass('fa-exclamation');
                statusText.text('هشدار');
                break;
            default:
                statusElement.addClass('text-muted');
                statusIcon.addClass('fa-circle');
                statusText.text('آماده');
        }
    }

    function showError(message) {
        console.error('❌ Error:', message);
        // You can implement a toast notification here
    }

    function showSuccess(message) {
        console.log('✅ Success:', message);
        // You can implement a toast notification here
    }

    // Public API for external components
    window.ServiceComponent = {
        getSelectedServices: function() {
            return getSelectedServices();
        },
        clearSelectedServices: function() {
            clearSelectedServices();
        },
        addService: function(serviceId) {
            addServiceToSelected(serviceId);
        },
        removeService: function(serviceId) {
            removeServiceFromSelected(serviceId);
        }
    };
</script>
