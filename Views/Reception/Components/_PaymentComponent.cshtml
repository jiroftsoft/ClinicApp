@using ClinicApp.ViewModels.Reception

<!-- Payment Component - Medical Environment -->
<div class="payment-component" id="paymentComponent">
    <div class="component-header">
        <h6 class="component-title">
            <i class="fas fa-credit-card me-2"></i>
            پرداخت
        </h6>
        <div class="component-status" id="paymentStatus">
            <i class="fas fa-circle text-muted"></i>
            <span>آماده</span>
        </div>
    </div>

    <div class="component-content">
        <!-- Payment Summary -->
        <div class="payment-summary" id="paymentSummary">
            <div class="summary-card">
                <div class="summary-header">
                    <h6 class="summary-title">
                        <i class="fas fa-calculator me-2"></i>
                        خلاصه پرداخت
                    </h6>
                </div>
                <div class="summary-body">
                    <div class="summary-row">
                        <span class="summary-label">مجموع خدمات:</span>
                        <span class="summary-value" id="totalServicesAmount">0 تومان</span>
                    </div>
                    <div class="summary-row">
                        <span class="summary-label">سهم بیمه:</span>
                        <span class="summary-value" id="insuranceShare">0 تومان</span>
                    </div>
                    <div class="summary-row total">
                        <span class="summary-label">سهم بیمار:</span>
                        <span class="summary-value" id="patientShare">0 تومان</span>
                    </div>
                    <div class="summary-row">
                        <span class="summary-label">پرداخت شده:</span>
                        <span class="summary-value" id="paidAmount">0 تومان</span>
                    </div>
                    <div class="summary-row remaining">
                        <span class="summary-label">باقی‌مانده:</span>
                        <span class="summary-value" id="remainingAmount">0 تومان</span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Payment Methods -->
        <div class="payment-methods">
            <div class="methods-header">
                <h6 class="methods-title">
                    <i class="fas fa-credit-card me-2"></i>
                    روش‌های پرداخت
                </h6>
            </div>
            <div class="methods-grid">
                <div class="method-card" data-method="cash">
                    <div class="method-icon">
                        <i class="fas fa-money-bill-wave"></i>
                    </div>
                    <div class="method-title">نقدی</div>
                    <div class="method-description">پرداخت نقدی</div>
                </div>
                <div class="method-card" data-method="pos">
                    <div class="method-icon">
                        <i class="fas fa-credit-card"></i>
                    </div>
                    <div class="method-title">کارتخوان</div>
                    <div class="method-description">پرداخت با کارت</div>
                </div>
                <div class="method-card" data-method="bank_transfer">
                    <div class="method-icon">
                        <i class="fas fa-university"></i>
                    </div>
                    <div class="method-title">حواله</div>
                    <div class="method-description">حواله بانکی</div>
                </div>
            </div>
        </div>

        <!-- Payment Form -->
        <div class="payment-form" id="paymentForm" style="display: none;">
            <div class="form-header">
                <h6 class="form-title" id="paymentFormTitle">
                    <i class="fas fa-credit-card me-2"></i>
                    پرداخت
                </h6>
                <button type="button" class="btn btn-sm btn-outline-secondary" id="cancelPaymentBtn">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="form-body">
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="form-label">مبلغ پرداخت</label>
                            <input type="number" id="paymentAmount" class="form-control" placeholder="مبلغ را وارد کنید" min="0" step="1000">
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="form-label">شماره مرجع</label>
                            <input type="text" id="paymentReference" class="form-control" placeholder="شماره مرجع (اختیاری)">
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <label class="form-label">توضیحات</label>
                    <textarea id="paymentNotes" class="form-control" rows="3" placeholder="توضیحات پرداخت (اختیاری)"></textarea>
                </div>
                <div class="form-actions">
                    <button type="button" class="btn btn-primary" id="processPaymentBtn">
                        <i class="fas fa-check me-1"></i>
                        پردازش پرداخت
                    </button>
                    <button type="button" class="btn btn-outline-secondary" id="cancelPaymentFormBtn">
                        <i class="fas fa-times me-1"></i>
                        لغو
                    </button>
                </div>
            </div>
        </div>

        <!-- Payment History -->
        <div class="payment-history" id="paymentHistory" style="display: none;">
            <div class="history-header">
                <h6 class="history-title">
                    <i class="fas fa-history me-2"></i>
                    تاریخچه پرداخت‌ها
                </h6>
            </div>
            <div class="history-list" id="historyList">
                <!-- Dynamic payment history will be loaded here -->
            </div>
        </div>

        <!-- Payment Actions -->
        <div class="payment-actions">
            <div class="row">
                <div class="col-md-4">
                    <button type="button" class="btn btn-outline-primary w-100" id="refreshPaymentBtn">
                        <i class="fas fa-sync me-1"></i>
                        بروزرسانی
                    </button>
                </div>
                <div class="col-md-4">
                    <button type="button" class="btn btn-outline-info w-100" id="viewHistoryBtn">
                        <i class="fas fa-history me-1"></i>
                        تاریخچه
                    </button>
                </div>
                <div class="col-md-4">
                    <button type="button" class="btn btn-outline-success w-100" id="completeReceptionBtn">
                        <i class="fas fa-check-circle me-1"></i>
                        تکمیل پذیرش
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Payment Component Styles -->
<style>
    .payment-component {
        background: white;
        border: 1px solid #e9ecef;
        border-radius: 8px;
        overflow: hidden;
        margin-bottom: 1.5rem;
    }

    .component-header {
        background: #f8f9fa;
        padding: 1rem 1.5rem;
        border-bottom: 1px solid #e9ecef;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .component-title {
        margin: 0;
        font-weight: 600;
        color: #495057;
    }

    .component-status {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 0.9rem;
    }

    .component-content {
        padding: 1.5rem;
    }

    .payment-summary {
        margin-bottom: 1.5rem;
    }

    .summary-card {
        background: #f8f9fa;
        border: 1px solid #e9ecef;
        border-radius: 8px;
        overflow: hidden;
    }

    .summary-header {
        background: #e9ecef;
        padding: 0.75rem 1rem;
        border-bottom: 1px solid #dee2e6;
    }

    .summary-title {
        margin: 0;
        font-weight: 600;
        color: #495057;
        font-size: 0.9rem;
    }

    .summary-body {
        padding: 1rem;
    }

    .summary-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.5rem 0;
        border-bottom: 1px solid #f8f9fa;
    }

    .summary-row.total {
        border-top: 2px solid #28a745;
        border-bottom: none;
        font-weight: 600;
        color: #28a745;
        margin-top: 0.5rem;
        padding-top: 0.75rem;
    }

    .summary-row.remaining {
        border-top: 2px solid #dc3545;
        border-bottom: none;
        font-weight: 600;
        color: #dc3545;
        margin-top: 0.5rem;
        padding-top: 0.75rem;
    }

    .summary-label {
        color: #6c757d;
        font-size: 0.9rem;
    }

    .summary-value {
        font-weight: 600;
        color: #212529;
    }

    .payment-methods {
        margin-bottom: 1.5rem;
    }

    .methods-header {
        margin-bottom: 1rem;
    }

    .methods-title {
        margin: 0;
        font-weight: 600;
        color: #495057;
    }

    .methods-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        gap: 1rem;
    }

    .method-card {
        background: #f8f9fa;
        border: 2px solid #e9ecef;
        border-radius: 8px;
        padding: 1rem;
        text-align: center;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .method-card:hover {
        border-color: #667eea;
        box-shadow: 0 2px 8px rgba(102, 126, 234, 0.1);
        transform: translateY(-2px);
    }

    .method-card.selected {
        border-color: #28a745;
        background: #e8f5e8;
    }

    .method-icon {
        font-size: 2rem;
        color: #6c757d;
        margin-bottom: 0.5rem;
    }

    .method-card.selected .method-icon {
        color: #28a745;
    }

    .method-title {
        font-weight: 600;
        color: #212529;
        margin-bottom: 0.25rem;
    }

    .method-description {
        font-size: 0.8rem;
        color: #6c757d;
    }

    .payment-form {
        background: #f8f9fa;
        border: 1px solid #e9ecef;
        border-radius: 8px;
        padding: 1rem;
        margin-bottom: 1.5rem;
    }

    .form-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
    }

    .form-title {
        margin: 0;
        font-weight: 600;
        color: #495057;
    }

    .form-body {
        background: white;
        border-radius: 6px;
        padding: 1rem;
    }

    .form-group {
        margin-bottom: 1rem;
    }

    .form-label {
        font-weight: 600;
        color: #495057;
        margin-bottom: 0.5rem;
    }

    .form-control {
        border: 1px solid #ced4da;
        border-radius: 6px;
        padding: 0.75rem;
        transition: all 0.3s ease;
    }

    .form-control:focus {
        border-color: #667eea;
        box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
    }

    .form-actions {
        display: flex;
        gap: 0.5rem;
        margin-top: 1rem;
    }

    .payment-history {
        background: #f8f9fa;
        border: 1px solid #e9ecef;
        border-radius: 8px;
        padding: 1rem;
        margin-bottom: 1.5rem;
    }

    .history-header {
        margin-bottom: 1rem;
    }

    .history-title {
        margin: 0;
        font-weight: 600;
        color: #495057;
    }

    .history-list {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .history-item {
        background: white;
        border: 1px solid #e9ecef;
        border-radius: 6px;
        padding: 0.75rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .history-item-info {
        flex: 1;
    }

    .history-item-amount {
        font-weight: 600;
        color: #28a745;
        margin-left: 1rem;
    }

    .history-item-date {
        font-size: 0.8rem;
        color: #6c757d;
    }

    .payment-actions {
        margin-top: 1.5rem;
        padding-top: 1rem;
        border-top: 1px solid #e9ecef;
    }

    .btn {
        border-radius: 6px;
        font-weight: 500;
        transition: all 0.3s ease;
    }

    .btn-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border: none;
    }

    .btn-success {
        background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
        border: none;
    }

    /* Medical Environment Specific */
    .payment-component.medical-critical {
        border-left: 4px solid #dc3545;
    }

    .payment-component.medical-critical .component-header {
        background: linear-gradient(135deg, #ffebee 0%, #ffcdd2 100%);
    }

    .payment-component.medical-critical .component-title {
        color: #c62828;
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .methods-grid {
            grid-template-columns: 1fr;
        }
        
        .form-actions {
            flex-direction: column;
        }
        
        .payment-actions .row {
            flex-direction: column;
        }
        
        .payment-actions .col-md-4 {
            margin-bottom: 0.5rem;
        }
    }
</style>

<!-- Payment Component JavaScript -->
<script>
    // Wait for jQuery to be available
    function waitForJQueryPayment() {
        if (typeof jQuery !== 'undefined' && typeof $ !== 'undefined') {
            $(document).ready(function() {
                initializePaymentComponent();
            });
        } else {
            setTimeout(waitForJQueryPayment, 50);
        }
    }
    
    // Start waiting for jQuery
    waitForJQueryPayment();

    function initializePaymentComponent() {
        console.log('🏥 Payment Component Initialized');
        
        // Setup event handlers
        setupPaymentMethods();
        setupPaymentForm();
        setupPaymentActions();
        
        // Listen for service selection changes
        $(document).on('servicesUpdated', function(event, services) {
            updatePaymentSummary(services);
        });
    }

    function setupPaymentMethods() {
        $('.method-card').on('click', function() {
            const method = $(this).data('method');
            selectPaymentMethod(method);
        });
    }

    function setupPaymentForm() {
        // Cancel payment buttons
        $('#cancelPaymentBtn, #cancelPaymentFormBtn').on('click', function() {
            hidePaymentForm();
        });

        // Process payment
        $('#processPaymentBtn').on('click', function() {
            processPayment();
        });

        // Payment amount input
        $('#paymentAmount').on('input', function() {
            const amount = parseFloat($(this).val()) || 0;
            const remaining = parseFloat($('#remainingAmount').text().replace(/[^\d]/g, '')) || 0;
            
            if (amount > remaining) {
                $(this).addClass('is-invalid');
                showError('مبلغ پرداخت نمی‌تواند بیش از مبلغ باقی‌مانده باشد');
            } else {
                $(this).removeClass('is-invalid');
            }
        });
    }

    function setupPaymentActions() {
        // Refresh payment
        $('#refreshPaymentBtn').on('click', function() {
            refreshPaymentData();
        });

        // View history
        $('#viewHistoryBtn').on('click', function() {
            togglePaymentHistory();
        });

        // Complete reception
        $('#completeReceptionBtn').on('click', function() {
            completeReception();
        });
    }

    function selectPaymentMethod(method) {
        // Remove previous selection
        $('.method-card').removeClass('selected');
        
        // Add selection to clicked card
        $(`.method-card[data-method="${method}"]`).addClass('selected');
        
        // Show payment form
        showPaymentForm(method);
        
        console.log('💳 Payment method selected:', method);
    }

    function showPaymentForm(method) {
        const formTitle = $('#paymentFormTitle');
        const formIcon = formTitle.find('i');
        
        // Update form title based on method
        switch (method) {
            case 'cash':
                formTitle.html('<i class="fas fa-money-bill-wave me-2"></i>پرداخت نقدی');
                break;
            case 'pos':
                formTitle.html('<i class="fas fa-credit-card me-2"></i>پرداخت با کارتخوان');
                break;
            case 'bank_transfer':
                formTitle.html('<i class="fas fa-university me-2"></i>حواله بانکی');
                break;
        }
        
        // Set default amount to remaining amount
        const remainingAmount = parseFloat($('#remainingAmount').text().replace(/[^\d]/g, '')) || 0;
        $('#paymentAmount').val(remainingAmount);
        
        // Show form
        $('#paymentForm').show();
        
        // Focus on amount input
        $('#paymentAmount').focus();
    }

    function hidePaymentForm() {
        $('#paymentForm').hide();
        $('.method-card').removeClass('selected');
    }

    function processPayment() {
        const method = $('.method-card.selected').data('method');
        const amount = parseFloat($('#paymentAmount').val()) || 0;
        const reference = $('#paymentReference').val();
        const notes = $('#paymentNotes').val();
        
        if (!method) {
            showError('ابتدا روش پرداخت را انتخاب کنید');
            return;
        }
        
        if (amount <= 0) {
            showError('مبلغ پرداخت باید بزرگتر از صفر باشد');
            return;
        }
        
        const remainingAmount = parseFloat($('#remainingAmount').text().replace(/[^\d]/g, '')) || 0;
        if (amount > remainingAmount) {
            showError('مبلغ پرداخت نمی‌تواند بیش از مبلغ باقی‌مانده باشد');
            return;
        }
        
        console.log('💳 Processing payment:', { method, amount, reference, notes });
        
        // Show loading state
        $('#processPaymentBtn').prop('disabled', true).html('<i class="fas fa-spinner fa-spin me-1"></i>در حال پردازش...');
        
        // Process payment based on method
        switch (method) {
            case 'cash':
                processCashPayment(amount, reference, notes);
                break;
            case 'pos':
                processPosPayment(amount, reference, notes);
                break;
            case 'bank_transfer':
                processBankTransferPayment(amount, reference, notes);
                break;
        }
    }

    function processCashPayment(amount, reference, notes) {
        // Simulate cash payment processing
        setTimeout(() => {
            addPaymentToHistory({
                method: 'نقدی',
                amount: amount,
                reference: reference,
                notes: notes,
                date: new Date(),
                status: 'موفق'
            });
            
            updatePaymentSummary();
            hidePaymentForm();
            showSuccess('پرداخت نقدی با موفقیت انجام شد');
            
            $('#processPaymentBtn').prop('disabled', false).html('<i class="fas fa-check me-1"></i>پردازش پرداخت');
        }, 1000);
    }

    function processPosPayment(amount, reference, notes) {
        // Simulate POS payment processing
        setTimeout(() => {
            addPaymentToHistory({
                method: 'کارتخوان',
                amount: amount,
                reference: reference || generateReferenceNumber(),
                notes: notes,
                date: new Date(),
                status: 'موفق'
            });
            
            updatePaymentSummary();
            hidePaymentForm();
            showSuccess('پرداخت با کارتخوان با موفقیت انجام شد');
            
            $('#processPaymentBtn').prop('disabled', false).html('<i class="fas fa-check me-1"></i>پردازش پرداخت');
        }, 2000);
    }

    function processBankTransferPayment(amount, reference, notes) {
        if (!reference) {
            showError('شماره مرجع برای حواله بانکی الزامی است');
            $('#processPaymentBtn').prop('disabled', false).html('<i class="fas fa-check me-1"></i>پردازش پرداخت');
            return;
        }
        
        // Simulate bank transfer payment processing
        setTimeout(() => {
            addPaymentToHistory({
                method: 'حواله بانکی',
                amount: amount,
                reference: reference,
                notes: notes,
                date: new Date(),
                status: 'موفق'
            });
            
            updatePaymentSummary();
            hidePaymentForm();
            showSuccess('حواله بانکی با موفقیت انجام شد');
            
            $('#processPaymentBtn').prop('disabled', false).html('<i class="fas fa-check me-1"></i>پردازش پرداخت');
        }, 1500);
    }

    function addPaymentToHistory(payment) {
        const historyList = $('#historyList');
        const historyItem = `
            <div class="history-item">
                <div class="history-item-info">
                    <div class="history-item-method">${payment.method}</div>
                    <div class="history-item-date">${formatDate(payment.date)}</div>
                    ${payment.reference ? `<div class="history-item-reference">شماره مرجع: ${payment.reference}</div>` : ''}
                </div>
                <div class="history-item-amount">${formatPrice(payment.amount)}</div>
            </div>
        `;
        
        historyList.prepend(historyItem);
        $('#paymentHistory').show();
    }

    function updatePaymentSummary(services = null) {
        // Get services from ServiceComponent if not provided
        if (!services && window.ServiceComponent) {
            services = window.ServiceComponent.getSelectedServices();
        }
        
        let totalAmount = 0;
        if (services && services.length > 0) {
            totalAmount = services.reduce((sum, service) => sum + service.price, 0);
        }
        
        // Get insurance share (this would come from insurance calculation)
        const insuranceShare = 0; // This should be calculated from insurance
        const patientShare = totalAmount - insuranceShare;
        
        // Get paid amount from payment history
        const paidAmount = getPaidAmount();
        const remainingAmount = Math.max(0, patientShare - paidAmount);
        
        // Update summary
        $('#totalServicesAmount').text(formatPrice(totalAmount));
        $('#insuranceShare').text(formatPrice(insuranceShare));
        $('#patientShare').text(formatPrice(patientShare));
        $('#paidAmount').text(formatPrice(paidAmount));
        $('#remainingAmount').text(formatPrice(remainingAmount));
        
        // Update component status
        if (remainingAmount <= 0) {
            updateComponentStatus('completed');
        } else {
            updateComponentStatus('pending');
        }
    }

    function getPaidAmount() {
        let totalPaid = 0;
        $('#historyList .history-item').each(function() {
            const amountText = $(this).find('.history-item-amount').text();
            const amount = parseFloat(amountText.replace(/[^\d]/g, '')) || 0;
            totalPaid += amount;
        });
        return totalPaid;
    }

    function refreshPaymentData() {
        updatePaymentSummary();
        showSuccess('اطلاعات پرداخت بروزرسانی شد');
    }

    function togglePaymentHistory() {
        const history = $('#paymentHistory');
        if (history.is(':visible')) {
            history.hide();
        } else {
            history.show();
        }
    }

    function completeReception() {
        const remainingAmount = parseFloat($('#remainingAmount').text().replace(/[^\d]/g, '')) || 0;
        
        if (remainingAmount > 0) {
            showError('ابتدا مبلغ باقی‌مانده را پرداخت کنید');
            return;
        }
        
        console.log('✅ Completing reception...');
        
        // Here you would call the API to complete the reception
        showSuccess('پذیرش با موفقیت تکمیل شد');
        updateComponentStatus('completed');
    }

    function generateReferenceNumber() {
        return 'REF' + Date.now().toString().slice(-8);
    }

    function formatPrice(price) {
        return new Intl.NumberFormat('fa-IR').format(price) + ' تومان';
    }

    function formatDate(date) {
        return new Intl.DateTimeFormat('fa-IR', {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        }).format(date);
    }

    function updateComponentStatus(status) {
        const statusElement = $('#paymentStatus');
        const statusIcon = statusElement.find('i');
        const statusText = statusElement.find('span');
        
        statusElement.removeClass('text-muted text-success text-warning text-danger');
        statusIcon.removeClass('fa-circle fa-check fa-exclamation fa-times');
        
        switch (status) {
            case 'completed':
                statusElement.addClass('text-success');
                statusIcon.addClass('fa-check');
                statusText.text('تکمیل شده');
                break;
            case 'error':
                statusElement.addClass('text-danger');
                statusIcon.addClass('fa-times');
                statusText.text('خطا');
                break;
            case 'warning':
                statusElement.addClass('text-warning');
                statusIcon.addClass('fa-exclamation');
                statusText.text('هشدار');
                break;
            default:
                statusElement.addClass('text-muted');
                statusIcon.addClass('fa-circle');
                statusText.text('آماده');
        }
    }

    function showError(message) {
        console.error('❌ Error:', message);
        // You can implement a toast notification here
    }

    function showSuccess(message) {
        console.log('✅ Success:', message);
        // You can implement a toast notification here
    }

    // Public API for external components
    window.PaymentComponent = {
        updatePaymentSummary: function(services) {
            updatePaymentSummary(services);
        },
        getPaymentSummary: function() {
            return {
                totalAmount: parseFloat($('#totalServicesAmount').text().replace(/[^\d]/g, '')) || 0,
                insuranceShare: parseFloat($('#insuranceShare').text().replace(/[^\d]/g, '')) || 0,
                patientShare: parseFloat($('#patientShare').text().replace(/[^\d]/g, '')) || 0,
                paidAmount: parseFloat($('#paidAmount').text().replace(/[^\d]/g, '')) || 0,
                remainingAmount: parseFloat($('#remainingAmount').text().replace(/[^\d]/g, '')) || 0
            };
        }
    };
</script>
