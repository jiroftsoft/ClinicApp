@using ClinicApp.ViewModels.Reception
@model ReceptionFormComponentViewModel

<!-- Medical Reception Form - Component-Based Design -->
<div class="medical-reception-form" id="receptionFormContainer">
    
    <!-- Form Header -->
    <div class="form-header">
        <div class="form-title">
            <i class="fas fa-clipboard-list text-primary me-2"></i>
            <h4 class="mb-0">فرم پذیرش بیمار</h4>
        </div>
        <div class="form-status">
            <span class="status-indicator" id="formStatusIndicator">
                <i class="fas fa-circle text-muted"></i>
                آماده
            </span>
        </div>
    </div>

    <!-- Component 1: Patient Identity -->
    @Html.Partial("Components/_PatientIdentityComponent")

    <!-- Component 2: Insurance Information -->
    @Html.Partial("Components/_InsuranceComponent")

    <!-- Component 3: Department & Doctor -->
    @Html.Partial("Components/_DepartmentComponent")

    <!-- Component 4: Service Selection -->
    @Html.Partial("Components/_ServiceComponent")

    <!-- Component 5: Payment -->
    @Html.Partial("Components/_PaymentComponent")

    <!-- Component 6: Reception Information -->
    @Html.Partial("Components/_ReceptionInfoComponent")

    <!-- Main Reception Form -->
    <form id="receptionForm" class="reception-form" method="post" action="@Url.Action("CreateReception", "ReceptionCore")">
        @Html.AntiForgeryToken()
        
        <!-- Hidden Fields -->
        <input type="hidden" id="patientId" name="PatientId" value="">
        <input type="hidden" id="receptionDateTime" name="ReceptionDateTime" value="">
        
        <!-- Form Sections -->
        <div class="form-sections">
                
            <!-- Section 3: Reception Information -->
            <div class="form-section" id="receptionInfoSection">
                <div class="section-header">
                    <h6 class="section-title">
                        <i class="fas fa-calendar-alt me-2"></i>
                        اطلاعات پذیرش
                    </h6>
                    <span class="section-status" id="receptionInfoStatus">
                        <i class="fas fa-circle text-muted"></i>
                    </span>
                </div>
                <div class="section-content">
                    <div class="row">
                        <div class="col-md-4">
                <div class="form-group">
                                <label class="form-label">تاریخ پذیرش</label>
                                <input type="text" id="receptionDate" name="ReceptionDate" class="form-control" readonly>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                <label class="form-label">ساعت پذیرش</label>
                                <input type="text" id="receptionTime" name="ReceptionTime" class="form-control" readonly>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                <label class="form-label">نوع پذیرش</label>
                                <select id="receptionType" name="ReceptionType" class="form-control">
                                    <option value="1">عادی</option>
                                    <option value="2">اورژانس</option>
                                    <option value="3">ویژه</option>
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Section 4: Department & Doctor -->
            <div class="form-section" id="departmentSection">
                <div class="section-header">
                    <h6 class="section-title">
                        <i class="fas fa-hospital me-2"></i>
                        دپارتمان و پزشک
                    </h6>
                    <span class="section-status" id="departmentStatus">
                        <i class="fas fa-circle text-muted"></i>
                    </span>
                </div>
                <div class="section-content">
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                                <label class="form-label">دپارتمان</label>
                                <select id="departmentId" name="DepartmentId" class="form-control">
                                    <option value="">انتخاب دپارتمان...</option>
                            </select>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                                <label class="form-label">پزشک</label>
                                <select id="doctorId" name="DoctorId" class="form-control">
                                    <option value="">انتخاب پزشک...</option>
                            </select>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Section 5: Services -->
            <div class="form-section" id="servicesSection">
                <div class="section-header">
                    <h6 class="section-title">
                        <i class="fas fa-stethoscope me-2"></i>
                        خدمات
                    </h6>
                    <span class="section-status" id="servicesStatus">
                        <i class="fas fa-circle text-muted"></i>
                    </span>
                </div>
                <div class="section-content">
                    <div class="service-selection">
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                                    <label class="form-label">دسته‌بندی خدمات</label>
                                    <select id="serviceCategory" name="ServiceCategoryId" class="form-control">
                                        <option value="">انتخاب دسته‌بندی...</option>
                            </select>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                                    <label class="form-label">خدمت</label>
                                    <select id="serviceId" name="ServiceId" class="form-control">
                                        <option value="">انتخاب خدمت...</option>
                            </select>
                        </div>
                    </div>
                </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="form-label">جستجوی سریع با کد خدمت</label>
                                    <div class="input-group">
                                        <input type="text" id="serviceCodeSearch" class="form-control" placeholder="کد خدمت">
                                        <button type="button" class="btn btn-outline-primary" id="searchServiceBtn">
                                            <i class="fas fa-search"></i>
                                        </button>
                        </div>
                        </div>
                    </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="form-label">مبلغ خدمت</label>
                                    <input type="text" id="serviceAmount" name="ServiceAmount" class="form-control" readonly>
                </div>
            </div>
                    </div>
                    </div>
                </div>
            </div>

            <!-- Section 6: Payment -->
            <div class="form-section" id="paymentSection">
                <div class="section-header">
                    <h6 class="section-title">
                        <i class="fas fa-credit-card me-2"></i>
                        پرداخت
                    </h6>
                    <span class="section-status" id="paymentStatus">
                        <i class="fas fa-circle text-muted"></i>
                    </span>
                </div>
                <div class="section-content">
                    <div class="payment-calculation">
                        <div class="row">
                            <div class="col-md-3">
                    <div class="calculation-item">
                                    <label class="form-label">مبلغ کل</label>
                                    <input type="text" id="totalAmount" class="form-control" readonly>
                    </div>
                            </div>
                            <div class="col-md-3">
                    <div class="calculation-item">
                                    <label class="form-label">سهم بیمه</label>
                                    <input type="text" id="insuranceShare" class="form-control" readonly>
                    </div>
                    </div>
                            <div class="col-md-3">
                                <div class="calculation-item">
                                    <label class="form-label">سهم بیمار</label>
                                    <input type="text" id="patientShare" class="form-control" readonly>
                </div>
            </div>
                            <div class="col-md-3">
                                <div class="calculation-item">
                                    <label class="form-label">روش پرداخت</label>
                                    <select id="paymentMethod" name="PaymentMethod" class="form-control">
                                        <option value="1">نقدی</option>
                                        <option value="2">کارت</option>
                                        <option value="3">چک</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
    </div>

        <!-- Form Actions -->
        <div class="form-actions">
            <div class="row">
                <div class="col-md-6">
                    <button type="button" class="btn btn-outline-secondary" id="resetFormBtn">
                        <i class="fas fa-undo me-1"></i>
                        ریست فرم
            </button>
                    <button type="button" class="btn btn-outline-info" id="saveDraftBtn">
                <i class="fas fa-save me-1"></i>
                        ذخیره پیش‌نویس
            </button>
        </div>
                <div class="col-md-6 text-end">
                    <button type="submit" class="btn btn-success btn-lg" id="submitReceptionBtn">
                        <i class="fas fa-check me-1"></i>
                        ثبت پذیرش
                    </button>
        </div>
    </div>
        </div>
    </form>
</div>

<!-- Medical Reception Form Styles -->
<style>
    .medical-reception-form {
        background: white;
        border-radius: 12px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.1);
        overflow: hidden;
    }

    .form-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 1.5rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .form-title h4 {
        margin: 0;
        font-weight: 600;
    }

    .status-indicator {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 0.9rem;
    }

    .patient-search-section {
        background: #f8f9fa;
        padding: 1.5rem;
        border-bottom: 1px solid #e9ecef;
    }

    .search-header {
        margin-bottom: 1rem;
    }

    .search-title {
        margin: 0;
        color: #495057;
        font-weight: 600;
    }

    .patient-card {
        display: flex;
        align-items: center;
        background: white;
        padding: 1rem;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        gap: 1rem;
    }

    .patient-avatar {
        width: 50px;
        height: 50px;
        background: #e3f2fd;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: #1976d2;
        font-size: 1.2rem;
    }

    .patient-details {
        flex: 1;
    }

    .patient-name {
        margin: 0;
        font-weight: 600;
        color: #212529;
    }

    .patient-info {
        margin: 0;
        color: #6c757d;
        font-size: 0.9rem;
    }

    .form-sections {
        padding: 1.5rem;
    }

    .form-section {
        margin-bottom: 2rem;
        border: 1px solid #e9ecef;
        border-radius: 8px;
        overflow: hidden;
    }

    .section-header {
        background: #f8f9fa;
        padding: 1rem 1.5rem;
        border-bottom: 1px solid #e9ecef;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .section-title {
        margin: 0;
        font-weight: 600;
        color: #495057;
    }

    .section-content {
        padding: 1.5rem;
    }

    .insurance-card {
        border: 1px solid #e9ecef;
        border-radius: 8px;
        overflow: hidden;
        transition: all 0.3s ease;
    }

    .insurance-card:hover {
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        transform: translateY(-2px);
    }

    .card-header {
        background: #f8f9fa;
        padding: 1rem;
        border-bottom: 1px solid #e9ecef;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .card-title {
        margin: 0;
        font-weight: 600;
        color: #495057;
    }

    .card-actions {
        display: flex;
        gap: 0.5rem;
    }

    .card-body {
        padding: 1rem;
    }

    .current-insurance-display {
        background: #e8f5e8;
        border: 1px solid #28a745;
        border-radius: 8px;
        padding: 1rem;
        margin-bottom: 1rem;
    }

    .insurance-summary {
        background: white;
        border-radius: 6px;
        padding: 1rem;
    }

    .summary-title {
        color: #28a745;
        font-weight: 600;
        margin-bottom: 1rem;
    }

    .insurance-details {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1rem;
    }

    .insurance-detail-item {
        background: #f8f9fa;
        padding: 0.75rem;
        border-radius: 6px;
        border-left: 4px solid #28a745;
    }

    .insurance-detail-label {
        font-size: 0.8rem;
        color: #6c757d;
        margin-bottom: 0.25rem;
    }

    .insurance-detail-value {
        font-weight: 600;
        color: #212529;
    }

    .insurance-actions {
        margin-top: 1.5rem;
        padding-top: 1rem;
        border-top: 1px solid #e9ecef;
    }

    .primary-insurance .card-header {
        background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%);
        border-left: 4px solid #1976d2;
    }

    .supplementary-insurance .card-header {
        background: linear-gradient(135deg, #e8f5e8 0%, #c8e6c9 100%);
        border-left: 4px solid #28a745;
    }

    .calculation-item {
        text-align: center;
    }

    .calculation-item .form-control {
        text-align: center;
        font-weight: 600;
        color: #495057;
    }

    .form-actions {
        background: #f8f9fa;
        padding: 1.5rem;
        border-top: 1px solid #e9ecef;
    }

    .form-group {
        margin-bottom: 1rem;
    }

    .form-label {
        font-weight: 600;
        color: #495057;
        margin-bottom: 0.5rem;
    }

    .form-control {
        border: 1px solid #ced4da;
        border-radius: 6px;
        padding: 0.75rem;
        transition: all 0.3s ease;
    }

    .form-control:focus {
        border-color: #667eea;
        box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
    }

    .btn {
        border-radius: 6px;
        font-weight: 500;
        transition: all 0.3s ease;
    }

    .btn-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border: none;
    }

    .btn-success {
        background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
        border: none;
    }

    /* Responsive Design */
    @media (max-width: 768px) {
        .form-header {
            flex-direction: column;
            gap: 1rem;
            text-align: center;
        }
        
        .patient-card {
            flex-direction: column;
            text-align: center;
        }
        
        .form-actions .row {
            text-align: center;
        }
        
        .form-actions .col-md-6:last-child {
            margin-top: 1rem;
        }
    }
</style>

<!-- Medical Reception Form JavaScript -->
<script>
    // Wait for jQuery to be available
    function waitForJQueryReceptionForm() {
        if (typeof jQuery !== 'undefined' && typeof $ !== 'undefined') {
            $(document).ready(function() {
                initializeReceptionForm();
            });
        } else {
            setTimeout(waitForJQueryReceptionForm, 50);
        }
    }
    
    // Start waiting for jQuery
    waitForJQueryReceptionForm();

    function initializeReceptionForm() {
        console.log('🏥 Medical Reception Form Initialized');
        
        // Initialize form components
        initializePatientSearch();
        initializeInsuranceManagement();
        initializeDepartmentSelection();
        initializeServiceSelection();
        initializePaymentCalculation();
        
        // Setup form validation
        setupFormValidation();
        
        // Setup form handlers
        setupFormHandlers();
    }

    function initializePatientSearch() {
        // National code search functionality
        $('#searchPatientBtn').on('click', function() {
            searchPatientByNationalCode();
        });

        $('#nationalCodeSearch').on('keypress', function(e) {
            if (e.which === 13) {
                searchPatientByNationalCode();
        }
    });
}

    function searchPatientByNationalCode() {
        const nationalCode = $('#nationalCodeSearch').val();
        
        if (!nationalCode || nationalCode.length !== 10) {
            showError('کد ملی باید 10 رقم باشد');
        return;
    }
    
        console.log('🔍 Searching patient with national code:', nationalCode);
        
        // AJAX call to search patient
    $.ajax({
            url: '@Url.Action("SearchPatientByNationalCode", "ReceptionPatient")',
        type: 'POST',
            data: { nationalCode: nationalCode },
            dataType: 'json',
        success: function(response) {
                if (response.success && response.data) {
                    displayPatientInfo(response.data);
                } else {
                    showError('بیمار یافت نشد');
            }
        },
        error: function() {
                showError('خطا در جستجوی بیمار');
        }
    });
}

    function displayPatientInfo(patient) {
        // Display patient information
        $('#patientName').text(patient.firstName + ' ' + patient.lastName);
        $('#patientInfo').text('کد ملی: ' + patient.nationalCode + ' | تاریخ تولد: ' + patient.birthDate);
        $('#patientInfoDisplay').show();
        
        // Fill form fields
        $('#patientId').val(patient.patientId);
        $('#firstName').val(patient.firstName);
        $('#lastName').val(patient.lastName);
        $('#nationalCode').val(patient.nationalCode);
        $('#birthDate').val(patient.birthDate);
        $('#gender').val(patient.gender);
        $('#phoneNumber').val(patient.phoneNumber);
        
        // Update form status
        updateFormStatus('patientInfoSection', 'completed');
        
        // Load patient insurance
        loadPatientInsurance(patient.patientId);
    }

    function loadPatientInsurance(patientId) {
        console.log('🏥 Loading insurance for patient:', patientId);
    
    $.ajax({
            url: '@Url.Action("GetPatientInsurances", "ReceptionInsuranceForm")',
        type: 'POST',
            data: { patientId: patientId },
            dataType: 'json',
        success: function(response) {
                if (response.success && response.data) {
                    displayPatientInsurance(response.data);
            }
        },
        error: function() {
                console.error('Error loading patient insurance');
        }
    });
}

    function displayPatientInsurance(insuranceData) {
        console.log('🏥 Displaying patient insurance:', insuranceData);
        
        // Display current insurance information
        displayCurrentInsuranceDetails(insuranceData);
        
        // Fill form fields for editing
        if (insuranceData.primaryInsurance) {
            $('#primaryInsuranceProvider').val(insuranceData.primaryInsurance.providerId);
            $('#primaryInsurancePlan').val(insuranceData.primaryInsurance.planId);
            $('#primaryPolicyNumber').val(insuranceData.primaryInsurance.policyNumber);
            $('#primaryCardNumber').val(insuranceData.primaryInsurance.cardNumber);
        }
        
        if (insuranceData.supplementaryInsurance) {
            $('#supplementaryInsuranceProvider').val(insuranceData.supplementaryInsurance.providerId);
            $('#supplementaryInsurancePlan').val(insuranceData.supplementaryInsurance.planId);
            $('#supplementaryPolicyNumber').val(insuranceData.supplementaryInsurance.policyNumber);
            $('#supplementaryCardNumber').val(insuranceData.supplementaryInsurance.cardNumber);
        }
        
        updateFormStatus('insuranceSection', 'completed');
    }

    function displayCurrentInsuranceDetails(insuranceData) {
        const currentInsuranceDisplay = $('#currentInsuranceDisplay');
        const insuranceDetails = $('#insuranceDetails');
        
        if (!insuranceData || (!insuranceData.primaryInsurance && !insuranceData.supplementaryInsurance)) {
            currentInsuranceDisplay.hide();
            return;
        }
        
        let detailsHtml = '';
        
        // Primary Insurance Details
        if (insuranceData.primaryInsurance) {
            detailsHtml += `
                <div class="insurance-detail-item">
                    <div class="insurance-detail-label">بیمه پایه</div>
                    <div class="insurance-detail-value">${insuranceData.primaryInsurance.providerName || 'نامشخص'}</div>
                </div>
                <div class="insurance-detail-item">
                    <div class="insurance-detail-label">طرح بیمه</div>
                    <div class="insurance-detail-value">${insuranceData.primaryInsurance.planName || 'نامشخص'}</div>
                </div>
                <div class="insurance-detail-item">
                    <div class="insurance-detail-label">شماره بیمه‌نامه</div>
                    <div class="insurance-detail-value">${insuranceData.primaryInsurance.policyNumber || 'نامشخص'}</div>
                </div>
                <div class="insurance-detail-item">
                    <div class="insurance-detail-label">شماره کارت</div>
                    <div class="insurance-detail-value">${insuranceData.primaryInsurance.cardNumber || 'نامشخص'}</div>
                </div>
            `;
        }
        
        // Supplementary Insurance Details
        if (insuranceData.supplementaryInsurance) {
            detailsHtml += `
                <div class="insurance-detail-item">
                    <div class="insurance-detail-label">بیمه تکمیلی</div>
                    <div class="insurance-detail-value">${insuranceData.supplementaryInsurance.providerName || 'نامشخص'}</div>
                </div>
                <div class="insurance-detail-item">
                    <div class="insurance-detail-label">طرح بیمه تکمیلی</div>
                    <div class="insurance-detail-value">${insuranceData.supplementaryInsurance.planName || 'نامشخص'}</div>
                </div>
                <div class="insurance-detail-item">
                    <div class="insurance-detail-label">شماره بیمه‌نامه تکمیلی</div>
                    <div class="insurance-detail-value">${insuranceData.supplementaryInsurance.policyNumber || 'نامشخص'}</div>
                </div>
                <div class="insurance-detail-item">
                    <div class="insurance-detail-label">شماره کارت تکمیلی</div>
                    <div class="insurance-detail-value">${insuranceData.supplementaryInsurance.cardNumber || 'نامشخص'}</div>
                </div>
            `;
        }
        
        insuranceDetails.html(detailsHtml);
        currentInsuranceDisplay.show();
    }

    function initializeInsuranceManagement() {
        // Load insurance providers
        loadInsuranceProviders();
        
        // Handle provider changes
        $('#primaryInsuranceProvider, #supplementaryInsuranceProvider').on('change', function() {
            const providerId = $(this).val();
            const isPrimary = $(this).attr('id') === 'primaryInsuranceProvider';
            loadInsurancePlans(providerId, isPrimary);
        });
        
        // Handle insurance validation
        $('#validateInsuranceBtn').on('click', function() {
            validatePatientInsurance();
        });
        
        // Handle insurance saving
        $('#saveInsuranceBtn').on('click', function() {
            savePatientInsurance();
        });
        
        // Handle edit buttons
        $('#editPrimaryInsuranceBtn').on('click', function() {
            editInsurance('primary');
        });
        
        $('#editSupplementaryInsuranceBtn').on('click', function() {
            editInsurance('supplementary');
        });
    }

    function validatePatientInsurance() {
        const patientId = $('#patientId').val();
        
        if (!patientId) {
            showError('ابتدا بیمار را انتخاب کنید');
            return;
        }
        
        console.log('🔍 Validating patient insurance for:', patientId);
        
        $.ajax({
            url: '@Url.Action("ValidatePatientInsurance", "ReceptionInsuranceForm")',
            type: 'POST',
            data: { patientId: patientId },
            dataType: 'json',
            success: function(response) {
                if (response.success && response.data) {
                    displayInsuranceValidationResult(response.data);
                } else {
                    showError('خطا در اعتبارسنجی بیمه');
                }
            },
            error: function() {
                showError('خطا در اعتبارسنجی بیمه');
            }
        });
    }

    function displayInsuranceValidationResult(validationResult) {
        console.log('✅ Insurance validation result:', validationResult);
        
        if (validationResult.isValid) {
            showSuccess('بیمه معتبر است');
            updateFormStatus('insuranceSection', 'completed');
        } else {
            showError('بیمه معتبر نیست: ' + (validationResult.message || 'خطای نامشخص'));
            updateFormStatus('insuranceSection', 'error');
        }
    }

    function savePatientInsurance() {
        const patientId = $('#patientId').val();
        
        if (!patientId) {
            showError('ابتدا بیمار را انتخاب کنید');
            return;
        }
        
        const insuranceData = {
            PatientId: patientId,
            PrimaryInsuranceProviderId: $('#primaryInsuranceProvider').val(),
            PrimaryInsurancePlanId: $('#primaryInsurancePlan').val(),
            PrimaryPolicyNumber: $('#primaryPolicyNumber').val(),
            PrimaryCardNumber: $('#primaryCardNumber').val(),
            SupplementaryInsuranceProviderId: $('#supplementaryInsuranceProvider').val(),
            SupplementaryInsurancePlanId: $('#supplementaryInsurancePlan').val(),
            SupplementaryPolicyNumber: $('#supplementaryPolicyNumber').val(),
            SupplementaryCardNumber: $('#supplementaryCardNumber').val()
        };
        
        console.log('💾 Saving patient insurance:', insuranceData);
        
        $.ajax({
            url: '@Url.Action("SavePatientInsurance", "ReceptionInsuranceForm")',
            type: 'POST',
            data: insuranceData,
            dataType: 'json',
            success: function(response) {
                if (response.success) {
                    showSuccess('اطلاعات بیمه با موفقیت ذخیره شد');
                    // Reload patient insurance
                    loadPatientInsurance(patientId);
                } else {
                    showError('خطا در ذخیره اطلاعات بیمه: ' + (response.message || 'خطای نامشخص'));
                }
            },
            error: function() {
                showError('خطا در ذخیره اطلاعات بیمه');
            }
        });
    }

    function editInsurance(type) {
        console.log('✏️ Editing insurance:', type);
        
        if (type === 'primary') {
            $('#primaryInsuranceProvider').focus();
        } else {
            $('#supplementaryInsuranceProvider').focus();
        }
    }

    function loadInsuranceProviders() {
        console.log('🏥 Loading insurance providers...');
        
    $.ajax({
            url: '@Url.Action("GetInsuranceProviders", "ReceptionInsuranceForm")',
            type: 'GET',
            dataType: 'json',
        success: function(response) {
                if (response.success && response.data) {
                    populateInsuranceProviders(response.data);
            }
        },
        error: function() {
                console.error('Error loading insurance providers');
        }
    });
}

    function populateInsuranceProviders(providers) {
        const primarySelect = $('#primaryInsuranceProvider');
        const supplementarySelect = $('#supplementaryInsuranceProvider');
        
        primarySelect.find('option:not(:first)').remove();
        supplementarySelect.find('option:not(:first)').remove();
        
        providers.forEach(function(provider) {
            const option = `<option value="${provider.insuranceProviderId}">${provider.name}</option>`;
            primarySelect.append(option);
            supplementarySelect.append(option);
        });
    }

    function loadInsurancePlans(providerId, isPrimary) {
        if (!providerId) return;
        
        const selectId = isPrimary ? '#primaryInsurancePlan' : '#supplementaryInsurancePlan';
        const insuranceType = isPrimary ? 1 : 2; // Primary = 1, Supplementary = 2
    
    $.ajax({
            url: '@Url.Action("GetInsurancePlans", "ReceptionInsuranceForm")',
            type: 'GET',
            data: { providerId: providerId, insuranceType: insuranceType },
            dataType: 'json',
        success: function(response) {
                if (response.success && response.data) {
                    populateInsurancePlans(response.data, selectId);
                }
    },
    error: function() {
                console.error('Error loading insurance plans');
            }
        });
    }

    function populateInsurancePlans(plans, selectId) {
        const select = $(selectId);
        select.find('option:not(:first)').remove();
        
        plans.forEach(function(plan) {
            const option = `<option value="${plan.insurancePlanId}">${plan.name}</option>`;
            select.append(option);
        });
    }

    function initializeDepartmentSelection() {
        // Load departments
        loadDepartments();
        
        // Handle department changes
        $('#departmentId').on('change', function() {
            const departmentId = $(this).val();
            if (departmentId) {
                loadDoctors(departmentId);
                updateFormStatus('departmentSection', 'completed');
            }
        });
    }

    function loadDepartments() {
        console.log('🏥 Loading departments...');
    
    $.ajax({
            url: '@Url.Action("GetDepartments", "ReceptionDepartment")',
            type: 'GET',
            dataType: 'json',
        success: function(response) {
                if (response.success && response.data) {
                    populateDepartments(response.data);
                }
        },
        error: function() {
                console.error('Error loading departments');
        }
    });
}

    function populateDepartments(departments) {
        const select = $('#departmentId');
        select.find('option:not(:first)').remove();
        
        departments.forEach(function(department) {
            const option = `<option value="${department.departmentId}">${department.departmentName}</option>`;
            select.append(option);
        });
    }

    function loadDoctors(departmentId) {
        $.ajax({
            url: '@Url.Action("GetDoctorsByDepartment", "ReceptionDepartment")',
            type: 'GET',
            data: { departmentId: departmentId },
            dataType: 'json',
            success: function(response) {
                if (response.success && response.data) {
                    populateDoctors(response.data);
                }
            },
            error: function() {
                console.error('Error loading doctors');
            }
        });
    }

    function populateDoctors(doctors) {
        const select = $('#doctorId');
        select.find('option:not(:first)').remove();
        
        doctors.forEach(function(doctor) {
            const option = `<option value="${doctor.doctorId}">${doctor.fullName}</option>`;
            select.append(option);
        });
    }

    function initializeServiceSelection() {
        // Load service categories
        loadServiceCategories();
        
        // Handle category changes
        $('#serviceCategory').on('change', function() {
            const categoryId = $(this).val();
            if (categoryId) {
                loadServices(categoryId);
            }
        });
        
        // Handle service changes
        $('#serviceId').on('change', function() {
            const serviceId = $(this).val();
            if (serviceId) {
                loadServiceDetails(serviceId);
                updateFormStatus('servicesSection', 'completed');
            }
        });
        
        // Service code search
        $('#searchServiceBtn').on('click', function() {
            searchServiceByCode();
        });
    }

    function loadServiceCategories() {
        console.log('🏥 Loading service categories...');
        
        $.ajax({
            url: '@Url.Action("GetServiceCategories", "ReceptionService")',
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                if (response.success && response.data) {
                    populateServiceCategories(response.data);
                }
            },
            error: function() {
                console.error('Error loading service categories');
            }
        });
    }

    function populateServiceCategories(categories) {
        const select = $('#serviceCategory');
        select.find('option:not(:first)').remove();
        
        categories.forEach(function(category) {
            const option = `<option value="${category.categoryId}">${category.categoryName}</option>`;
            select.append(option);
        });
    }

    function loadServices(categoryId) {
        $.ajax({
            url: '@Url.Action("GetServicesByCategory", "ReceptionService")',
            type: 'GET',
            data: { categoryId: categoryId },
            dataType: 'json',
            success: function(response) {
                if (response.success && response.data) {
                    populateServices(response.data);
                }
            },
            error: function() {
                console.error('Error loading services');
            }
        });
    }

    function populateServices(services) {
        const select = $('#serviceId');
        select.find('option:not(:first)').remove();
        
        services.forEach(function(service) {
            const option = `<option value="${service.serviceId}">${service.serviceName} (${service.serviceCode})</option>`;
            select.append(option);
        });
    }

    function loadServiceDetails(serviceId) {
        $.ajax({
            url: '@Url.Action("GetServiceDetails", "ReceptionService")',
            type: 'GET',
            data: { serviceId: serviceId },
            dataType: 'json',
            success: function(response) {
                if (response.success && response.data) {
                    displayServiceDetails(response.data);
                }
            },
            error: function() {
                console.error('Error loading service details');
            }
        });
    }

    function displayServiceDetails(service) {
        $('#serviceAmount').val(service.basePrice);
        calculatePayment();
    }

    function searchServiceByCode() {
        const serviceCode = $('#serviceCodeSearch').val();
        
        if (!serviceCode) {
            showError('کد خدمت را وارد کنید');
            return;
        }
        
        $.ajax({
            url: '@Url.Action("SearchServiceByCode", "ReceptionService")',
            type: 'GET',
            data: { serviceCode: serviceCode },
            dataType: 'json',
            success: function(response) {
                if (response.success && response.data) {
                    $('#serviceId').val(response.data.serviceId);
                    displayServiceDetails(response.data);
                } else {
                    showError('خدمت یافت نشد');
                }
            },
            error: function() {
                showError('خطا در جستجوی خدمت');
            }
        });
    }

    function initializePaymentCalculation() {
        // Calculate payment when insurance or service changes
        $('#primaryInsurancePlan, #supplementaryInsurancePlan, #serviceId').on('change', function() {
            calculatePayment();
        });
    }

    function calculatePayment() {
        const serviceId = $('#serviceId').val();
        const primaryPlanId = $('#primaryInsurancePlan').val();
        const supplementaryPlanId = $('#supplementaryInsurancePlan').val();
        const serviceAmount = parseFloat($('#serviceAmount').val()) || 0;
        
        if (!serviceId || !serviceAmount) {
            return;
        }
        
        $.ajax({
            url: '@Url.Action("CalculateInsuranceShare", "ReceptionInsuranceForm")',
            type: 'POST',
            data: {
                patientId: $('#patientId').val(),
                serviceId: serviceId,
                serviceAmount: serviceAmount,
                primaryInsurancePlanId: primaryPlanId,
                supplementaryInsurancePlanId: supplementaryPlanId
            },
            dataType: 'json',
            success: function(response) {
                if (response.success && response.data) {
                    displayPaymentCalculation(response.data);
                }
            },
            error: function() {
                console.error('Error calculating payment');
            }
        });
    }

    function displayPaymentCalculation(calculation) {
        $('#totalAmount').val(calculation.totalAmount);
        $('#insuranceShare').val(calculation.insuranceShare);
        $('#patientShare').val(calculation.patientShare);
        
        updateFormStatus('paymentSection', 'completed');
    }

    function setupFormValidation() {
        // Real-time validation
        $('#nationalCodeSearch').on('input', function() {
            const value = $(this).val();
            if (value.length === 10) {
                $(this).removeClass('is-invalid').addClass('is-valid');
            } else {
                $(this).removeClass('is-valid').addClass('is-invalid');
            }
        });
    }

    function setupFormHandlers() {
        // Form reset
        $('#resetFormBtn').on('click', function() {
            resetForm();
        });
        
        // Save draft
        $('#saveDraftBtn').on('click', function() {
            saveDraft();
        });
        
        // Form submission
        $('#receptionForm').on('submit', function(e) {
            e.preventDefault();
            submitReception();
        });
    }

    function resetForm() {
        $('#receptionForm')[0].reset();
        $('#patientInfoDisplay').hide();
        $('.form-section').each(function() {
            updateFormStatus($(this).attr('id'), 'pending');
        });
        console.log('🔄 Form reset');
    }

    function saveDraft() {
        console.log('💾 Saving draft...');
        // Implementation for saving draft
    }

    function submitReception() {
        console.log('✅ Submitting reception...');
        
        // Validate form
        if (!validateForm()) {
            return;
        }
        
        // Submit form
        const formData = $('#receptionForm').serialize();
        
        $.ajax({
            url: $('#receptionForm').attr('action'),
            type: 'POST',
            data: formData,
            dataType: 'json',
            success: function(response) {
                if (response.success) {
                    showSuccess('پذیرش با موفقیت ثبت شد');
                    resetForm();
                } else {
                    showError(response.message || 'خطا در ثبت پذیرش');
                }
            },
            error: function() {
                showError('خطا در ثبت پذیرش');
            }
        });
    }

    function validateForm() {
        let isValid = true;
        
        // Check if patient is selected
        if (!$('#patientId').val()) {
            showError('ابتدا بیمار را جستجو کنید');
            isValid = false;
        }
        
        // Check required fields
        const requiredFields = ['#departmentId', '#doctorId', '#serviceId'];
        requiredFields.forEach(function(field) {
            if (!$(field).val()) {
                $(field).addClass('is-invalid');
                isValid = false;
            } else {
                $(field).removeClass('is-invalid');
            }
        });
        
        return isValid;
    }

    function updateFormStatus(sectionId, status) {
        const statusElement = $('#' + sectionId + 'Status');
        const statusIcon = statusElement.find('i');
        
        statusElement.removeClass('text-muted text-success text-warning text-danger');
        statusIcon.removeClass('fa-circle fa-check fa-exclamation fa-times');
        
        switch (status) {
            case 'completed':
                statusElement.addClass('text-success');
                statusIcon.addClass('fa-check');
                break;
            case 'warning':
                statusElement.addClass('text-warning');
                statusIcon.addClass('fa-exclamation');
                break;
            case 'error':
                statusElement.addClass('text-danger');
                statusIcon.addClass('fa-times');
                break;
            default:
                statusElement.addClass('text-muted');
                statusIcon.addClass('fa-circle');
        }
    }

    function showError(message) {
        // Show error message
        console.error('❌ Error:', message);
        // You can implement a toast notification here
    }

    function showSuccess(message) {
        // Show success message
        console.log('✅ Success:', message);
        // You can implement a toast notification here
    }
</script>
