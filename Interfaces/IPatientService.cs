using ClinicApp.Helpers;
using ClinicApp.ViewModels;
using Microsoft.AspNet.Identity;
using System.Threading.Tasks;

namespace ClinicApp.Interfaces
{
    /// <summary>
    /// سرویس مدیریت بیماران - طراحی شده برای سیستم‌های پزشکی کلینیک شفا
    /// 
    /// ویژگی‌های کلیدی:
    /// 1. پشتیبانی از ایجاد، ویرایش و حذف نرم بیماران
    /// 2. مدیریت کامل اطلاعات بیمه بیماران
    /// 3. پشتیبانی از سیستم حذف نرم (Soft Delete) برای حفظ اطلاعات پزشکی
    /// 4. ارتباط با کاربران ایجاد کننده، ویرایش کننده و حذف کننده برای ردیابی دقیق
    /// 5. مدیریت کامل تاریخ‌ها و اطلاعات کاربران مرتبط
    /// 6. پشتیبانی از بیمه آزاد به عنوان پیش‌فرض برای بیماران بدون بیمه
    /// 7. پشتیبانی از محیط‌های پزشکی ایرانی با تاریخ شمسی و اعداد فارسی
    /// 8. عدم استفاده از AutoMapper برای کنترل کامل بر روی داده‌ها
    /// 9. امنیت بالا با رعایت استانداردهای سیستم‌های پزشکی
    /// 10. عملکرد بهینه برای محیط‌های Production
    /// </summary>
    public interface IPatientService
    {
        /// <summary>
        /// ثبت‌نام بیمار جدید یا بازیابی حساب موجود با OTP
        /// 
        /// ویژگی‌های کلیدی:
        /// 1. شماره موبایل را نرمالایز می‌کند (E.164)
        /// 2. محدودیت نر rate برای جلوگیری از اسپم اعمال می‌کند
        /// 3. بررسی وجود کاربر با کد ملی و شماره موبایل قبل از ایجاد تراکنش
        /// 4. تراکنش امن برای همزمانی ثبت در AspNetUsers و Patients
        /// 5. به‌روزرسانی تاریخ آخرین ورود برای کاربران موجود
        /// 6. لاگ‌گیری حرفه‌ای برای موفقیت و خطاها
        /// 7. پشتیبانی کامل از سیستم بیمه‌ها و تعریف بیمه آزاد به عنوان پیش‌فرض
        /// 
        /// استانداردهای پزشکی رعایت شده:
        /// - رعایت استاندارد حفظ اطلاعات پزشکی ایران
        /// - پشتیبانی از سیستم حذف نرم (Soft Delete)
        /// - ردیابی کامل عملیات‌ها برای حسابرسی
        /// 
        /// امنیت:
        /// - اعمال محدودیت نرخ برای جلوگیری از حملات brute force
        /// - تأیید شماره موبایل برای احراز هویت
        /// - تراکنش امن برای جلوگیری از ناسازگاری داده‌ها
        /// </summary>
        /// <param name="model">مدل ثبت‌نام بیمار حاوی اطلاعات ضروری بیمار</param>
        /// <param name="userIp">آدرس IP کاربر برای محدودیت نرخ و لاگ‌گیری امنیتی</param>
        /// <returns>نتیجه عملیات ثبت‌نام به صورت IdentityResult</returns>
        Task<IdentityResult> RegisterPatientAsync(RegisterPatientViewModel model, string userIp);

        /// <summary>
        /// جستجو و صفحه‌بندی بیماران با عملکرد بهینه برای محیط‌های پزشکی
        /// 
        /// ویژگی‌های کلیدی:
        /// 1. پشتیبانی از جستجو بر اساس نام، نام خانوادگی، کد ملی و شماره تلفن
        /// 2. صفحه‌بندی هوشمندانه برای بهینه‌سازی عملکرد
        /// 3. پشتیبانی از محیط‌های ایرانی با تاریخ شمسی
        /// 4. مدیریت کامل خطاها برای محیط‌های Production
        /// 5. لاگ‌گیری حرفه‌ای برای عملکرد و امنیت
        /// 
        /// استانداردهای پزشکی رعایت شده:
        /// - عدم نمایش بیماران حذف شده (Soft Delete)
        /// - ارائه اطلاعات کامل بیمه بیماران
        /// - رعایت استانداردهای محلی در نمایش تاریخ‌ها
        /// 
        /// عملکرد:
        /// - استفاده از Index‌های مناسب برای بهبود سرعت جستجو
        /// - بهینه‌سازی پرس‌وجوها برای کاهش بار روی سرور
        /// - پشتیبانی از صفحه‌بندی برای جلوگیری از بارگیری تمام داده‌ها
        /// </summary>
        /// <param name="searchTerm">عبارت جستجو برای فیلتر کردن بیماران</param>
        /// <param name="pageNumber">شماره صفحه مورد نظر برای صفحه‌بندی</param>
        /// <param name="pageSize">تعداد آیتم‌ها در هر صفحه</param>
        /// <returns>نتیجه جستجو به همراه اطلاعات صفحه‌بندی</returns>
        Task<ServiceResult<PagedResult<PatientIndexViewModel>>> SearchPatientsAsync(string searchTerm, int pageNumber, int pageSize);

        /// <summary>
        /// دریافت جزئیات کامل یک بیمار برای نمایش اطلاعات
        /// 
        /// ویژگی‌های کلیدی:
        /// 1. فقط بیماران فعال (غیرحذف شده) را بازمی‌گرداند
        /// 2. محاسبه مانده بدهی بیمار بر اساس تراکنش‌های مالی
        /// 3. پشتیبانی از محیط‌های ایرانی با تاریخ شمسی
        /// 4. لاگ‌گیری دقیق برای حسابرسی و امنیت
        /// 5. مدیریت کامل خطاها برای محیط‌های Production
        /// 
        /// استانداردهای پزشکی رعایت شده:
        /// - نمایش اطلاعات کاربر ایجاد کننده و ویرایش کننده
        /// - نمایش تاریخ‌های مرتبط به صورت شمسی
        /// - محاسبه دقیق مانده بدهی برای مدیریت مالی
        /// 
        /// امنیت:
        /// - بررسی دسترسی کاربر به اطلاعات بیمار
        /// - لاگ‌گیری هر درخواست برای ردیابی
        /// - جلوگیری از نمایش اطلاعات بیماران حذف شده
        /// </summary>
        /// <param name="patientId">شناسه بیمار مورد نظر برای دریافت جزئیات</param>
        /// <returns>مدل جزئیات کامل بیمار</returns>
        Task<ServiceResult<PatientDetailsViewModel>> GetPatientDetailsAsync(int patientId);

        /// <summary>
        /// دریافت اطلاعات یک بیمار برای پر کردن فرم ویرایش
        /// 
        /// ویژگی‌های کلیدی:
        /// 1. فقط بیماران فعال (غیرحذف شده) را بازمی‌گرداند
        /// 2. پشتیبانی از محیط‌های ایرانی با تاریخ شمسی
        /// 3. لاگ‌گیری دقیق برای حسابرسی و امنیت
        /// 4. مدیریت کامل خطاها برای محیط‌های Production
        /// 
        /// استانداردهای پزشکی رعایت شده:
        /// - نمایش اطلاعات کاربر ایجاد کننده و ویرایش کننده
        /// - نمایش تاریخ‌های مرتبط به صورت شمسی
        /// - رعایت استانداردهای محلی در نمایش اطلاعات
        /// 
        /// امنیت:
        /// - بررسی دسترسی کاربر به اطلاعات بیمار
        /// - لاگ‌گیری هر درخواست برای ردیابی
        /// - جلوگیری از نمایش اطلاعات بیماران حذف شده
        /// </summary>
        /// <param name="patientId">شناسه بیمار مورد نظر برای ویرایش</param>
        /// <returns>مدل داده‌های بیمار برای ویرایش</returns>
        Task<ServiceResult<PatientCreateEditViewModel>> GetPatientForEditAsync(int patientId);

        /// <summary>
        /// ایجاد یک بیمار جدید با رعایت تمام استانداردهای امنیتی و پزشکی
        /// 
        /// ویژگی‌های کلیدی:
        /// 1. پشتیبانی از سیستم حذف نرم (Soft Delete) برای حفظ اطلاعات پزشکی
        /// 2. ایجاد همزمان کاربر در سیستم Identity
        /// 3. تخصیص بیمه آزاد به عنوان پیش‌فرض برای بیماران بدون بیمه
        /// 4. مدیریت صحیح کاربران تکراری و بازیابی حساب‌های موجود
        /// 5. تراکنش امن برای جلوگیری از ناسازگاری داده‌ها
        /// 6. لاگ‌گیری حرفه‌ای برای حسابرسی و امنیت
        /// 
        /// استانداردهای پزشکی رعایت شده:
        /// - رعایت استانداردهای قانونی ایران در نگهداری اطلاعات پزشکی
        /// - پشتیبانی از سیستم بیمه‌ها برای محاسبات مالی
        /// - ردیابی کامل عملیات‌ها برای حسابرسی
        /// 
        /// امنیت:
        /// - بررسی کد ملی تکراری
        /// - بررسی شماره موبایل تکراری
        /// - تراکنش امن برای جلوگیری از ایجاد رکوردهای ناسازگار
        /// - لاگ‌گیری دقیق برای هر عملیات
        /// </summary>
        /// <param name="model">مدل اطلاعات بیمار جدید</param>
        /// <returns>نتیجه عملیات ایجاد بیمار</returns>
        Task<ServiceResult> CreatePatientAsync(PatientCreateEditViewModel model);

        /// <summary>
        /// به‌روزرسانی بیمار موجود با رعایت تمام استانداردهای امنیتی و پزشکی
        /// 
        /// ویژگی‌های کلیدی:
        /// 1. پشتیبانی از سیستم حذف نرم (Soft Delete) برای حفظ اطلاعات پزشکی
        /// 2. به‌روزرسانی همزمان اطلاعات کاربر در سیستم Identity
        /// 3. مدیریت صحیح کاربران تکراری
        /// 4. تراکنش امن برای جلوگیری از ناسازگاری داده‌ها
        /// 5. لاگ‌گیری حرفه‌ای برای حسابرسی و امنیت
        /// 6. پشتیبانی از محیط‌های ایرانی با تاریخ شمسی
        /// 
        /// استانداردهای پزشکی رعایت شده:
        /// - رعایت استانداردهای قانونی ایران در نگهداری اطلاعات پزشکی
        /// - پشتیبانی از سیستم بیمه‌ها برای محاسبات مالی
        /// - ردیابی کامل عملیات‌ها برای حسابرسی
        /// 
        /// امنیت:
        /// - بررسی کد ملی تکراری
        /// - بررسی شماره موبایل تکراری
        /// - مدیریت تداخل همزمانی (Concurrency)
        /// - لاگ‌گیری دقیق برای هر عملیات
        /// </summary>
        /// <param name="model">مدل اطلاعات به‌روزرسانی شده بیمار</param>
        /// <returns>نتیجه عملیات به‌روزرسانی</returns>
        Task<ServiceResult> UpdatePatientAsync(PatientCreateEditViewModel model);

        /// <summary>
        /// حذف نرم (Soft-delete) یک بیمار با رعایت تمام استانداردهای پزشکی و حفظ اطلاعات مالی
        /// 
        /// ویژگی‌های کلیدی:
        /// 1. اعمال قوانین کسب‌وکار پیچیده قبل از حذف
        /// 2. بررسی پذیرش‌های فعال یا در انتظار پرداخت
        /// 3. بررسی نوبت‌های آینده لغو نشده
        /// 4. انجام حذف نرم (Soft Delete) برای حفظ اطلاعات پزشکی
        /// 5. لاگ‌گیری حرفه‌ای برای حسابرسی و امنیت
        /// 
        /// استانداردهای پزشکی رعایت شده:
        /// - رعایت استانداردهای قانونی ایران در نگهداری اطلاعات پزشکی
        /// - جلوگیری از حذف بیماران با پذیرش‌های فعال
        /// - جلوگیری از حذف بیماران با نوبت‌های آینده
        /// - ردیابی کامل عملیات‌ها برای حسابرسی
        /// 
        /// امنیت:
        /// - بررسی دسترسی کاربر به عملیات حذف
        /// - لاگ‌گیری دقیق برای هر تلاش حذف
        /// - جلوگیری از حذف اشتباه اطلاعات پزشکی
        /// </summary>
        /// <param name="patientId">شناسه بیمار مورد نظر برای حذف</param>
        /// <returns>نتیجه عملیات حذف</returns>
        Task<ServiceResult> DeletePatientAsync(int patientId);
    }
}