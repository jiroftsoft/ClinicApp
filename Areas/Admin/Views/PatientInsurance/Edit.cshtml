@model ClinicApp.ViewModels.Insurance.PatientInsurance.PatientInsuranceCreateEditViewModel
@{
    ViewBag.Title = "Ÿà€åÿ±ÿß€åÿ¥ ÿ®€åŸÖŸá ÿ®€åŸÖÿßÿ±";
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
}

@section Styles {
    <link href="~/Content/css/patient-insurance.css" rel="stylesheet" />
    <link href="~/Content/css/patient-insurance-enhanced.css" rel="stylesheet" />
    <link href="~/Content/plugins/select2/css/select2.min.css" rel="stylesheet" />
    <link href="~/Content/plugins/select2/css/select2-bootstrap4.min.css" rel="stylesheet" />
    
    <!-- üè• Medical Environment Specific Styles for Edit -->
    <style>
        .medical-edit-header {
            background: linear-gradient(135deg, #e3f2fd 0%, #f3e5f5 100%);
            border: 2px solid #2196f3;
            border-radius: 12px;
            padding: 1.5rem;
            margin-bottom: 2rem;
            box-shadow: 0 4px 12px rgba(33, 150, 243, 0.15);
        }
        
        .medical-insurance-info h5 {
            color: #1976d2;
            font-weight: 700;
            margin-bottom: 0.5rem;
        }
        
        .patient-details {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            flex-wrap: wrap;
        }
        
        .patient-name-badge {
            background: #4caf50;
            color: white;
            padding: 0.25rem 0.75rem;
            border-radius: 20px;
            font-size: 0.875rem;
            font-weight: 600;
        }
        
        .insurance-plan-badge {
            background: #ff9800;
            color: white;
            padding: 0.25rem 0.75rem;
            border-radius: 20px;
            font-size: 0.875rem;
            font-weight: 600;
        }
        
        .medical-form-container {
            background: white;
            border-radius: 12px;
            padding: 2rem;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            border: 1px solid #e0e0e0;
        }
        
        .medical-form-actions {
            margin-top: 2rem;
            padding-top: 1.5rem;
            border-top: 2px solid #f0f0f0;
        }
        
        .medical-save-btn {
            background: linear-gradient(135deg, #4caf50 0%, #45a049 100%);
            border: none;
            color: white;
            font-weight: 600;
            padding: 0.75rem 2rem;
            border-radius: 8px;
            transition: all 0.3s ease;
            box-shadow: 0 2px 8px rgba(76, 175, 80, 0.3);
        }
        
        .medical-save-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 16px rgba(76, 175, 80, 0.4);
        }
        
        .medical-details-btn {
            background: linear-gradient(135deg, #2196f3 0%, #1976d2 100%);
            border: none;
            color: white;
            font-weight: 600;
            padding: 0.75rem 2rem;
            border-radius: 8px;
            transition: all 0.3s ease;
            box-shadow: 0 2px 8px rgba(33, 150, 243, 0.3);
        }
        
        .medical-details-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 16px rgba(33, 150, 243, 0.4);
        }
        
        .medical-cancel-btn {
            background: linear-gradient(135deg, #757575 0%, #616161 100%);
            border: none;
            color: white;
            font-weight: 600;
            padding: 0.75rem 2rem;
            border-radius: 8px;
            transition: all 0.3s ease;
            box-shadow: 0 2px 8px rgba(117, 117, 117, 0.3);
        }
        
        .medical-cancel-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 16px rgba(117, 117, 117, 0.4);
        }
        
        .medical-form-help {
            margin-top: 1.5rem;
        }
        
        .medical-form-help .alert {
            border: none;
            border-radius: 8px;
            background: linear-gradient(135deg, #e3f2fd 0%, #f3e5f5 100%);
            border-left: 4px solid #2196f3;
        }
        
        .medical-form-help .alert ul {
            margin: 0.5rem 0 0 1rem;
        }
        
        .medical-form-help .alert li {
            margin-bottom: 0.25rem;
            color: #1976d2;
        }
        
        /* Loading States for Edit */
        .medical-loading {
            position: relative;
            opacity: 0.6;
            pointer-events: none;
        }
        
        .medical-loading::after {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 20px;
            height: 20px;
            margin: -10px 0 0 -10px;
            border: 2px solid #f3f3f3;
            border-top: 2px solid #4caf50;
            border-radius: 50%;
            animation: medical-spin 1s linear infinite;
        }
        
        @@keyframes medical-spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        /* Enhanced Form Controls for Edit */
        .medical-form-control {
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            padding: 0.75rem 1rem;
            transition: all 0.3s ease;
            background: white;
        }
        
        .medical-form-control:focus {
            border-color: #4caf50;
            box-shadow: 0 0 0 0.2rem rgba(76, 175, 80, 0.25);
            background: #f8fff8;
        }
        
        .medical-form-control.is-invalid {
            border-color: #f44336;
            box-shadow: 0 0 0 0.2rem rgba(244, 67, 54, 0.25);
        }
        
        /* Responsive Design for Edit */
        @@media (max-width: 768px) {
            .medical-edit-header {
                padding: 1rem;
            }
            
            .medical-form-container {
                padding: 1rem;
            }
            
            .medical-form-actions .d-flex {
                flex-direction: column;
            }
            
            .medical-save-btn,
            .medical-details-btn,
            .medical-cancel-btn {
                width: 100%;
                margin-bottom: 0.5rem;
            }
        }
    </style>
}

<div class="container-fluid">
    <!-- üè• Medical Environment: Edit Header -->
    <div class="medical-edit-header">
        <div class="row align-items-center">
            <div class="col-md-8">
                <div class="medical-insurance-info">
                    <h5 class="mb-2">
                                <i class="fas fa-edit me-2"></i>
                        Ÿà€åÿ±ÿß€åÿ¥ ÿ®€åŸÖŸá ÿ®€åŸÖÿßÿ±
                    </h5>
                                    <div class="patient-details">
                        <span class="patient-name-badge">
                            <i class="fas fa-user me-1"></i>
                            @Model.PatientName
                        </span>
                        <span class="insurance-plan-badge">
                            <i class="fas fa-shield-alt me-1"></i>
                            @Model.InsurancePlanName
                        </span>
                                    </div>
                                </div>
                            </div>
            <div class="col-md-4 text-end">
                <div class="medical-status-indicators">
                    <span class="badge bg-success me-2">
                        <i class="fas fa-check-circle me-1"></i>
                        ŸÅÿπÿßŸÑ
                                        </span>
                    <span class="badge bg-info">
                        <i class="fas fa-calendar me-1"></i>
                        @Model.StartDateShamsi
                                        </span>
                                    </div>
                                    </div>
                                </div>
                            </div>
                            
    <!-- üè• Medical Environment: Edit Form -->
    <div class="medical-form-container">
                        @using (Html.BeginForm("Edit", "PatientInsurance", FormMethod.Post, new { 
                            @class = "needs-validation medical-form", 
                            novalidate = "novalidate",
                            id = "patientInsuranceEditForm",
                            data_medical_form = "patient-insurance-edit"
                        }))
                        {
                            @Html.AntiForgeryToken()
                            @Html.HiddenFor(m => m.PatientInsuranceId)
            @Html.HiddenFor(m => m.PatientId)
            @Html.HiddenFor(m => m.InsuranceProviderId)
            @Html.HiddenFor(m => m.InsurancePlanId)
            @Html.HiddenFor(m => m.SupplementaryInsuranceProviderId)
            @Html.HiddenFor(m => m.SupplementaryInsurancePlanId)
            @Html.HiddenFor(m => m.IsPrimary)
            @Html.HiddenFor(m => m.IsActive)

                            @Html.Partial("_PatientInsuranceForm", Model)

                            <!-- üè• Medical Environment: Change Tracking -->
                            <div class="change-tracking" id="changeTracking" style="display: none;">
                                <h6 class="mb-3">
                                    <i class="fas fa-history"></i> ÿ™ÿ∫€å€åÿ±ÿßÿ™ ÿßŸÜÿ¨ÿßŸÖ ÿ¥ÿØŸá
                                </h6>
                                <div id="changeList">
                                    <!-- Changes will be tracked here -->
                                </div>
                            </div>

                            <!-- üè• Medical Environment Form Actions -->
                            <div class="form-actions medical-form-actions">
                                <div class="d-flex justify-content-center gap-3 flex-wrap">
                                    <button type="submit" class="btn btn-success btn-lg medical-save-btn" id="saveEditButton">
                                        <i class="fas fa-save me-2"></i> ÿ∞ÿÆ€åÿ±Ÿá ÿ™ÿ∫€å€åÿ±ÿßÿ™
                                    </button>
                                    <a href="@Url.Action("Details", "PatientInsurance", new { id = Model.PatientInsuranceId })" class="btn btn-info btn-lg medical-details-btn">
                                        <i class="fas fa-eye me-2"></i> ŸÖÿ¥ÿßŸáÿØŸá ÿ¨ÿ≤ÿ¶€åÿßÿ™
                                    </a>
                                    <a href="@Url.Action("Index", "PatientInsurance")" class="btn btn-secondary btn-lg medical-cancel-btn">
                                        <i class="fas fa-times me-2"></i> ÿßŸÜÿµÿ±ÿßŸÅ
                                    </a>
                                </div>
                                
                                <!-- üè• Medical Environment Loading Indicator -->
                                <div class="text-center mt-3" id="editLoadingIndicator" style="display: none;">
                                    <div class="spinner-border text-success" role="status">
                                        <span class="sr-only">ÿØÿ± ÿ≠ÿßŸÑ ÿ∞ÿÆ€åÿ±Ÿá ÿ™ÿ∫€å€åÿ±ÿßÿ™...</span>
                                    </div>
                                    <p class="mt-2 text-muted">ÿØÿ± ÿ≠ÿßŸÑ ÿ∞ÿÆ€åÿ±Ÿá ÿ™ÿ∫€å€åÿ±ÿßÿ™ ÿ®€åŸÖŸá ÿ®€åŸÖÿßÿ±...</p>
                                </div>
                                
                                <!-- Medical Environment Form Help -->
                                <div class="form-help medical-form-help">
                                    <div class="alert alert-info">
                                        <i class="fas fa-info-circle me-2"></i>
                                        <strong>ÿ±ÿßŸáŸÜŸÖÿß€å Ÿà€åÿ±ÿß€åÿ¥:</strong>
                                        <ul class="mb-0 mt-2">
                            <li>ÿ™ÿ∫€å€åÿ±ÿßÿ™ ÿØÿ± ŸÅ€åŸÑÿØŸáÿß€å ÿ®€åŸÖŸá Ÿæÿß€åŸá Ÿà ÿ™⁄©ŸÖ€åŸÑ€å ŸÇÿßÿ®ŸÑ Ÿà€åÿ±ÿß€åÿ¥ ÿßÿ≥ÿ™</li>
                            <li>ÿ®€åŸÖŸá ÿ™⁄©ŸÖ€åŸÑ€å ÿßÿÆÿ™€åÿßÿ±€å ÿßÿ≥ÿ™ Ÿà ŸÖ€å‚Äåÿ™ŸàÿßŸÜ€åÿØ ÿ¢ŸÜ ÿ±ÿß ÿ≠ÿ∞ŸÅ ⁄©ŸÜ€åÿØ</li>
                            <li>ÿ™ÿßÿ±€åÿÆ‚ÄåŸáÿß€å ÿ¥ÿ±Ÿàÿπ Ÿà Ÿæÿß€åÿßŸÜ ÿ®€åŸÖŸá ŸÇÿßÿ®ŸÑ ÿ™ÿ∫€å€åÿ± Ÿáÿ≥ÿ™ŸÜÿØ</li>
                            <li>ÿ¥ŸÖÿßÿ±Ÿá ÿ®€åŸÖŸá‚ÄåŸÜÿßŸÖŸá ÿ®ÿ± ÿßÿ≥ÿßÿ≥ ⁄©ÿØ ŸÖŸÑ€å ÿ®€åŸÖÿßÿ± ÿ™ŸÜÿ∏€åŸÖ ŸÖ€å‚Äåÿ¥ŸàÿØ</li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        }
    </div>
</div>

@section Scripts {
    <script src="~/Content/plugins/select2/js/select2.min.js"></script>
    <script src="~/Content/plugins/select2/js/i18n/fa.js"></script>
    <script src="~/Scripts/app/patient-insurance-enhanced.js"></script>
    
    <script>
                    $(document).ready(function() {
                        console.log('üè• Medical Environment: Initializing Patient Insurance Edit Form');
                        
            // Initialize Enhanced Patient Insurance for Edit
            if (typeof PatientInsuranceEnhanced !== 'undefined') {
                PatientInsuranceEnhanced.initializeEditForm();
            }
            
            // üè• Medical Environment: Edit Form Specific Initialization
            initializeEditForm();
                        
                        // üè• Medical Environment: Change Tracking
                        initializeChangeTracking();
                        
            // üè• Medical Environment: Form Submission
            initializeFormSubmission();
        });

        // üè• Medical Environment: Initialize Edit Form
        function initializeEditForm() {
            console.log('üè• Medical Environment: Initializing Edit Form with Model Data');
            
            // Initialize Enhanced Patient Insurance
            if (typeof PatientInsuranceEnhanced !== 'undefined') {
                PatientInsuranceEnhanced.initializeInsuranceSelection();
            }
            
            // Load insurance providers first
            loadPrimaryInsuranceProviders().then(function() {
                // Set primary insurance provider
                if ('@Model.InsuranceProviderId' && '@Model.InsuranceProviderId' !== '0') {
                    $('#PrimaryInsuranceProviderId').val('@Model.InsuranceProviderId').trigger('change');
                    
                    // Load primary insurance plans after provider is set
                    setTimeout(function() {
                        loadInsurancePlans('@Model.InsuranceProviderId', $('#PrimaryInsurancePlanId'), 'primary').then(function() {
                            if ('@Model.InsurancePlanId' && '@Model.InsurancePlanId' !== '0') {
                                $('#PrimaryInsurancePlanId').val('@Model.InsurancePlanId').trigger('change');
                            }
                        });
                    }, 500);
                }
            });
            
            // Load supplementary insurance providers
            loadSupplementaryInsuranceProviders().then(function() {
                // Set supplementary insurance provider if exists
                if ('@Model.SupplementaryInsuranceProviderId' && '@Model.SupplementaryInsuranceProviderId' !== '0') {
                    $('#SupplementaryInsuranceProviderId').val('@Model.SupplementaryInsuranceProviderId').trigger('change');
                    
                    // Load supplementary insurance plans after provider is set
                    setTimeout(function() {
                        loadInsurancePlans('@Model.SupplementaryInsuranceProviderId', $('#SupplementaryInsurancePlanId'), 'supplementary').then(function() {
                            if ('@Model.SupplementaryInsurancePlanId' && '@Model.SupplementaryInsurancePlanId' !== '0') {
                                $('#SupplementaryInsurancePlanId').val('@Model.SupplementaryInsurancePlanId').trigger('change');
                            }
                        });
                    }, 500);
                }
            });
            
            // Set other form values
            setTimeout(function() {
                // Set policy numbers
                if ('@Model.PolicyNumber') {
                    $('#PolicyNumber').val('@Model.PolicyNumber');
                }
                
                if ('@Model.SupplementaryPolicyNumber') {
                    $('#SupplementaryPolicyNumber').val('@Model.SupplementaryPolicyNumber');
                }
                
                // Set dates
                if ('@Model.StartDateShamsi') {
                    $('#StartDateShamsi').val('@Model.StartDateShamsi');
                }
                
                if ('@Model.EndDateShamsi') {
                    $('#EndDateShamsi').val('@Model.EndDateShamsi');
                }
                
                // Initialize change tracking after all values are set
                initializeChangeTracking();
            }, 1000);
        }

        // üè• Medical Environment: Load Primary Insurance Providers
        function loadPrimaryInsuranceProviders() {
            return new Promise(function(resolve, reject) {
                $.ajax({
                    url: '/Admin/PatientInsurance/GetPrimaryInsuranceProviders',
                    type: 'GET',
                    success: function(response) {
                        if (response.success) {
                            var $select = $('#PrimaryInsuranceProviderId');
                            $select.empty();
                            $select.append('<option value="">ÿßŸÜÿ™ÿÆÿßÿ® ÿ®€åŸÖŸá‚Äå⁄Øÿ∞ÿßÿ± Ÿæÿß€åŸá</option>');
                            
                            response.data.forEach(function(provider) {
                                $select.append('<option value="' + provider.id + '">' + provider.name + '</option>');
                            });
                            
                            $select.prop('disabled', false);
                            resolve();
                        } else {
                            console.error('ÿÆÿ∑ÿß ÿØÿ± ÿØÿ±€åÿßŸÅÿ™ ÿ®€åŸÖŸá‚Äå⁄Øÿ∞ÿßÿ±ÿßŸÜ Ÿæÿß€åŸá:', response.message);
                            reject(response.message);
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error('ÿÆÿ∑ÿß ÿØÿ± ÿØÿ±€åÿßŸÅÿ™ ÿ®€åŸÖŸá‚Äå⁄Øÿ∞ÿßÿ±ÿßŸÜ Ÿæÿß€åŸá:', error);
                        reject(error);
                        }
                    });
                });
            }

        // üè• Medical Environment: Load Supplementary Insurance Providers
        function loadSupplementaryInsuranceProviders() {
            return new Promise(function(resolve, reject) {
                $.ajax({
                    url: '/Admin/PatientInsurance/GetSupplementaryInsuranceProviders',
                    type: 'GET',
                    success: function(response) {
                        if (response.success) {
                            var $select = $('#SupplementaryInsuranceProviderId');
                            $select.empty();
                            $select.append('<option value="">ÿßŸÜÿ™ÿÆÿßÿ® ÿ®€åŸÖŸá‚Äå⁄Øÿ∞ÿßÿ± ÿ™⁄©ŸÖ€åŸÑ€å (ÿßÿÆÿ™€åÿßÿ±€å)</option>');
                            
                            response.data.forEach(function(provider) {
                                $select.append('<option value="' + provider.id + '">' + provider.name + '</option>');
                            });
                            
                            $select.prop('disabled', false);
                            resolve();
                                    } else {
                            console.error('ÿÆÿ∑ÿß ÿØÿ± ÿØÿ±€åÿßŸÅÿ™ ÿ®€åŸÖŸá‚Äå⁄Øÿ∞ÿßÿ±ÿßŸÜ ÿ™⁄©ŸÖ€åŸÑ€å:', response.message);
                            reject(response.message);
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error('ÿÆÿ∑ÿß ÿØÿ± ÿØÿ±€åÿßŸÅÿ™ ÿ®€åŸÖŸá‚Äå⁄Øÿ∞ÿßÿ±ÿßŸÜ ÿ™⁄©ŸÖ€åŸÑ€å:', error);
                        reject(error);
                        }
                    });
                });
            }

        // üè• Medical Environment: Load Insurance Plans
        function loadInsurancePlans(providerId, $planSelect, type) {
            return new Promise(function(resolve, reject) {
                $.ajax({
                    url: '/Admin/PatientInsurance/GetInsurancePlansByProvider',
                    type: 'GET',
                    data: { providerId: providerId, type: type },
                    success: function(response) {
                        if (response.success) {
                            $planSelect.empty();
                            $planSelect.append('<option value="">ÿßŸÜÿ™ÿÆÿßÿ® ÿ∑ÿ±ÿ≠ ÿ®€åŸÖŸá</option>');
                            
                            response.data.forEach(function(plan) {
                                $planSelect.append('<option value="' + plan.id + '">' + plan.name + '</option>');
                            });
                            
                            $planSelect.prop('disabled', false);
                            
                            // Auto-select if only one plan is available
                            if (response.data.length === 1) {
                                $planSelect.val(response.data[0].id).trigger('change');
                            }
                            
                            resolve();
                } else {
                            console.error('ÿÆÿ∑ÿß ÿØÿ± ÿØÿ±€åÿßŸÅÿ™ ÿ∑ÿ±ÿ≠‚ÄåŸáÿß€å ÿ®€åŸÖŸá:', response.message);
                            reject(response.message);
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error('ÿÆÿ∑ÿß ÿØÿ± ÿØÿ±€åÿßŸÅÿ™ ÿ∑ÿ±ÿ≠‚ÄåŸáÿß€å ÿ®€åŸÖŸá:', error);
                        reject(error);
                    }
                });
            });
            }
            
            // üè• Medical Environment: Change Tracking
            function initializeChangeTracking() {
                    var originalValues = {};
            var $form = $('#patientInsuranceEditForm');
                    
            // Store original values after a delay to ensure all fields are loaded
            setTimeout(function() {
                $form.find('input, select, textarea').each(function() {
                        var $field = $(this);
                    var fieldName = $field.attr('name');
                        if (fieldName) {
                            originalValues[fieldName] = $field.val();
                        }
                    });
                
                console.log('üè• Medical Environment: Original values stored:', originalValues);
                    
                    // Track changes
                $form.find('input, select, textarea').on('change', function() {
                        var $field = $(this);
                    var fieldName = $field.attr('name');
                        var currentValue = $field.val();
                        var originalValue = originalValues[fieldName];
                        
                    console.log('üè• Medical Environment: Field changed:', fieldName, 'from', originalValue, 'to', currentValue);
                    
                    if (currentValue !== originalValue) {
                            trackChange(fieldName, originalValue, currentValue);
                    } else {
                        removeChange(fieldName);
                        }
                    
                    updateChangeTracking();
                    });
            }, 1500); // Wait for all fields to be loaded
        }
                    
        // üè• Medical Environment: Track Individual Changes
        function trackChange(fieldName, originalValue, currentValue) {
                        var changeId = 'change_' + fieldName;
            var $changeItem = $('#' + changeId);
            
            if ($changeItem.length === 0) {
                            var changeHtml = `
                                <div class="change-item" id="${changeId}">
                        <div class="d-flex justify-content-between align-items-center">
                            <span class="change-field">${getFieldDisplayName(fieldName)}</span>
                            <div class="change-values">
                                <span class="original-value">${originalValue || 'ÿÆÿßŸÑ€å'}</span>
                                        <i class="fas fa-arrow-right mx-2"></i>
                                <span class="new-value">${currentValue || 'ÿÆÿßŸÑ€å'}</span>
                            </div>
                        </div>
                                </div>
                            `;
                $('#changeList').append(changeHtml);
            } else {
                $changeItem.find('.original-value').text(originalValue || 'ÿÆÿßŸÑ€å');
                $changeItem.find('.new-value').text(currentValue || 'ÿÆÿßŸÑ€å');
            }
        }

        // üè• Medical Environment: Remove Change
        function removeChange(fieldName) {
            var changeId = 'change_' + fieldName;
            $('#' + changeId).remove();
        }

        // üè• Medical Environment: Update Change Tracking Display
        function updateChangeTracking() {
            var $changeTracking = $('#changeTracking');
            var $changeList = $('#changeList');
            
            if ($changeList.children().length > 0) {
                $changeTracking.show();
            } else {
                $changeTracking.hide();
            }
        }

        // üè• Medical Environment: Get Field Display Name
        function getFieldDisplayName(fieldName) {
            var fieldNames = {
                'InsuranceProviderId': 'ÿ®€åŸÖŸá‚Äå⁄Øÿ∞ÿßÿ± Ÿæÿß€åŸá',
                'PrimaryInsuranceProviderId': 'ÿ®€åŸÖŸá‚Äå⁄Øÿ∞ÿßÿ± Ÿæÿß€åŸá',
                'InsurancePlanId': 'ÿ∑ÿ±ÿ≠ ÿ®€åŸÖŸá Ÿæÿß€åŸá',
                'PrimaryInsurancePlanId': 'ÿ∑ÿ±ÿ≠ ÿ®€åŸÖŸá Ÿæÿß€åŸá',
                'SupplementaryInsuranceProviderId': 'ÿ®€åŸÖŸá‚Äå⁄Øÿ∞ÿßÿ± ÿ™⁄©ŸÖ€åŸÑ€å',
                'SupplementaryInsurancePlanId': 'ÿ∑ÿ±ÿ≠ ÿ®€åŸÖŸá ÿ™⁄©ŸÖ€åŸÑ€å',
                'PolicyNumber': 'ÿ¥ŸÖÿßÿ±Ÿá ÿ®€åŸÖŸá‚ÄåŸÜÿßŸÖŸá',
                'SupplementaryPolicyNumber': 'ÿ¥ŸÖÿßÿ±Ÿá ÿ®€åŸÖŸá‚ÄåŸÜÿßŸÖŸá ÿ™⁄©ŸÖ€åŸÑ€å',
                            'StartDateShamsi': 'ÿ™ÿßÿ±€åÿÆ ÿ¥ÿ±Ÿàÿπ',
                'EndDateShamsi': 'ÿ™ÿßÿ±€åÿÆ Ÿæÿß€åÿßŸÜ'
            };
            
            return fieldNames[fieldName] || fieldName;
        }

        // üè• Medical Environment: Form Submission
        function initializeFormSubmission() {
            $('#patientInsuranceEditForm').on('submit', function(e) {
                e.preventDefault();
                
                var $form = $(this);
                var $submitBtn = $('#saveEditButton');
                var $loadingIndicator = $('#editLoadingIndicator');
                
                // Validate form before submission
                if (!validateEditForm()) {
                    showErrorMessage('ŸÑÿ∑ŸÅÿßŸã ÿ™ŸÖÿßŸÖ ŸÅ€åŸÑÿØŸáÿß€å ÿßŸÑÿ≤ÿßŸÖ€å ÿ±ÿß Ÿæÿ± ⁄©ŸÜ€åÿØ');
                    return;
                }
                
                // Show loading state
                $submitBtn.prop('disabled', true).html('<i class="fas fa-spinner fa-spin me-2"></i>ÿØÿ± ÿ≠ÿßŸÑ ÿ∞ÿÆ€åÿ±Ÿá...');
                $loadingIndicator.show();
                $form.addClass('medical-loading');
                
                // Prepare form data
                var formData = {
                    PatientInsuranceId: $('#PatientInsuranceId').val(),
                    PatientId: $('#PatientId').val(),
                    InsuranceProviderId: $('#PrimaryInsuranceProviderId').val(),
                    InsurancePlanId: $('#PrimaryInsurancePlanId').val(),
                    SupplementaryInsuranceProviderId: $('#SupplementaryInsuranceProviderId').val() || null,
                    SupplementaryInsurancePlanId: $('#SupplementaryInsurancePlanId').val() || null,
                    PolicyNumber: $('#PolicyNumber').val(),
                    SupplementaryPolicyNumber: $('#SupplementaryPolicyNumber').val() || null,
                    StartDateShamsi: $('#StartDateShamsi').val(),
                    EndDateShamsi: $('#EndDateShamsi').val(),
                    IsPrimary: true,
                    IsActive: true
                };
                
                // Remove null values to avoid issues
                Object.keys(formData).forEach(key => {
                    if (formData[key] === null || formData[key] === '' || formData[key] === undefined) {
                        delete formData[key];
                    }
                });
                
                // Ensure required fields are present
                if (!formData.InsuranceProviderId || !formData.InsurancePlanId) {
                    showErrorMessage('ŸÑÿ∑ŸÅÿßŸã ÿ®€åŸÖŸá‚Äå⁄Øÿ∞ÿßÿ± Ÿà ÿ∑ÿ±ÿ≠ ÿ®€åŸÖŸá Ÿæÿß€åŸá ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ');
                    return;
                }
                
                // Validate supplementary insurance consistency
                if (formData.SupplementaryInsuranceProviderId && !formData.SupplementaryInsurancePlanId) {
                    showErrorMessage('ŸÑÿ∑ŸÅÿßŸã ÿ∑ÿ±ÿ≠ ÿ®€åŸÖŸá ÿ™⁄©ŸÖ€åŸÑ€å ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ');
                    return;
                }
                
                if (!formData.SupplementaryInsuranceProviderId && formData.SupplementaryInsurancePlanId) {
                    showErrorMessage('ŸÑÿ∑ŸÅÿßŸã ÿ®€åŸÖŸá‚Äå⁄Øÿ∞ÿßÿ± ÿ™⁄©ŸÖ€åŸÑ€å ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ');
                    return;
                }
                
                // Add anti-forgery token
                formData['__RequestVerificationToken'] = $form.find('input[name="__RequestVerificationToken"]').val();
                
                // Convert to FormData for proper submission
                var formDataObj = new FormData();
                Object.keys(formData).forEach(key => {
                    formDataObj.append(key, formData[key]);
                });
                
                console.log('üè• Medical Environment: Submitting form data:', formData);
                
                // Submit form
                        $.ajax({
                    url: $form.attr('action'),
                            type: 'POST',
                    data: formDataObj,
                    processData: false,
                    contentType: false,
                            success: function(response) {
                        console.log('üè• Medical Environment: Form submission response:', response);
                        
                                if (response.success) {
                            showSuccessMessage('ÿ™ÿ∫€å€åÿ±ÿßÿ™ ÿ®€åŸÖŸá ÿ®€åŸÖÿßÿ± ÿ®ÿß ŸÖŸàŸÅŸÇ€åÿ™ ÿ∞ÿÆ€åÿ±Ÿá ÿ¥ÿØ');
                            
                            // Redirect to details page after a short delay
                                    setTimeout(function() {
                                window.location.href = '@Url.Action("Details", "PatientInsurance", new { id = Model.PatientInsuranceId })';
                                    }, 2000);
                                } else {
                            showErrorMessage(response.message || 'ÿÆÿ∑ÿß ÿØÿ± ÿ∞ÿÆ€åÿ±Ÿá ÿ™ÿ∫€å€åÿ±ÿßÿ™');
                                }
                            },
                            error: function(xhr, status, error) {
                        console.error('ÿÆÿ∑ÿß ÿØÿ± ÿ∞ÿÆ€åÿ±Ÿá ÿ™ÿ∫€å€åÿ±ÿßÿ™:', error);
                        console.error('Response:', xhr.responseText);
                        showErrorMessage('ÿÆÿ∑ÿß ÿØÿ± ÿ∞ÿÆ€åÿ±Ÿá ÿ™ÿ∫€å€åÿ±ÿßÿ™ ÿ®€åŸÖŸá ÿ®€åŸÖÿßÿ±');
                    },
                    complete: function() {
                        // Hide loading state
                        $submitBtn.prop('disabled', false).html('<i class="fas fa-save me-2"></i>ÿ∞ÿÆ€åÿ±Ÿá ÿ™ÿ∫€å€åÿ±ÿßÿ™');
                        $loadingIndicator.hide();
                        $form.removeClass('medical-loading');
                    }
                });
            });
        }

        // üè• Medical Environment: Validate Edit Form
        function validateEditForm() {
            var isValid = true;
            var $form = $('#patientInsuranceEditForm');
            
            // Validate required fields
            var requiredFields = [
                'InsuranceProviderId',
                'InsurancePlanId',
                'StartDateShamsi'
            ];
            
            requiredFields.forEach(function(fieldName) {
                var $field = $form.find('[name="' + fieldName + '"]');
                if ($field.length && !$field.val()) {
                    $field.addClass('is-invalid');
                    isValid = false;
                } else {
                    $field.removeClass('is-invalid');
                }
            });
            
            // Validate supplementary insurance if provided
            var supplementaryProvider = $('#SupplementaryInsuranceProviderId').val();
            var supplementaryPlan = $('#SupplementaryInsurancePlanId').val();
            
            if (supplementaryProvider && !supplementaryPlan) {
                $('#SupplementaryInsurancePlanId').addClass('is-invalid');
                isValid = false;
            } else {
                $('#SupplementaryInsurancePlanId').removeClass('is-invalid');
            }
            
            if (!supplementaryProvider && supplementaryPlan) {
                $('#SupplementaryInsuranceProviderId').addClass('is-invalid');
                isValid = false;
            } else {
                $('#SupplementaryInsuranceProviderId').removeClass('is-invalid');
            }
            
            return isValid;
            }
            
            // üè• Medical Environment: Show Success Message
        function showSuccessMessage(message) {
                var alertHtml = `
                    <div class="alert alert-success alert-dismissible fade show" role="alert">
                        <i class="fas fa-check-circle"></i> ${message}
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>`;
                $('.medical-form-container').prepend(alertHtml);
                
                setTimeout(function() {
                    $('.alert-success').fadeOut();
                }, 5000);
            }
            
            // üè• Medical Environment: Show Error Message
        function showErrorMessage(message) {
                var alertHtml = `
                    <div class="alert alert-danger alert-dismissible fade show" role="alert">
                        <i class="fas fa-exclamation-circle"></i> ${message}
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>`;
                $('.medical-form-container').prepend(alertHtml);
                
                setTimeout(function() {
                    $('.alert-danger').fadeOut();
                }, 5000);
            }
    </script>
}
