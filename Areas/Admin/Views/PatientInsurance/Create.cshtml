@model ClinicApp.ViewModels.Insurance.PatientInsurance.PatientInsuranceCreateEditViewModel
@{
    ViewBag.Title = "ÿßŸÅÿ≤ŸàÿØŸÜ ÿ®€åŸÖŸá ÿ®€åŸÖÿßÿ± ÿ¨ÿØ€åÿØ";
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
}

@section Styles {
    <link href="~/Content/css/patient-insurance.css" rel="stylesheet" />
    <link href="~/Content/css/patient-insurance-enhanced.css" rel="stylesheet" />
    <link href="~/Content/plugins/select2/css/select2.min.css" rel="stylesheet" />
    <link href="~/Content/plugins/select2/css/select2-bootstrap4.min.css" rel="stylesheet" />
    
    <!-- üè• Medical Environment - Advanced Admin Styles -->
    <style>
        /* üè• Advanced Admin Layout */
        .admin-insurance-container {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 2rem 0;
        }
        
        .admin-form-wrapper {
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            margin: 0 auto;
            max-width: 1400px;
        }
        
        .admin-form-header {
            background: linear-gradient(135deg, #2c5aa0 0%, #1e3a5f 100%);
            color: white;
            padding: 2rem;
            text-align: center;
        }
        
        .admin-form-header h1 {
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
        }
        
        .admin-form-header p {
            font-size: 1.2rem;
            opacity: 0.9;
            margin-bottom: 0;
        }
        
        .admin-form-body {
            padding: 3rem;
        }
        
        .medical-form-section {
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            border: 2px solid #dee2e6;
            border-radius: 15px;
            padding: 2.5rem;
            margin-bottom: 2rem;
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.08);
            transition: all 0.3s ease;
        }
        
        .medical-form-section:hover {
            transform: translateY(-2px);
            box-shadow: 0 12px 35px rgba(0, 0, 0, 0.12);
        }
        
        .medical-section-title {
            color: #2c5aa0;
            font-weight: 700;
            font-size: 1.5rem;
            margin-bottom: 1.5rem;
            border-bottom: 3px solid #2c5aa0;
            padding-bottom: 0.75rem;
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }
        
        .medical-section-title i {
            font-size: 1.8rem;
            color: #2c5aa0;
        }
        
        /* üè• Advanced Patient Selection */
        .patient-selection-container {
            background: linear-gradient(135deg, #e3f2fd 0%, #f3e5f5 100%);
            border: 2px solid #2196f3;
            border-radius: 15px;
            padding: 2rem;
            margin-bottom: 2rem;
            position: relative;
            overflow: hidden;
        }
        
        .patient-selection-container::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, #2196f3, #9c27b0, #ff9800);
        }
        
        /* üè• Advanced Select2 Patient Selection */
        .patient-select2-advanced {
            width: 100% !important;
        }
        
        .select2-container--default .select2-selection--single {
            height: 60px !important;
            border: 2px solid #e0e0e0 !important;
            border-radius: 12px !important;
            padding: 0.5rem !important;
            background: white !important;
            transition: all 0.3s ease !important;
        }
        
        .select2-container--default .select2-selection--single:focus {
            border-color: #2196f3 !important;
            box-shadow: 0 0 0 0.3rem rgba(33, 150, 243, 0.25) !important;
        }
        
        .select2-container--default .select2-selection--single .select2-selection__rendered {
            line-height: 50px !important;
            padding-left: 0 !important;
            color: #333 !important;
            font-size: 1.1rem !important;
        }
        
        .select2-container--default .select2-selection--single .select2-selection__placeholder {
            color: #999 !important;
        }
        
        .select2-container--default .select2-selection--single .select2-selection__arrow {
            height: 50px !important;
            right: 15px !important;
        }
        
        .select2-dropdown {
            border: 2px solid #e0e0e0 !important;
            border-radius: 12px !important;
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15) !important;
        }
        
        .select2-results__option {
            padding: 1rem 1.5rem !important;
            border-bottom: 1px solid #f0f0f0 !important;
            transition: all 0.2s ease !important;
        }
        
        .select2-results__option:hover {
            background: #f8f9fa !important;
            transform: translateX(5px) !important;
        }
        
        .select2-results__option--highlighted {
            background: #2196f3 !important;
            color: white !important;
        }
        
        .select2-results__option--selected {
            background: #4caf50 !important;
            color: white !important;
        }
        
        /* üè• Patient Info Display */
        .selected-patient-info {
            margin-top: 1.5rem;
            animation: slideInUp 0.3s ease;
        }
        
        .patient-avatar-large {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            background: linear-gradient(135deg, #4caf50, #8bc34a);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 2rem;
            margin: 0 auto;
        }
        
        .patient-details-complete {
            padding: 1rem 0;
        }
        
        .patient-details-complete h5 {
            color: #2c5aa0;
            font-weight: 700;
            margin-bottom: 1rem;
        }
        
        .patient-details-complete .row {
            margin-bottom: 0.5rem;
        }
        
        .patient-details-complete strong {
            color: #333;
            font-weight: 600;
        }
        
        .patient-details-complete span {
            color: #666;
        }
        
        /* üè• Select2 Template Styles */
        .patient-select2-result {
            display: flex;
            align-items: center;
            gap: 1rem;
            padding: 0.5rem 0;
        }
        
        .patient-avatar-small {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: linear-gradient(135deg, #2196f3, #9c27b0);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 700;
            font-size: 1rem;
        }
        
        .patient-info-small {
            flex: 1;
        }
        
        .patient-name-small {
            font-weight: 600;
            color: #333;
            margin-bottom: 0.25rem;
        }
        
        .patient-details-small {
            font-size: 0.9rem;
            color: #666;
            line-height: 1.4;
        }
        
        .patient-details-complete .row {
            margin-bottom: 0.75rem;
        }
        
        .patient-details-complete .row:last-child {
            margin-bottom: 0;
        }
        
        .patient-search-wrapper {
            position: relative;
            margin-bottom: 1.5rem;
        }
        
        .patient-search-input {
            width: 100%;
            padding: 1rem 1.5rem;
            border: 2px solid #e0e0e0;
            border-radius: 12px;
            font-size: 1.1rem;
            transition: all 0.3s ease;
            background: white;
        }
        
        .patient-search-input:focus {
            border-color: #2196f3;
            box-shadow: 0 0 0 0.3rem rgba(33, 150, 243, 0.25);
            outline: none;
        }
        
        .patient-search-icon {
            position: absolute;
            right: 1rem;
            top: 50%;
            transform: translateY(-50%);
            color: #2196f3;
            font-size: 1.2rem;
        }
        
        .patient-results {
            background: white;
            border: 1px solid #e0e0e0;
            border-radius: 12px;
            max-height: 300px;
            overflow-y: auto;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            display: none;
        }
        
        .patient-result-item {
            padding: 1rem 1.5rem;
            border-bottom: 1px solid #f0f0f0;
            cursor: pointer;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            gap: 1rem;
        }
        
        .patient-result-item:hover {
            background: #f8f9fa;
            transform: translateX(5px);
        }
        
        .patient-result-item:last-child {
            border-bottom: none;
        }
        
        .patient-avatar {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            background: linear-gradient(135deg, #2196f3, #9c27b0);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 700;
            font-size: 1.2rem;
        }
        
        .patient-info {
            flex: 1;
        }
        
        .patient-name {
            font-weight: 600;
            color: #333;
            margin-bottom: 0.25rem;
        }
        
        .patient-details {
            font-size: 0.9rem;
            color: #666;
        }
        
        .selected-patient {
            background: linear-gradient(135deg, #4caf50, #8bc34a);
            color: white;
            padding: 1.5rem;
            border-radius: 12px;
            margin-top: 1rem;
            display: none;
        }
        
        .selected-patient.show {
            display: block;
            animation: slideInUp 0.3s ease;
        }
        
        @@keyframes slideInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        .required-indicator {
            color: #dc3545;
            font-weight: bold;
        }
        
        .medical-form-control {
            border: 2px solid #dee2e6;
            border-radius: 6px;
            padding: 0.75rem 1rem;
            transition: all 0.3s ease;
        }
        
        .medical-form-control:focus {
            border-color: #2c5aa0;
            box-shadow: 0 0 0 0.2rem rgba(44, 90, 160, 0.25);
        }
        
        .medical-info-box {
            background: #e3f2fd;
            border: 1px solid #bbdefb;
            border-radius: 6px;
            padding: 1rem;
            margin-top: 0.5rem;
        }
        
        .medical-validation-alert {
            border-left: 4px solid #dc3545;
            background: #f8d7da;
            border-color: #f5c6cb;
        }
        
        .medical-validation-list {
            list-style: none;
            padding: 0;
        }
        
        .medical-validation-list li {
            padding: 0.25rem 0;
            color: #721c24;
        }
        
        .medical-validation-message {
            font-size: 0.875rem;
            margin-top: 0.25rem;
        }
        
        /* üè• Advanced Insurance Selection */
        .insurance-selection-container {
            background: linear-gradient(135deg, #fff3e0 0%, #fce4ec 100%);
            border: 2px solid #ff9800;
            border-radius: 15px;
            padding: 2rem;
            margin-bottom: 2rem;
        }
        
        .insurance-type-tabs {
            display: flex;
            gap: 1rem;
            margin-bottom: 2rem;
        }
        
        .insurance-tab {
            flex: 1;
            padding: 1rem 2rem;
            background: white;
            border: 2px solid #e0e0e0;
            border-radius: 12px;
            cursor: pointer;
            transition: all 0.3s ease;
            text-align: center;
            font-weight: 600;
        }
        
        .insurance-tab.active {
            background: linear-gradient(135deg, #4caf50, #8bc34a);
            color: white;
            border-color: #4caf50;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(76, 175, 80, 0.3);
        }
        
        .insurance-tab:hover:not(.active) {
            background: #f8f9fa;
            border-color: #ff9800;
        }
        
        .insurance-content {
            display: none;
        }
        
        .insurance-content.active {
            display: block;
            animation: fadeInUp 0.3s ease;
        }
        
        @@keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        .btn-medical-primary {
            background: linear-gradient(135deg, #2c5aa0 0%, #1e3a5f 100%);
            border: none;
            color: white;
            font-weight: 700;
            padding: 1rem 3rem;
            border-radius: 12px;
            transition: all 0.3s ease;
            font-size: 1.1rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        .btn-medical-primary:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(44, 90, 160, 0.4);
        }
        
        .btn-medical-secondary {
            background: linear-gradient(135deg, #ff9800 0%, #f57c00 100%);
            border: none;
            color: white;
            font-weight: 700;
            padding: 1rem 3rem;
            border-radius: 12px;
            transition: all 0.3s ease;
            font-size: 1.1rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        .btn-medical-secondary:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(255, 152, 0, 0.4);
        }
        
        .medical-form-group {
            margin-bottom: 1.5rem;
        }
        
        .medical-form-label {
            font-weight: 600;
            color: #495057;
            margin-bottom: 0.5rem;
        }
        
        .medical-info-text {
            color: #1976d2;
            font-size: 0.9rem;
        }
        
        .medical-info-text ul {
            margin: 0.5rem 0 0 1rem;
        }
        
        .medical-info-text li {
            margin-bottom: 0.25rem;
        }
        
        /* Loading States */
        .medical-loading {
            position: relative;
            opacity: 0.6;
            pointer-events: none;
        }
        
        .medical-loading::after {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 20px;
            height: 20px;
            margin: -10px 0 0 -10px;
            border: 2px solid #f3f3f3;
            border-top: 2px solid #2c5aa0;
            border-radius: 50%;
            animation: medical-spin 1s linear infinite;
        }
        
        @@keyframes medical-spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        /* Responsive Design */
        @@media (max-width: 768px) {
            .medical-form-section {
                padding: 1rem;
            }
            
            .btn-medical-primary {
                width: 100%;
                margin-bottom: 1rem;
            }
        }
    </style>
}

<div class="admin-insurance-container">
    <div class="admin-form-wrapper">
        <!-- üè• Advanced Admin Header -->
        <div class="admin-form-header">
            <h1>
                <i class="fas fa-user-md me-3"></i>
                ÿßŸÅÿ≤ŸàÿØŸÜ ÿ®€åŸÖŸá ÿ®€åŸÖÿßÿ± ÿ¨ÿØ€åÿØ
            </h1>
            <p>ÿ≥€åÿ≥ÿ™ŸÖ ŸÖÿØ€åÿ±€åÿ™ ÿ®€åŸÖŸá‚ÄåŸáÿß€å ÿ®€åŸÖÿßÿ±ÿßŸÜ - ŸÖÿ≠€åÿ∑ ÿßÿØŸÖ€åŸÜ Ÿæ€åÿ¥ÿ±ŸÅÿ™Ÿá</p>
        </div>
        
        <!-- üè• Advanced Admin Body -->
        <div class="admin-form-body">

            <!-- üè• Step 1: Advanced Patient Selection -->
            <div class="medical-form-section">
                <h4 class="medical-section-title">
                    <i class="fas fa-user-plus"></i>
                    ŸÖÿ±ÿ≠ŸÑŸá €±: ÿßŸÜÿ™ÿÆÿßÿ® ÿ®€åŸÖÿßÿ±
                    <span class="required-indicator">*</span>
                </h4>
                
                <div class="patient-selection-container">
                    <div class="form-group">
                        <label class="form-label">ÿßŸÜÿ™ÿÆÿßÿ® ÿ®€åŸÖÿßÿ±:</label>
                        @Html.DropDownListFor(m => m.PatientId, new List<SelectListItem>(), "ÿ¨ÿ≥ÿ™ÿ¨Ÿà Ÿà ÿßŸÜÿ™ÿÆÿßÿ® ÿ®€åŸÖÿßÿ±...", new { 
                            @class = "form-control patient-select2-advanced", 
                            required = "required",
                            id = "PatientId",
                            data_placeholder = "ÿ¨ÿ≥ÿ™ÿ¨Ÿà ÿØÿ± ÿ®€åŸÖÿßÿ±ÿßŸÜ: ŸÜÿßŸÖÿå ŸÜÿßŸÖ ÿÆÿßŸÜŸàÿßÿØ⁄Ø€åÿå ⁄©ÿØ ŸÖŸÑ€å €åÿß ÿ¥ŸÖÿßÿ±Ÿá ÿ™ŸÑŸÅŸÜ...",
                            data_allow_clear = "true"
                        })
                        @Html.ValidationMessageFor(m => m.PatientId, "", new { @class = "text-danger" })
                    </div>
                    
                    <!-- ŸÜŸÖÿß€åÿ¥ ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿ®€åŸÖÿßÿ± ÿßŸÜÿ™ÿÆÿßÿ® ÿ¥ÿØŸá -->
                    <div class="selected-patient-info" id="selectedPatientInfo" style="display: none;">
                        <div class="card border-success">
                            <div class="card-header bg-success text-white">
                                <h6 class="mb-0">
                                    <i class="fas fa-user-check"></i> ÿ®€åŸÖÿßÿ± ÿßŸÜÿ™ÿÆÿßÿ® ÿ¥ÿØŸá
                                </h6>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-3">
                                        <div class="patient-avatar-large">
                                            <i class="fas fa-user"></i>
                                        </div>
                                    </div>
                                    <div class="col-md-9">
                                        <div class="patient-details-complete">
                                            <h5 class="patient-name" id="selectedPatientName">ŸÜÿßŸÖ ÿ®€åŸÖÿßÿ±</h5>
                                            <div class="row">
                                                <div class="col-md-6">
                                                    <strong>ŸÜÿßŸÖ Ÿà ŸÜÿßŸÖ ÿÆÿßŸÜŸàÿßÿØ⁄Ø€å:</strong> <span id="selectedPatientFullName">-</span>
                                                </div>
                                                <div class="col-md-6">
                                                    <strong>⁄©ÿØ ŸÖŸÑ€å:</strong> <span id="selectedPatientNationalCode">-</span>
                                                </div>
                                            </div>
                                            <div class="row mt-2">
                                                <div class="col-md-6">
                                                    <strong>ŸÜÿßŸÖ ŸæÿØÿ±:</strong> <span id="selectedPatientFatherName">-</span>
                                                </div>
                                                <div class="col-md-6">
                                                    <strong>ÿ¥ŸÖÿßÿ±Ÿá ÿ™ŸÑŸÅŸÜ:</strong> <span id="selectedPatientPhone">-</span>
                                                </div>
                                            </div>
                                            <div class="row mt-2">
                                                <div class="col-md-6">
                                                    <strong>ÿ™ÿßÿ±€åÿÆ ÿ™ŸàŸÑÿØ Ÿà ÿ≥ŸÜ:</strong> <span id="selectedPatientBirthDate">-</span>
                                                </div>
                                                <div class="col-md-6">
                                                    <strong>ÿ¨ŸÜÿ≥€åÿ™:</strong> <span id="selectedPatientGender">-</span>
                                                </div>
                                            </div>
                                            <div class="row mt-2" id="additionalPatientInfo" style="display: none;">
                                                <div class="col-md-12">
                                                    <strong>ÿ¢ÿØÿ±ÿ≥:</strong> <span id="selectedPatientAddress">-</span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- üè• Step 2: Advanced Insurance Selection -->
            <div class="medical-form-section patient-insurance-form">
                <h4 class="medical-section-title">
                    <i class="fas fa-shield-alt"></i>
                    ŸÖÿ±ÿ≠ŸÑŸá €≤: ÿßŸÜÿ™ÿÆÿßÿ® ŸÜŸàÿπ ÿ®€åŸÖŸá
                    <span class="required-indicator">*</span>
                </h4>
                
                <div class="insurance-selection-container">
                    <!-- Insurance Status Containers -->
                    <div class="row mb-3">
                        <div class="col-md-6" id="primaryInsuranceStatus"></div>
                        <div class="col-md-6" id="supplementaryInsuranceStatus"></div>
                    </div>
                    
                    <div class="insurance-type-tabs">
                        <div class="insurance-tab active" data-type="primary">
                            <i class="fas fa-star me-2"></i>
                            ÿ®€åŸÖŸá Ÿæÿß€åŸá (ÿßÿµŸÑ€å)
                        </div>
                        <div class="insurance-tab" data-type="supplementary">
                            <i class="fas fa-plus-circle me-2"></i>
                            ÿ®€åŸÖŸá ÿ™⁄©ŸÖ€åŸÑ€å
                        </div>
                    </div>
                    
                    <!-- ÿ®€åŸÖŸá Ÿæÿß€åŸá -->
                    <div class="insurance-content active" id="primaryInsuranceContent">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="form-label">ÿßŸÜÿ™ÿÆÿßÿ® ÿ®€åŸÖŸá‚Äå⁄Øÿ∞ÿßÿ± Ÿæÿß€åŸá:</label>
                        <select id="PrimaryInsuranceProviderId" 
                                name="InsuranceProviderId" 
                                class="form-control medical-form-control" 
                                required="required"
                                data-medical-field="insurance-provider">
                            <option value="">ÿßŸÜÿ™ÿÆÿßÿ® ÿ®€åŸÖŸá‚Äå⁄Øÿ∞ÿßÿ± Ÿæÿß€åŸá</option>
                        </select>
                        @Html.ValidationMessageFor(m => m.InsuranceProviderId, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="form-label">ÿßŸÜÿ™ÿÆÿßÿ® ÿ∑ÿ±ÿ≠ ÿ®€åŸÖŸá Ÿæÿß€åŸá:</label>
                        <select id="PrimaryInsurancePlanId" 
                                name="InsurancePlanId" 
                                class="form-control medical-form-control" 
                                required="required"
                                data-medical-field="insurance-plan"
                                disabled>
                            <option value="">ÿßÿ®ÿ™ÿØÿß ÿ®€åŸÖŸá‚Äå⁄Øÿ∞ÿßÿ± ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ</option>
                        </select>
                        @Html.ValidationMessageFor(m => m.InsurancePlanId, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="form-label">ÿ¥ŸÖÿßÿ±Ÿá ÿ®€åŸÖŸá‚ÄåŸÜÿßŸÖŸá:</label>
                                    <input type="text" 
                                           id="PolicyNumber" 
                                           name="PolicyNumber" 
                                           class="form-control medical-form-control" 
                                           placeholder="ÿÆŸàÿØ⁄©ÿßÿ± ÿ®ÿß ⁄©ÿØ ŸÖŸÑ€å Ÿæÿ± ŸÖ€å‚Äåÿ¥ŸàÿØ"
                                           readonly
                                           data-medical-field="policy-number">
                                    @Html.ValidationMessageFor(m => m.PolicyNumber, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="form-label">ÿ¥ŸÖÿßÿ±Ÿá ÿ®€åŸÖŸá‚ÄåŸÜÿßŸÖŸá (ÿ™⁄©ŸÖ€åŸÑ€å):</label>
                                    <input type="text" 
                                           id="SupplementaryPolicyNumber" 
                                           name="SupplementaryPolicyNumber" 
                                           class="form-control medical-form-control" 
                                           placeholder="ÿßÿÆÿ™€åÿßÿ±€å - ÿ®ÿ±ÿß€å ÿ®€åŸÖŸá ÿ™⁄©ŸÖ€åŸÑ€å"
                                           data-medical-field="supplementary-policy-number">
                                    @Html.ValidationMessageFor(m => m.SupplementaryPolicyNumber, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- ÿ®€åŸÖŸá ÿ™⁄©ŸÖ€åŸÑ€å (ÿßÿÆÿ™€åÿßÿ±€å) -->
                    <div class="insurance-content" id="supplementaryInsuranceContent">
                        <div class="alert alert-info">
                            <i class="fas fa-info-circle"></i>
                            <strong>ŸÜ⁄©ÿ™Ÿá:</strong> ÿ®€åŸÖŸá ÿ™⁄©ŸÖ€åŸÑ€å ÿßÿÆÿ™€åÿßÿ±€å ÿßÿ≥ÿ™. ÿØÿ± ÿµŸàÿ±ÿ™ ŸÜ€åÿßÿ≤ ŸÖ€å‚Äåÿ™ŸàÿßŸÜ€åÿØ ÿ®€åŸÖŸá ÿ™⁄©ŸÖ€åŸÑ€å ÿßÿ∂ÿßŸÅŸá ⁄©ŸÜ€åÿØ.
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="form-label">ÿßŸÜÿ™ÿÆÿßÿ® ÿ®€åŸÖŸá‚Äå⁄Øÿ∞ÿßÿ± ÿ™⁄©ŸÖ€åŸÑ€å:</label>
                        <select id="SupplementaryInsuranceProviderId" 
                                name="SupplementaryInsuranceProviderId" 
                                class="form-control medical-form-control" 
                                data-medical-field="supplementary-insurance-provider"
                                data-optional="true">
                            <option value="">ÿßŸÜÿ™ÿÆÿßÿ® ÿ®€åŸÖŸá‚Äå⁄Øÿ∞ÿßÿ± ÿ™⁄©ŸÖ€åŸÑ€å (ÿßÿÆÿ™€åÿßÿ±€å)</option>
                        </select>
                        @Html.ValidationMessageFor(m => m.SupplementaryInsuranceProviderId, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="form-label">ÿßŸÜÿ™ÿÆÿßÿ® ÿ∑ÿ±ÿ≠ ÿ®€åŸÖŸá ÿ™⁄©ŸÖ€åŸÑ€å:</label>
                        <select id="SupplementaryInsurancePlanId" 
                                name="SupplementaryInsurancePlanId" 
                                class="form-control medical-form-control" 
                                data-medical-field="supplementary-insurance-plan"
                                data-optional="true"
                                disabled>
                            <option value="">ÿßÿ®ÿ™ÿØÿß ÿ®€åŸÖŸá‚Äå⁄Øÿ∞ÿßÿ± ÿ™⁄©ŸÖ€åŸÑ€å ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ</option>
                        </select>
                        @Html.ValidationMessageFor(m => m.SupplementaryInsurancePlanId, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- üè• Step 3: Insurance Details -->
            <div class="medical-form-section">
                <h4 class="medical-section-title">
                    <i class="fas fa-calendar-alt"></i>
                    ŸÖÿ±ÿ≠ŸÑŸá €≥: ÿ¨ÿ≤ÿ¶€åÿßÿ™ ÿ®€åŸÖŸá
                </h4>
                
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="form-label">ÿ™ÿßÿ±€åÿÆ ÿ¥ÿ±Ÿàÿπ ÿßÿπÿ™ÿ®ÿßÿ±:</label>
                            @Html.TextBoxFor(m => m.StartDateShamsi, new { 
                                @class = "form-control persian-datepicker medical-form-control", 
                                placeholder = "ÿ™ÿßÿ±€åÿÆ ÿ¥ÿ±Ÿàÿπ ÿßÿπÿ™ÿ®ÿßÿ± (ÿ¥ŸÖÿ≥€å)", 
                                required = "required",
                                id = "StartDateShamsi"
                            })
                            @Html.ValidationMessageFor(m => m.StartDateShamsi, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="form-label">ÿ™ÿßÿ±€åÿÆ Ÿæÿß€åÿßŸÜ ÿßÿπÿ™ÿ®ÿßÿ±:</label>
                            @Html.TextBoxFor(m => m.EndDateShamsi, new { 
                                @class = "form-control persian-datepicker medical-form-control", 
                                placeholder = "ÿ™ÿßÿ±€åÿÆ Ÿæÿß€åÿßŸÜ ÿßÿπÿ™ÿ®ÿßÿ± (ÿ¥ŸÖÿ≥€å) - ÿßÿÆÿ™€åÿßÿ±€å", 
                                id = "EndDateShamsi"
                            })
                            @Html.ValidationMessageFor(m => m.EndDateShamsi, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                
    <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <div class="form-check">
                                @Html.CheckBoxFor(m => m.IsPrimary, new { 
                                    @class = "form-check-input",
                                    id = "IsPrimary"
                                })
                                <label class="form-check-label" for="IsPrimary">
                                    ÿ®€åŸÖŸá ÿßÿµŸÑ€å
                                </label>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <div class="form-check">
                                @Html.CheckBoxFor(m => m.IsActive, new { 
                                    @class = "form-check-input",
                                    id = "IsActive"
                                })
                                <label class="form-check-label" for="IsActive">
                                    ÿ®€åŸÖŸá ŸÅÿπÿßŸÑ
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- üè• Form Actions -->
            <div class="text-center mt-5">
                @using (Html.BeginForm("Create", "PatientInsurance", FormMethod.Post, new { @class = "needs-validation", novalidate = "novalidate", id = "patientInsuranceCreateForm" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(m => m.PatientId)
                    @Html.HiddenFor(m => m.StartDate)
                    @Html.HiddenFor(m => m.EndDate)
                    @Html.HiddenFor(m => m.InsuranceProviderId)
                    @Html.HiddenFor(m => m.SupplementaryInsuranceProviderId)
                    @Html.HiddenFor(m => m.SupplementaryInsurancePlanId)

                    <button type="submit" class="btn btn-medical-primary btn-lg me-3" id="saveButton">
                        <i class="fas fa-save me-2"></i> ÿ∞ÿÆ€åÿ±Ÿá ÿ®€åŸÖŸá ÿ®€åŸÖÿßÿ±
                    </button>
                    <button type="button" class="btn btn-medical-secondary btn-lg me-3" id="createDefaultFreeInsuranceBtn">
                        <i class="fas fa-plus-circle me-2"></i> ÿß€åÿ¨ÿßÿØ ÿ®€åŸÖŸá Ÿæ€åÿ¥‚ÄåŸÅÿ±ÿ∂ ÿ¢ÿ≤ÿßÿØ
                    </button>
                    <button type="button" class="btn btn-info btn-lg me-3" id="validatePatientInsuranceBtn">
                        <i class="fas fa-check-circle me-2"></i> ÿßÿπÿ™ÿ®ÿßÿ±ÿ≥ŸÜÿ¨€å ÿ®€åŸÖŸá ÿ®€åŸÖÿßÿ±
                    </button>
                    <a href="@Url.Action("Index", "PatientInsurance")" class="btn btn-secondary btn-lg">
                        <i class="fas fa-times me-2"></i> ÿßŸÜÿµÿ±ÿßŸÅ
                    </a>
                    
                    <!-- Loading Indicator -->
                    <div class="text-center mt-3" id="loadingIndicator" style="display: none;">
                        <div class="spinner-border text-primary" role="status">
                            <span class="sr-only">ÿØÿ± ÿ≠ÿßŸÑ ÿ∞ÿÆ€åÿ±Ÿá...</span>
                        </div>
                        <p class="mt-2 text-muted">ÿØÿ± ÿ≠ÿßŸÑ ÿ∞ÿÆ€åÿ±Ÿá ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿ®€åŸÖŸá ÿ®€åŸÖÿßÿ±...</p>
                    </div>
                }
            </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <link href="~/Content/plugins/persian-datepicker/persian-datepicker.min.css" rel="stylesheet" />
    <style>
        /* Enhanced Fallback Date Input Styling */
        .form-control.is-invalid {
            border-color: #dc3545;
            box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25);
        }
        
        .persian-date-input {
            background-color: #f8f9fa;
            border: 2px solid #e9ecef;
            transition: all 0.3s ease;
        }
        
        .persian-date-input:focus {
            background-color: #fff;
            border-color: #007bff;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        }
        
        .persian-date-input[placeholder*="ŸÖÿ´ÿßŸÑ"] {
            background-color: #f8f9fa;
        }
        
        .persian-date-input[placeholder*="ŸÖÿ´ÿßŸÑ"]:focus {
            background-color: #fff;
        }
        
        /* Persian Date Input Icons */
        .persian-date-input::before {
            content: "üìÖ";
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
            pointer-events: none;
        }
        
        /* Enhanced validation styling */
        .persian-date-input.is-invalid {
            border-color: #dc3545;
            background-color: #fff5f5;
        }
        
        .persian-date-input.is-valid {
            border-color: #28a745;
            background-color: #f8fff8;
        }
    </style>
    <script src="~/Content/plugins/select2/js/select2.full.min.js"></script>
    <!-- Persian DatePicker removed due to compatibility issues -->
    <script src="~/Scripts/app/patient-select2.js"></script>
    <script src="~/Scripts/app/patient-insurance-enhanced.js"></script>
    
    <!-- üè• Medical Environment Specific JavaScript -->
    <script>
        $(document).ready(function() {
            // üè• Advanced Medical Environment Initialization
            console.log('üè• Medical Environment: Initializing Create Form');
            
            // Initialize Enhanced Patient Insurance (Complete)
            if (typeof PatientInsuranceEnhanced !== 'undefined') {
                console.log('üè• Medical Environment: Using Enhanced Scripts');
                PatientInsuranceEnhanced.initializeCreateForm();
            } else {
                console.log('üè• Medical Environment: Using Fallback Scripts');
                // Initialize Advanced Patient Selection (Fallback)
                initializeAdvancedPatientSelection();
                initializeAdvancedInsuranceSelection();
                initializeAutoPolicyNumber();
                initializeFormValidation();
                // initializeFormSubmission(); // ÿ≠ÿ∞ŸÅ ÿ¥ÿØ - ŸÅŸÇÿ∑ AJAX ÿßÿ≥ÿ™ŸÅÿßÿØŸá ŸÖ€å‚Äå⁄©ŸÜ€åŸÖ
                initializeEnhancedFormSubmission();
                initializeDefaultFreeInsuranceButton();
                initializePatientInsuranceValidationButton();
            }
            
            // Initialize Persian DatePickers
            initializePersianDatePickers();
        });
        
        /**
         * üè• Initialize Persian DatePickers
         */
        function initializePersianDatePickers() {
            console.log('üè• Medical Environment: Initializing Persian DatePickers');
            
            // Skip Persian DatePicker completely due to step property issues
            console.log('üè• Medical Environment: Skipping Persian DatePicker due to compatibility issues, using enhanced fallback');
            initializeEnhancedFallbackDateInputs();
        }
        
        /**
         * üè• Initialize Enhanced Fallback Date Inputs
         */
        function initializeEnhancedFallbackDateInputs() {
            console.log('üè• Medical Environment: Initializing Enhanced Fallback Date Inputs');
            
            // Use regular text inputs with enhanced Persian date features
            $('#StartDateShamsi, #EndDateShamsi').attr('type', 'text').addClass('form-control');
            
            // Add enhanced placeholders
            $('#StartDateShamsi').attr('placeholder', 'ŸÖÿ´ÿßŸÑ: 1403/01/01');
            $('#EndDateShamsi').attr('placeholder', 'ŸÖÿ´ÿßŸÑ: 1403/12/29');
            
            // Add enhanced styling
            $('#StartDateShamsi, #EndDateShamsi').addClass('persian-date-input');
            
            // Add manual date validation with enhanced feedback
            $('#StartDateShamsi, #EndDateShamsi').on('blur', function() {
                var value = $(this).val();
                var $this = $(this);
                
                if (value && !isValidPersianDate(value)) {
                    $this.addClass('is-invalid');
                    showErrorMessage('ÿ™ÿßÿ±€åÿÆ Ÿàÿßÿ±ÿØ ÿ¥ÿØŸá ŸÖÿπÿ™ÿ®ÿ± ŸÜ€åÿ≥ÿ™. ŸÅÿ±ŸÖÿ™ ÿµÿ≠€åÿ≠: 1403/01/01');
                } else {
                    $this.removeClass('is-invalid');
                    // Update hidden field if valid
                    if (value && isValidPersianDate(value)) {
                        var altFieldId = $this.attr('id') === 'StartDateShamsi' ? '#StartDate' : '#EndDate';
                        $(altFieldId).val(convertPersianToGregorian(value));
                    }
                }
            });
            
            // Add enhanced input formatting
            $('#StartDateShamsi, #EndDateShamsi').on('input', function() {
                var value = $(this).val();
                // Remove non-numeric characters except /
                value = value.replace(/[^\d\/]/g, '');
                $(this).val(value);
            });
            
            // Add keyboard shortcuts
            $('#StartDateShamsi, #EndDateShamsi').on('keydown', function(e) {
                // Allow: backspace, delete, tab, escape, enter
                if ([46, 8, 9, 27, 13].indexOf(e.keyCode) !== -1 ||
                    // Allow: Ctrl+A, Ctrl+C, Ctrl+V, Ctrl+X
                    (e.keyCode === 65 && e.ctrlKey === true) ||
                    (e.keyCode === 67 && e.ctrlKey === true) ||
                    (e.keyCode === 86 && e.ctrlKey === true) ||
                    (e.keyCode === 88 && e.ctrlKey === true)) {
                    return;
                }
                // Ensure that it is a number and stop the keypress
                if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105) && e.keyCode !== 191) {
                    e.preventDefault();
                }
            });
            
            console.log('üè• Medical Environment: Enhanced Fallback Date Inputs initialized successfully');
        }
        
        /**
         * üè• Initialize Fallback Date Inputs
         */
        function initializeFallbackDateInputs() {
            console.log('üè• Medical Environment: Initializing Fallback Date Inputs');
            
            // Use regular text inputs with Persian date validation
            $('#StartDateShamsi, #EndDateShamsi').attr('type', 'text').addClass('form-control');
            
            // Add placeholder and pattern
            $('#StartDateShamsi').attr('placeholder', 'ŸÖÿ´ÿßŸÑ: 1403/01/01');
            $('#EndDateShamsi').attr('placeholder', 'ŸÖÿ´ÿßŸÑ: 1403/12/29');
            
            // Add manual date validation
            $('#StartDateShamsi, #EndDateShamsi').on('blur', function() {
                var value = $(this).val();
                if (value && !isValidPersianDate(value)) {
                    $(this).addClass('is-invalid');
                    showErrorMessage('ÿ™ÿßÿ±€åÿÆ Ÿàÿßÿ±ÿØ ÿ¥ÿØŸá ŸÖÿπÿ™ÿ®ÿ± ŸÜ€åÿ≥ÿ™. ŸÅÿ±ŸÖÿ™ ÿµÿ≠€åÿ≠: 1403/01/01');
                } else {
                    $(this).removeClass('is-invalid');
                }
            });
            
            // Add input formatting
            $('#StartDateShamsi, #EndDateShamsi').on('input', function() {
                var value = $(this).val();
                // Remove non-numeric characters except /
                value = value.replace(/[^\d\/]/g, '');
                $(this).val(value);
            });
        }
        
        /**
         * üè• Validate Persian Date Format
         */
        function isValidPersianDate(dateString) {
            if (!dateString) return true;
            
            // Simple validation for YYYY/MM/DD format
            var pattern = /^\d{4}\/\d{1,2}\/\d{1,2}$/;
            if (!pattern.test(dateString)) return false;
            
            var parts = dateString.split('/');
            var year = parseInt(parts[0]);
            var month = parseInt(parts[1]);
            var day = parseInt(parts[2]);
            
            // Enhanced validation
            if (year < 1300 || year > 1500) return false;
            if (month < 1 || month > 12) return false;
            if (day < 1 || day > 31) return false;
            
            // Persian calendar month days validation
            var monthDays = [31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 29];
            if (month === 12 && isLeapYear(year)) monthDays[11] = 30;
            
            return day <= monthDays[month - 1];
        }
        
        /**
         * üè• Check if Persian year is leap year
         */
        function isLeapYear(year) {
            // Persian leap year calculation
            return (year % 4 === 3);
        }
        
        /**
         * üè• Convert Persian date to Gregorian date (simple approximation)
         */
        function convertPersianToGregorian(persianDate) {
            if (!persianDate || !isValidPersianDate(persianDate)) {
                return '';
            }
            
            try {
                var parts = persianDate.split('/');
                var year = parseInt(parts[0]);
                var month = parseInt(parts[1]);
                var day = parseInt(parts[2]);
                
                // Simple approximation: Persian year + 621 = Gregorian year
                var gregorianYear = year + 621;
                
                // Simple month mapping (not exact but functional)
                var gregorianMonth = month;
                var gregorianDay = day;
                
                // Basic validation
                if (gregorianMonth > 12) gregorianMonth = 12;
                if (gregorianDay > 31) gregorianDay = 31;
                
                return gregorianYear + '-' + 
                       (gregorianMonth < 10 ? '0' + gregorianMonth : gregorianMonth) + '-' + 
                       (gregorianDay < 10 ? '0' + gregorianDay : gregorianDay);
            } catch (error) {
                console.error('Error converting Persian date:', error);
                return '';
            }
        }
        
        /**
         * üè• Helper function to extract name from text
         */
        function extractNameFromText(text) {
            if (!text) return 'ŸÜÿßŸÖ ŸÜÿßŸÖÿ¥ÿÆÿµ';
            
            // ÿ≠ÿ∞ŸÅ ⁄©ÿØ ŸÖŸÑ€å ÿßÿ≤ ÿØÿßÿÆŸÑ Ÿæÿ±ÿßŸÜÿ™ÿ≤
            var name = text.replace(/\([^)]*\)/g, '').trim();
            
            // ÿß⁄Øÿ± ŸÅŸÇÿ∑ ŸÅÿßÿµŸÑŸá €åÿß ÿÆÿßŸÑ€å ÿßÿ≥ÿ™ÿå ŸÜÿßŸÖ Ÿæ€åÿ¥‚ÄåŸÅÿ±ÿ∂
            if (!name || name.length < 2) {
                return 'ŸÜÿßŸÖ ŸÜÿßŸÖÿ¥ÿÆÿµ';
            }
            
            return name;
        }
        
        /**
         * üè• Helper function to calculate age from birth date
         */
        function calculateAge(birthDate) {
            if (!birthDate || birthDate === 'null' || birthDate === 'undefined' || birthDate === null || birthDate === undefined) {
                return '-';
            }
            
            try {
                var birth = new Date(birthDate);
                
                // ÿ®ÿ±ÿ±ÿ≥€å ŸÖÿπÿ™ÿ®ÿ± ÿ®ŸàÿØŸÜ ÿ™ÿßÿ±€åÿÆ
                if (isNaN(birth.getTime())) {
                    console.log('üè• Medical Environment: Invalid birth date:', birthDate);
                    return '-';
                }
                
                var today = new Date();
                var age = today.getFullYear() - birth.getFullYear();
                var monthDiff = today.getMonth() - birth.getMonth();
                
                if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
                    age--;
                }
                
                // ÿ®ÿ±ÿ±ÿ≥€å ŸÖÿπÿ™ÿ®ÿ± ÿ®ŸàÿØŸÜ ÿ≥ŸÜ
                if (isNaN(age) || age < 0 || age > 150) {
                    console.log('üè• Medical Environment: Invalid age calculated:', age, 'for birth date:', birthDate);
                    return '-';
                }
                
                return age + ' ÿ≥ÿßŸÑ';
            } catch (e) {
                console.error('üè• Medical Environment: Error calculating age:', e, 'for birth date:', birthDate);
                return '-';
            }
        }
        
        /**
         * üè• Helper function to format Persian date
         */
        function formatPersianDate(dateString) {
            if (!dateString || dateString === 'null' || dateString === 'undefined' || dateString === null || dateString === undefined) {
                return '-';
            }
            
            try {
                var date = new Date(dateString);
                
                // ÿ®ÿ±ÿ±ÿ≥€å ŸÖÿπÿ™ÿ®ÿ± ÿ®ŸàÿØŸÜ ÿ™ÿßÿ±€åÿÆ
                if (isNaN(date.getTime())) {
                    console.log('üè• Medical Environment: Invalid date for formatting:', dateString);
                    return '-';
                }
                
                var year = date.getFullYear();
                var month = date.getMonth() + 1;
                var day = date.getDate();
                
                // ÿ®ÿ±ÿ±ÿ≥€å ŸÖÿπÿ™ÿ®ÿ± ÿ®ŸàÿØŸÜ ŸÖŸÇÿßÿØ€åÿ±
                if (isNaN(year) || isNaN(month) || isNaN(day)) {
                    console.log('üè• Medical Environment: Invalid date components:', {year: year, month: month, day: day});
                    return '-';
                }
                
                // ÿ™ÿ®ÿØ€åŸÑ ÿ®Ÿá ÿ™ÿßÿ±€åÿÆ ÿ¥ŸÖÿ≥€å (ÿ™ŸÇÿ±€åÿ®€å)
                var persianYear = year - 621;
                return persianYear + '/' + month + '/' + day;
            } catch (e) {
                console.error('üè• Medical Environment: Error formatting Persian date:', e, 'for date:', dateString);
                return '-';
            }
        }
        
        /**
         * üè• Advanced Patient Selection with Select2
         */
        function initializeAdvancedPatientSelection() {
            // Initialize Select2 for patient selection
            $('#PatientId').select2({
                placeholder: 'ÿ¨ÿ≥ÿ™ÿ¨Ÿà ÿØÿ± ÿ®€åŸÖÿßÿ±ÿßŸÜ: ŸÜÿßŸÖÿå ŸÜÿßŸÖ ÿÆÿßŸÜŸàÿßÿØ⁄Ø€åÿå ⁄©ÿØ ŸÖŸÑ€å €åÿß ÿ¥ŸÖÿßÿ±Ÿá ÿ™ŸÑŸÅŸÜ...',
                allowClear: true,
                minimumInputLength: 2,
                language: {
                    inputTooShort: function() {
                        return 'ÿ≠ÿØÿßŸÇŸÑ €≤ ⁄©ÿßÿ±ÿß⁄©ÿ™ÿ± Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ';
                    },
                    noResults: function() {
                        return 'Ÿá€å⁄Ü ÿ®€åŸÖÿßÿ± €åÿßŸÅÿ™ ŸÜÿ¥ÿØ';
                    },
                    searching: function() {
                        return 'ÿØÿ± ÿ≠ÿßŸÑ ÿ¨ÿ≥ÿ™ÿ¨Ÿà...';
                    }
                },
                ajax: {
                    url: '@Url.Action("SearchPatients", "PatientInsurance")',
                    dataType: 'json',
                    delay: 300,
                    data: function(params) {
                        return {
                            q: params.term,
                            page: params.page || 1,
                            pageSize: 20
                        };
                    },
                    error: function(xhr, status, error) {
                        console.error('üè• MEDICAL DEBUG: AJAX Error:', {
                            xhr: xhr,
                            status: status,
                            error: error
                        });
                    },
                    processResults: function(data, params) {
                        params.page = params.page || 1;
                        
                        console.log('üè• MEDICAL DEBUG: Response data:', data);
                        
                        // ÿ®ÿ±ÿ±ÿ≥€å Ÿàÿ¨ŸàÿØ data
                        if (!data) {
                            console.error('üè• MEDICAL DEBUG: No data received');
                            return {
                                results: [],
                                pagination: {
                                    more: false
                                }
                            };
                        }
                        
                        // ÿ®ÿ±ÿ±ÿ≥€å ÿ≥ÿßÿÆÿ™ÿßÿ± response - endpoint ŸÖŸàÿ¨ŸàÿØ results ÿ±ÿß ÿ®ÿ±ŸÖ€å‚Äå⁄Øÿ±ÿØÿßŸÜÿØ
                        var patients = [];
                        if (data.results && Array.isArray(data.results)) {
                            patients = data.results;
                        } else if (Array.isArray(data)) {
                            patients = data;
                        }
                        
                        console.log('üè• MEDICAL DEBUG: Patients found:', patients.length);
                        
                        return {
                            results: patients.map(function(patient) {
                                // ÿß€åÿ¨ÿßÿØ ŸÜÿßŸÖ ŸÜŸÖÿß€åÿ¥€å
                                var displayName = '';
                                if (patient.firstName && patient.lastName) {
                                    displayName = patient.firstName + ' ' + patient.lastName;
                                } else if (patient.text) {
                                    // ÿßÿ≥ÿ™ÿÆÿ±ÿßÿ¨ ŸÜÿßŸÖ ÿßÿ≤ text ⁄©Ÿá ÿ¥ÿßŸÖŸÑ ŸÜÿßŸÖ Ÿà ⁄©ÿØ ŸÖŸÑ€å ÿßÿ≥ÿ™
                                    displayName = patient.text.replace(/\([^)]*\)/g, '').trim();
                                    if (!displayName || displayName.length < 2) {
                                        displayName = 'ŸÜÿßŸÖ ŸÜÿßŸÖÿ¥ÿÆÿµ';
                                    }
                                } else {
                                    displayName = 'ŸÜÿßŸÖ ŸÜÿßŸÖÿ¥ÿÆÿµ';
                                }
                                
                                return {
                                    id: patient.id,
                                    text: patient.text || (displayName + ' (' + patient.nationalCode + ')'),
                                    patient: {
                                        id: patient.id,
                                        name: displayName,
                                        text: patient.text,
                                        nationalCode: patient.nationalCode,
                                        phone: patient.phoneNumber,
                                        phoneNumber: patient.phoneNumber,
                                        firstName: patient.firstName,
                                        lastName: patient.lastName,
                                        fatherName: patient.fatherName || 'ŸÜÿßŸÖÿ¥ÿÆÿµ',
                                        birthDate: patient.birthDate,
                                        birthDateShamsi: patient.birthDateShamsi,
                                        gender: patient.gender,
                                        address: patient.address
                                    }
                                };
                            }),
                            pagination: {
                                more: data.pagination ? data.pagination.more : false
                            }
                        };
                    },
                    cache: true
                },
                templateResult: function(patient) {
                    if (patient.loading) {
                        return 'ÿØÿ± ÿ≠ÿßŸÑ ÿ¨ÿ≥ÿ™ÿ¨Ÿà...';
                    }
                    
                    if (!patient.patient) {
                        return patient.text;
                    }
                    
                    var $container = $(
                        '<div class="patient-select2-result">' +
                            '<div class="patient-avatar-small">' + (patient.patient.name.charAt(0) || '?') + '</div>' +
                            '<div class="patient-info-small">' +
                                '<div class="patient-name-small">' + patient.patient.name + '</div>' +
                                '<div class="patient-details-small">' +
                                    '⁄©ÿØ ŸÖŸÑ€å: ' + (patient.patient.nationalCode || '') + 
                                    (patient.patient.phoneNumber ? ' | ÿ™ŸÑŸÅŸÜ: ' + patient.patient.phoneNumber : '') +
                                    (patient.patient.birthDate ? ' | ÿ≥ŸÜ: ' + calculateAge(patient.patient.birthDate) : '') +
                                '</div>' +
                            '</div>' +
                        '</div>'
                    );
                    
                    return $container;
                },
                templateSelection: function(patient) {
                    return patient.text || patient.name;
                }
            });
            
            // Handle patient selection
            $('#PatientId').on('select2:select', function(e) {
                var data = e.params.data;
                var patient = data.patient;
                
                if (patient) {
                    showSelectedPatientInfo(patient);
                    
                    // Auto-fill policy number with national code
                    $('#PolicyNumber').val(patient.nationalCode);
                    $('#SupplementaryPolicyNumber').val(patient.nationalCode);
                    
                    // Check patient insurance status with new validation service
                    checkPatientInsuranceStatus();
                }
            });
            
            // Handle patient clearing
            $('#PatientId').on('select2:clear', function(e) {
                $('#selectedPatientInfo').hide();
                $('#PolicyNumber').val('');
                $('#SupplementaryPolicyNumber').val('');
            });
            
            function showSelectedPatientInfo(patient) {
                console.log('üè• Medical Environment: Patient data:', patient);
                
                // ŸÜŸÖÿß€åÿ¥ ŸÜÿßŸÖ ⁄©ÿßŸÖŸÑ - ÿßÿ≥ÿ™ŸÅÿßÿØŸá ÿßÿ≤ helper function
                var fullName = '';
                var firstName = patient.firstName || '';
                var lastName = patient.lastName || '';
                
                // ÿ®ÿ±ÿ±ÿ≥€å null Ÿà undefined
                if (firstName && firstName !== 'null' && firstName !== 'undefined') {
                    if (lastName && lastName !== 'null' && lastName !== 'undefined') {
                        fullName = firstName + ' ' + lastName;
                    } else {
                        fullName = firstName;
                    }
                } else if (patient.name && patient.name !== 'null' && patient.name !== 'undefined') {
                    fullName = patient.name;
                } else if (patient.text) {
                    // ÿßÿ≥ÿ™ÿÆÿ±ÿßÿ¨ ŸÜÿßŸÖ ÿßÿ≤ text ⁄©Ÿá ÿ¥ÿßŸÖŸÑ ŸÜÿßŸÖ Ÿà ⁄©ÿØ ŸÖŸÑ€å ÿßÿ≥ÿ™
                    fullName = patient.text.replace(/\([^)]*\)/g, '').trim();
                    if (!fullName || fullName.length < 2) {
                        fullName = 'ŸÜÿßŸÖ ŸÜÿßŸÖÿ¥ÿÆÿµ';
                    }
                } else {
                    fullName = 'ŸÜÿßŸÖ ŸÜÿßŸÖÿ¥ÿÆÿµ';
                }
                
                console.log('üè• Medical Environment: Full name:', fullName);
                $('#selectedPatientName').text(fullName);
                $('#selectedPatientFullName').text(fullName);
                
                // ŸÜŸÖÿß€åÿ¥ ÿ≥ÿß€åÿ± ÿßÿ∑ŸÑÿßÿπÿßÿ™
                $('#selectedPatientNationalCode').text(patient.nationalCode || '-');
                $('#selectedPatientFatherName').text(patient.fatherName || 'ŸÜÿßŸÖÿ¥ÿÆÿµ');
                $('#selectedPatientPhone').text(patient.phone || patient.phoneNumber || '-');
                
                // ÿßÿ≥ÿ™ŸÅÿßÿØŸá ÿßÿ≤ ÿØÿßÿØŸá‚ÄåŸáÿß€å ÿ≥ŸÖÿ™ ÿ≥ÿ±Ÿàÿ± (ÿ¥ŸÖÿ≥€å Ÿà ÿ≥ŸÜ)
                var ageText = '-';
                if (patient.birthDateShamsi && patient.age) {
                    ageText = patient.birthDateShamsi + ' (' + patient.age + ' ÿ≥ÿßŸÑ)';
                } else if (patient.birthDateShamsi) {
                    ageText = patient.birthDateShamsi;
                } else if (patient.birthDate && patient.birthDate !== 'null' && patient.birthDate !== 'undefined') {
                    // Fallback: ÿßÿ≥ÿ™ŸÅÿßÿØŸá ÿßÿ≤ JavaScript (ÿØÿ± ÿµŸàÿ±ÿ™ ÿπÿØŸÖ Ÿàÿ¨ŸàÿØ ÿØÿßÿØŸá‚ÄåŸáÿß€å ÿ≥ŸÖÿ™ ÿ≥ÿ±Ÿàÿ±)
                    try {
                        var persianDate = formatPersianDate(patient.birthDate);
                        var age = calculateAge(patient.birthDate);
                        if (age && age !== 'undefined') {
                            ageText = persianDate + ' (' + age + ')';
                        } else {
                            ageText = persianDate;
                        }
                    } catch (e) {
                        console.error('üè• Medical Environment: Error calculating age:', e);
                        ageText = patient.birthDate;
                    }
                }
                console.log('üè• Medical Environment: Birth date (server):', patient.birthDateShamsi, 'Age (server):', patient.age, 'Age text:', ageText);
                $('#selectedPatientBirthDate').text(ageText);
                
                // ÿ™ÿ®ÿØ€åŸÑ ÿ¨ŸÜÿ≥€åÿ™
                var genderText = '-';
                if (patient.gender !== null && patient.gender !== undefined) {
                    genderText = patient.gender == 1 ? 'ŸÖÿ±ÿØ' : 'ÿ≤ŸÜ';
                }
                $('#selectedPatientGender').text(genderText);
                
                // ŸÜŸÖÿß€åÿ¥ ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿßÿ∂ÿßŸÅ€å
                $('#selectedPatientAddress').text(patient.address || '-');
                
                // ŸÜŸÖÿß€åÿ¥ ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿßÿ∂ÿßŸÅ€å ÿß⁄Øÿ± ŸÖŸàÿ¨ŸàÿØ ÿ®ÿßÿ¥ÿØ
                if (patient.address) {
                    $('#additionalPatientInfo').show();
                } else {
                    $('#additionalPatientInfo').hide();
                }
                
                $('#selectedPatientInfo').show();
            }
        }
        
        /**
         * üè• Advanced Insurance Selection
         */
        function initializeAdvancedInsuranceSelection() {
            // ÿ™ÿ∫€å€åÿ± ŸÜŸàÿπ ÿ®€åŸÖŸá
            $('.insurance-tab').on('click', function() {
                var type = $(this).data('type');
                
                // ÿ™ÿ∫€å€åÿ± ÿ™ÿ® ŸÅÿπÿßŸÑ
                $('.insurance-tab').removeClass('active');
                $(this).addClass('active');
                
                // ÿ™ÿ∫€å€åÿ± ŸÖÿ≠ÿ™Ÿàÿß
                $('.insurance-content').removeClass('active');
                $('#' + type + 'InsuranceContent').addClass('active');
                
                // ÿ™ŸÜÿ∏€åŸÖ ŸÜŸàÿπ ÿ®€åŸÖŸá
                if (type === 'primary') {
                    $('#IsPrimary').prop('checked', true);
                } else {
                    $('#IsPrimary').prop('checked', false);
                }
            });
            
            // Initialize Enhanced Insurance Selection
            if (typeof PatientInsuranceEnhanced !== 'undefined' && PatientInsuranceEnhanced.initializeInsuranceSelection) {
                PatientInsuranceEnhanced.initializeInsuranceSelection();
            }
        }
        
        /**
         * üè• Auto Policy Number
         */
        function initializeAutoPolicyNumber() {
            // ÿ¥ŸÖÿßÿ±Ÿá ÿ®€åŸÖŸá‚ÄåŸÜÿßŸÖŸá ÿÆŸàÿØ⁄©ÿßÿ± ÿ®ÿß ⁄©ÿØ ŸÖŸÑ€å Ÿæÿ± ŸÖ€å‚Äåÿ¥ŸàÿØ
            // ÿß€åŸÜ ⁄©ÿßÿ± ÿØÿ± showSelectedPatient ÿßŸÜÿ¨ÿßŸÖ ŸÖ€å‚Äåÿ¥ŸàÿØ
        }
        
        /**
         * üè• Form Validation
         */
        function initializeFormValidation() {
            // ÿßÿπÿ™ÿ®ÿßÿ±ÿ≥ŸÜÿ¨€å real-time
            $('.medical-form-control').on('blur', function() {
                validateField($(this));
            });
            
            function validateField($field) {
                var value = $field.val().trim();
                var isValid = true;
                
                if ($field.prop('required') && !value) {
                    isValid = false;
                }
                
                if (isValid) {
                    $field.removeClass('is-invalid').addClass('is-valid');
                } else {
                    $field.removeClass('is-valid').addClass('is-invalid');
                }
                
                return isValid;
            }
        }
        
        /**
         * üè• Form Submission
         */
        function initializeFormSubmission() {
            $('form').on('submit', function(e) {
                var $form = $(this);
                var $saveButton = $('#saveButton');
                var $loadingIndicator = $('#loadingIndicator');
                
                // ŸÜŸÖÿß€åÿ¥ loading
                $saveButton.prop('disabled', true);
                $loadingIndicator.show();
                
                // ÿßÿπÿ™ÿ®ÿßÿ±ÿ≥ŸÜÿ¨€å ŸÅÿ±ŸÖ
                var isValid = true;
                $('.medical-form-control[required]').each(function() {
                    if (!$(this).val().trim()) {
                        isValid = false;
                        $(this).addClass('is-invalid');
                    }
                });
                
                // ÿßÿπÿ™ÿ®ÿßÿ±ÿ≥ŸÜÿ¨€å ÿ®€åŸÖŸá ÿ™⁄©ŸÖ€åŸÑ€å
                var supplementaryProvider = $('#SupplementaryInsuranceProviderId').val();
                var supplementaryPlan = $('#SupplementaryInsurancePlanId').val();
                
                if (supplementaryProvider && !supplementaryPlan) {
                    $('#SupplementaryInsurancePlanId').addClass('is-invalid');
                    isValid = false;
                }
                
                if (!supplementaryProvider && supplementaryPlan) {
                    $('#SupplementaryInsuranceProviderId').addClass('is-invalid');
                    isValid = false;
                }
                
                if (!isValid) {
                    e.preventDefault();
                    $saveButton.prop('disabled', false);
                    $loadingIndicator.hide();
                    alert('ŸÑÿ∑ŸÅÿßŸã ÿ™ŸÖÿßŸÖ ŸÅ€åŸÑÿØŸáÿß€å ÿßŸÑÿ≤ÿßŸÖ€å ÿ±ÿß Ÿæÿ± ⁄©ŸÜ€åÿØ');
                }
            });
        }
        
        /**
         * üè• Initialize Medical Environment Form Enhancements
         */
        function initializeMedicalFormEnhancements() {
            // Add medical environment specific classes
            $('.form-control').addClass('medical-form-control');
            $('.form-group').addClass('medical-form-group');
            $('.form-label').addClass('medical-form-label');
            
            // Add focus effects for medical environment
            $('.medical-form-control').on('focus', function() {
                $(this).closest('.medical-form-group').addClass('focused');
            }).on('blur', function() {
                $(this).closest('.medical-form-group').removeClass('focused');
            });
            
            // Add medical environment tooltips
            $('[data-medical-field]').each(function() {
                var field = $(this).data('medical-field');
                var tooltip = getMedicalTooltip(field);
                if (tooltip) {
                    $(this).attr('title', tooltip);
                    $(this).tooltip();
                }
            });
        }
        
        /**
         * üè• Initialize Medical Environment Form Submission
         */
        function initializeMedicalFormSubmission() {
            $('form').on('submit', function(e) {
                var $form = $(this);
                var $saveButton = $('#saveButton');
                var $loadingIndicator = $('#loadingIndicator');
                
                // Show loading state
                $saveButton.prop('disabled', true).addClass('medical-loading');
                $loadingIndicator.show();
                
                // Add medical environment specific validation
                if (!validateMedicalForm($form)) {
                    e.preventDefault();
                    $saveButton.prop('disabled', false).removeClass('medical-loading');
                    $loadingIndicator.hide();
                    return false;
                }
                
                // Log medical environment action
                console.log('üè• Medical Environment: Submitting patient insurance form');
            });
        }
        
        /**
         * üè• Enhanced Form Submission with AJAX
         */
        function initializeEnhancedFormSubmission() {
            $('#patientInsuranceCreateForm').on('submit', function(e) {
                e.preventDefault();
                
                var $form = $(this);
                var $saveButton = $('#saveButton');
                var $loadingIndicator = $('#loadingIndicator');
                
                // Show loading state
                $saveButton.prop('disabled', true).html('<i class="fas fa-spinner fa-spin me-2"></i>ÿØÿ± ÿ≠ÿßŸÑ ÿ∞ÿÆ€åÿ±Ÿá...');
                $loadingIndicator.show();
                $form.addClass('medical-loading');
                
                // Prepare form data
                var formData = {
                    PatientId: $('#PatientId').val(),
                    InsuranceProviderId: $('#PrimaryInsuranceProviderId').val(),
                    InsurancePlanId: $('#PrimaryInsurancePlanId').val(),
                    SupplementaryInsuranceProviderId: $('#SupplementaryInsuranceProviderId').val() || null,
                    SupplementaryInsurancePlanId: $('#SupplementaryInsurancePlanId').val() || null,
                    PolicyNumber: $('#PolicyNumber').val(),
                    SupplementaryPolicyNumber: $('#SupplementaryPolicyNumber').val() || null,
                    StartDateShamsi: $('#StartDateShamsi').val(),
                    EndDateShamsi: $('#EndDateShamsi').val(),
                    IsPrimary: $('#IsPrimary').prop('checked') === true,
                    IsActive: $('#IsActive').prop('checked') === true
                };
                
                // Remove null values
                Object.keys(formData).forEach(key => {
                    if (formData[key] === null || formData[key] === '' || formData[key] === undefined) {
                        delete formData[key];
                    }
                });
                
                // Add anti-forgery token
                formData['__RequestVerificationToken'] = $form.find('input[name="__RequestVerificationToken"]').val();
                
                console.log('üè• Medical Environment: Submitting form data:', formData);
                
                // Submit form
                $.ajax({
                    url: $form.attr('action'),
                    type: 'POST',
                    data: formData,
                    success: function(response) {
                        console.log('üè• Medical Environment: Form submission response:', response);
                        
                        if (response.success) {
                            showSuccessMessage('ÿ®€åŸÖŸá ÿ®€åŸÖÿßÿ± ÿ®ÿß ŸÖŸàŸÅŸÇ€åÿ™ ÿß€åÿ¨ÿßÿØ ÿ¥ÿØ');
                            
                            // Redirect to details page after a short delay
                            setTimeout(function() {
                                window.location.href = '@Url.Action("Index", "PatientInsurance")';
                            }, 2000);
                        } else {
                            showErrorMessage(response.message || 'ÿÆÿ∑ÿß ÿØÿ± ÿß€åÿ¨ÿßÿØ ÿ®€åŸÖŸá ÿ®€åŸÖÿßÿ±');
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error('ÿÆÿ∑ÿß ÿØÿ± ÿß€åÿ¨ÿßÿØ ÿ®€åŸÖŸá ÿ®€åŸÖÿßÿ±:', error);
                        console.error('Response:', xhr.responseText);
                        showErrorMessage('ÿÆÿ∑ÿß ÿØÿ± ÿß€åÿ¨ÿßÿØ ÿ®€åŸÖŸá ÿ®€åŸÖÿßÿ±');
                    },
                    complete: function() {
                        // Hide loading state
                        $saveButton.prop('disabled', false).html('<i class="fas fa-save me-2"></i>ÿ∞ÿÆ€åÿ±Ÿá ÿ®€åŸÖŸá ÿ®€åŸÖÿßÿ±');
                        $loadingIndicator.hide();
                        $form.removeClass('medical-loading');
                    }
                });
            });
        }
        
        /**
         * üè• Initialize Medical Environment Real-time Validation
         */
        function initializeMedicalRealTimeValidation() {
            // Real-time validation for policy number
            $('#PolicyNumber').on('input', function() {
                var policyNumber = $(this).val();
                if (policyNumber.length > 0) {
                    validatePolicyNumberFormat(policyNumber);
                }
            });
            
            // Real-time validation for dates
            $('.persian-datepicker').on('change', function() {
                var dateValue = $(this).val();
                if (dateValue) {
                    validateDateRange();
                }
            });
        }
        
        /**
         * üè• Validate Medical Form
         */
        function validateMedicalForm($form) {
            var isValid = true;
            
            // Check required fields
            $form.find('[required]').each(function() {
                if (!$(this).val()) {
                    $(this).addClass('is-invalid');
                    isValid = false;
                } else {
                    $(this).removeClass('is-invalid');
                }
            });
            
            // Check policy number format
            var policyNumber = $('#PolicyNumber').val();
            if (policyNumber && !validatePolicyNumberFormat(policyNumber)) {
                isValid = false;
            }
            
            // Check date range
            if (!validateDateRange()) {
                isValid = false;
            }
            
            return isValid;
        }
        
        /**
         * üè• Validate Policy Number Format
         */
        function validatePolicyNumberFormat(policyNumber) {
            var regex = /^[A-Za-z0-9\-_]+$/;
            var $field = $('#PolicyNumber');
            
            if (!regex.test(policyNumber)) {
                $field.addClass('is-invalid');
                showMedicalValidationMessage($field, 'ÿ¥ŸÖÿßÿ±Ÿá ÿ®€åŸÖŸá ŸÅŸÇÿ∑ ŸÖ€å‚Äåÿ™ŸàÿßŸÜÿØ ÿ¥ÿßŸÖŸÑ ÿ≠ÿ±ŸàŸÅ ÿßŸÜ⁄ØŸÑ€åÿ≥€åÿå ÿßÿπÿØÿßÿØÿå ÿÆÿ∑ ÿ™€åÿ±Ÿá Ÿà ÿ≤€åÿ±ÿÆÿ∑ ÿ®ÿßÿ¥ÿØ');
                return false;
            } else {
                $field.removeClass('is-invalid');
                hideMedicalValidationMessage($field);
                return true;
            }
        }
        
        /**
         * üè• Validate Date Range
         */
        function validateDateRange() {
            var startDate = $('#StartDate').val();
            var endDate = $('#EndDate').val();
            var isValid = true;
            
            if (startDate && endDate) {
                var start = new Date(startDate);
                var end = new Date(endDate);
                
                if (start >= end) {
                    $('#EndDate').addClass('is-invalid');
                    showMedicalValidationMessage($('#EndDate'), 'ÿ™ÿßÿ±€åÿÆ Ÿæÿß€åÿßŸÜ ÿ®ÿß€åÿØ ÿ®ÿπÿØ ÿßÿ≤ ÿ™ÿßÿ±€åÿÆ ÿ¥ÿ±Ÿàÿπ ÿ®ÿßÿ¥ÿØ');
                    isValid = false;
                } else {
                    $('#EndDate').removeClass('is-invalid');
                    hideMedicalValidationMessage($('#EndDate'));
                }
            }
            
            return isValid;
        }
        
        /**
         * üè• Show Medical Validation Message
         */
        function showMedicalValidationMessage($field, message) {
            var $message = $field.siblings('.medical-validation-message');
            if ($message.length === 0) {
                $message = $('<div class="medical-validation-message text-danger"></div>');
                $field.after($message);
            }
            $message.text(message).show();
        }
        
        /**
         * üè• Hide Medical Validation Message
         */
        function hideMedicalValidationMessage($field) {
            $field.siblings('.medical-validation-message').hide();
        }
        
        /**
         * üè• Get Medical Tooltip
         */
        function getMedicalTooltip(field) {
            var tooltips = {
                'patient-selection': 'ÿßŸÜÿ™ÿÆÿßÿ® ÿ®€åŸÖÿßÿ± ÿ®ÿ±ÿß€å ÿ´ÿ®ÿ™ ÿ®€åŸÖŸá',
                'policy-number': 'ÿ¥ŸÖÿßÿ±Ÿá ÿ®€åŸÖŸá‚ÄåŸÜÿßŸÖŸá ÿ®€åŸÖÿßÿ±',
                'insurance-plan': 'ÿ∑ÿ±ÿ≠ ÿ®€åŸÖŸá ŸÖŸàÿ±ÿØ ŸÜÿ∏ÿ±',
                'start-date': 'ÿ™ÿßÿ±€åÿÆ ÿ¥ÿ±Ÿàÿπ ÿßÿπÿ™ÿ®ÿßÿ± ÿ®€åŸÖŸá',
                'end-date': 'ÿ™ÿßÿ±€åÿÆ Ÿæÿß€åÿßŸÜ ÿßÿπÿ™ÿ®ÿßÿ± ÿ®€åŸÖŸá (ÿßÿÆÿ™€åÿßÿ±€å)',
                'is-primary': 'ÿ¢€åÿß ÿß€åŸÜ ÿ®€åŸÖŸá ÿßÿµŸÑ€å ÿ®€åŸÖÿßÿ± ÿßÿ≥ÿ™ÿü'
            };
            return tooltips[field] || '';
        }

        /**
         * üè• Check Patient Insurance Status with New Validation Service
         */
        function checkPatientInsuranceStatus() {
            var patientId = $('#PatientId').val();
            if (patientId && patientId > 0) {
                $.ajax({
                    url: '@Url.Action("GetPatientInsuranceStatus", "PatientInsurance")',
                    type: 'GET',
                    data: { patientId: patientId },
                    success: function(response) {
                        if (response.success) {
                            updateInsuranceStatusDisplay(response.data);
                        } else {
                            showInsuranceStatusError('ÿÆÿ∑ÿß ÿØÿ± ÿØÿ±€åÿßŸÅÿ™ Ÿàÿ∂ÿπ€åÿ™ ÿ®€åŸÖŸá ÿ®€åŸÖÿßÿ±');
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error('ÿÆÿ∑ÿß ÿØÿ± ÿ®ÿ±ÿ±ÿ≥€å Ÿàÿ∂ÿπ€åÿ™ ÿ®€åŸÖŸá ÿ®€åŸÖÿßÿ±:', error);
                        showInsuranceStatusError('ÿÆÿ∑ÿß ÿØÿ± ÿ®ÿ±ÿ±ÿ≥€å Ÿàÿ∂ÿπ€åÿ™ ÿ®€åŸÖŸá ÿ®€åŸÖÿßÿ±');
                    }
                });
            }
        }

        /**
         * üè• Validate Patient Insurance with New Service
         */
        function validatePatientInsuranceWithNewService() {
            var patientId = $('#PatientId').val();
            if (patientId && patientId > 0) {
                $.ajax({
                    url: '@Url.Action("ValidatePatientInsurance", "PatientInsurance")',
                    type: 'POST',
                    data: { 
                        patientId: patientId,
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function(response) {
                        if (response.success) {
                            showValidationResult(response.data);
                        } else {
                            showMedicalErrorMessage(response.message || 'ÿÆÿ∑ÿß ÿØÿ± ÿßÿπÿ™ÿ®ÿßÿ±ÿ≥ŸÜÿ¨€å ÿ®€åŸÖŸá ÿ®€åŸÖÿßÿ±');
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error('ÿÆÿ∑ÿß ÿØÿ± ÿßÿπÿ™ÿ®ÿßÿ±ÿ≥ŸÜÿ¨€å ÿ®€åŸÖŸá ÿ®€åŸÖÿßÿ±:', error);
                        showMedicalErrorMessage('ÿÆÿ∑ÿß ÿØÿ± ÿßÿπÿ™ÿ®ÿßÿ±ÿ≥ŸÜÿ¨€å ÿ®€åŸÖŸá ÿ®€åŸÖÿßÿ±');
                    }
                });
            }
        }

        /**
         * üè• Show Validation Result
         */
        function showValidationResult(validationResult) {
            var resultHtml = `
                <div class="alert alert-info">
                    <h6><i class="fas fa-check-circle"></i> ŸÜÿ™€åÿ¨Ÿá ÿßÿπÿ™ÿ®ÿßÿ±ÿ≥ŸÜÿ¨€å ÿ®€åŸÖŸá</h6>
                    <p><strong>Ÿàÿ∂ÿπ€åÿ™:</strong> ${validationResult.isValid ? 'ŸÖÿπÿ™ÿ®ÿ±' : 'ŸÜÿßŸÖÿπÿ™ÿ®ÿ±'}</p>
                    <p><strong>ÿ™ÿßÿ±€åÿÆ ÿßÿπÿ™ÿ®ÿßÿ±ÿ≥ŸÜÿ¨€å:</strong> ${validationResult.validationDate}</p>
            `;
            
            if (validationResult.issues && validationResult.issues.length > 0) {
                resultHtml += '<p><strong>ŸÖÿ≥ÿßÿ¶ŸÑ:</strong></p><ul>';
                validationResult.issues.forEach(function(issue) {
                    resultHtml += `<li>${issue.message}</li>`;
                });
                resultHtml += '</ul>';
            }
            
            if (validationResult.recommendations && validationResult.recommendations.length > 0) {
                resultHtml += '<p><strong>ÿ™Ÿàÿµ€åŸá‚ÄåŸáÿß:</strong></p><ul>';
                validationResult.recommendations.forEach(function(rec) {
                    resultHtml += `<li>${rec}</li>`;
                });
                resultHtml += '</ul>';
            }
            
            resultHtml += '</div>';
            
            $('.patient-selection-container').after(resultHtml);
        }

        /**
         * üè• Update Insurance Status Display
         */
        function updateInsuranceStatusDisplay(statusData) {
            // Update Primary Insurance Status
            var primaryStatusHtml = '';
            if (statusData.hasPrimaryInsurance) {
                primaryStatusHtml = `
                    <div class="alert alert-success">
                        <i class="fas fa-check-circle"></i>
                        <strong>ÿ®€åŸÖŸá ÿßÿµŸÑ€å ŸÖŸàÿ¨ŸàÿØ:</strong> ${statusData.primaryInsuranceCount} ÿ®€åŸÖŸá ÿßÿµŸÑ€å
                    </div>`;
            } else {
                primaryStatusHtml = `
                    <div class="alert alert-warning">
                        <i class="fas fa-exclamation-triangle"></i>
                        <strong>ÿ®€åŸÖŸá ÿßÿµŸÑ€å ŸÖŸàÿ¨ŸàÿØ ŸÜ€åÿ≥ÿ™</strong>
                    </div>`;
            }
            $('#primaryInsuranceStatus').html(primaryStatusHtml);

            // Update Supplementary Insurance Status
            var supplementaryStatusHtml = '';
            if (statusData.hasSupplementaryInsurance) {
                supplementaryStatusHtml = `
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle"></i>
                        <strong>ÿ®€åŸÖŸá ÿ™⁄©ŸÖ€åŸÑ€å ŸÖŸàÿ¨ŸàÿØ:</strong> ${statusData.supplementaryInsuranceCount} ÿ®€åŸÖŸá ÿ™⁄©ŸÖ€åŸÑ€å
                    </div>`;
            } else {
                supplementaryStatusHtml = `
                    <div class="alert alert-secondary">
                        <i class="fas fa-minus-circle"></i>
                        <strong>ÿ®€åŸÖŸá ÿ™⁄©ŸÖ€åŸÑ€å ŸÖŸàÿ¨ŸàÿØ ŸÜ€åÿ≥ÿ™</strong>
                    </div>`;
            }
            $('#supplementaryInsuranceStatus').html(supplementaryStatusHtml);

            // Update form based on status
            if (statusData.hasPrimaryInsurance && !statusData.hasSupplementaryInsurance) {
                // Patient has primary but no supplementary - suggest supplementary
                $('#IsPrimary').prop('checked', false);
                showMedicalInfoMessage('ÿß€åŸÜ ÿ®€åŸÖÿßÿ± ÿ®€åŸÖŸá ÿßÿµŸÑ€å ÿØÿßÿ±ÿØ. ÿ®€åŸÖŸá ÿ¨ÿØ€åÿØ ÿ®Ÿá ÿπŸÜŸàÿßŸÜ ÿ®€åŸÖŸá ÿ™⁄©ŸÖ€åŸÑ€å ÿ´ÿ®ÿ™ ÿÆŸàÿßŸáÿØ ÿ¥ÿØ.');
            } else if (!statusData.hasPrimaryInsurance) {
                // Patient has no primary insurance - suggest primary
                $('#IsPrimary').prop('checked', true);
                showMedicalInfoMessage('ÿß€åŸÜ ÿ®€åŸÖÿßÿ± ÿ®€åŸÖŸá ÿßÿµŸÑ€å ŸÜÿØÿßÿ±ÿØ. ÿ®€åŸÖŸá ÿ¨ÿØ€åÿØ ÿ®Ÿá ÿπŸÜŸàÿßŸÜ ÿ®€åŸÖŸá ÿßÿµŸÑ€å ÿ´ÿ®ÿ™ ÿÆŸàÿßŸáÿØ ÿ¥ÿØ.');
            }
        }

        /**
         * üè• Show Insurance Status Error
         */
        function showInsuranceStatusError(message) {
            var errorHtml = `
                <div class="alert alert-danger">
                    <i class="fas fa-exclamation-circle"></i>
                    <strong>ÿÆÿ∑ÿß:</strong> ${message}
                </div>`;
            $('#primaryInsuranceStatus').html(errorHtml);
            $('#supplementaryInsuranceStatus').html(errorHtml);
        }

        /**
         * üè• Initialize Default Free Insurance Button
         */
        function initializeDefaultFreeInsuranceButton() {
            $('#createDefaultFreeInsuranceBtn').on('click', function() {
                var patientId = $('#PatientId').val();
                if (!patientId || patientId <= 0) {
                    showMedicalErrorMessage('ÿßÿ®ÿ™ÿØÿß ÿ®€åŸÖÿßÿ± ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ');
                    return;
                }

                if (confirm('ÿ¢€åÿß ŸÖ€å‚ÄåÿÆŸàÿßŸá€åÿØ ÿ®€åŸÖŸá Ÿæ€åÿ¥‚ÄåŸÅÿ±ÿ∂ ÿ¢ÿ≤ÿßÿØ ÿ®ÿ±ÿß€å ÿß€åŸÜ ÿ®€åŸÖÿßÿ± ÿß€åÿ¨ÿßÿØ ⁄©ŸÜ€åÿØÿü')) {
                    createDefaultFreeInsurance(patientId);
                }
            });
        }

        /**
         * üè• Initialize Patient Insurance Validation Button
         */
        function initializePatientInsuranceValidationButton() {
            $('#validatePatientInsuranceBtn').on('click', function() {
                var patientId = $('#PatientId').val();
                if (!patientId || patientId <= 0) {
                    showMedicalErrorMessage('ÿßÿ®ÿ™ÿØÿß ÿ®€åŸÖÿßÿ± ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ');
                    return;
                }

                validatePatientInsuranceWithNewService();
            });
        }

        /**
         * üè• Create Default Free Insurance
         */
        function createDefaultFreeInsurance(patientId) {
            var $button = $('#createDefaultFreeInsuranceBtn');
            var $loadingIndicator = $('#loadingIndicator');
            
            // Show loading state
            $button.prop('disabled', true).addClass('medical-loading');
            $loadingIndicator.show();

            $.ajax({
                url: '@Url.Action("CreateDefaultFreeInsurance", "PatientInsurance")',
                type: 'POST',
                data: {
                    patientId: patientId,
                    __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                },
                success: function(response) {
                    if (response.success) {
                        showMedicalSuccessMessage('ÿ®€åŸÖŸá Ÿæ€åÿ¥‚ÄåŸÅÿ±ÿ∂ ÿ¢ÿ≤ÿßÿØ ÿ®ÿß ŸÖŸàŸÅŸÇ€åÿ™ ÿß€åÿ¨ÿßÿØ ÿ¥ÿØ');
                        // Refresh the page to show the new insurance
                        setTimeout(function() {
                            window.location.reload();
                        }, 2000);
                    } else {
                        showMedicalErrorMessage(response.message || 'ÿÆÿ∑ÿß ÿØÿ± ÿß€åÿ¨ÿßÿØ ÿ®€åŸÖŸá Ÿæ€åÿ¥‚ÄåŸÅÿ±ÿ∂ ÿ¢ÿ≤ÿßÿØ');
                    }
                },
                error: function(xhr, status, error) {
                    console.error('ÿÆÿ∑ÿß ÿØÿ± ÿß€åÿ¨ÿßÿØ ÿ®€åŸÖŸá Ÿæ€åÿ¥‚ÄåŸÅÿ±ÿ∂ ÿ¢ÿ≤ÿßÿØ:', error);
                    showMedicalErrorMessage('ÿÆÿ∑ÿß ÿØÿ± ÿß€åÿ¨ÿßÿØ ÿ®€åŸÖŸá Ÿæ€åÿ¥‚ÄåŸÅÿ±ÿ∂ ÿ¢ÿ≤ÿßÿØ');
                },
                complete: function() {
                    $button.prop('disabled', false).removeClass('medical-loading');
                    $loadingIndicator.hide();
                }
            });
        }

        /**
         * üè• Show Medical Info Message
         */
        function showMedicalInfoMessage(message) {
            var alertHtml = `
                <div class="alert alert-info alert-dismissible fade show" role="alert">
                    <i class="fas fa-info-circle"></i> ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>`;
            $('.patient-insurance-form').prepend(alertHtml);
            
            setTimeout(function() {
                $('.alert-info').fadeOut();
            }, 5000);
        }

        /**
         * üè• Show Medical Success Message
         */
        function showMedicalSuccessMessage(message) {
            var alertHtml = `
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    <i class="fas fa-check-circle"></i> ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>`;
            $('.admin-form-body').prepend(alertHtml);
            
            setTimeout(function() {
                $('.alert-success').fadeOut();
            }, 5000);
        }

        /**
         * üè• Show Medical Error Message
         */
        function showMedicalErrorMessage(message) {
            var alertHtml = `
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <i class="fas fa-exclamation-circle"></i> ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>`;
            $('.admin-form-body').prepend(alertHtml);
            
            setTimeout(function() {
                $('.alert-danger').fadeOut();
            }, 5000);
        }
        
        /**
         * üè• Show Success Message
         */
        function showSuccessMessage(message) {
            showMedicalSuccessMessage(message);
        }
        
        /**
         * üè• Show Error Message
         */
        function showErrorMessage(message) {
            showMedicalErrorMessage(message);
        }
    </script>
}
