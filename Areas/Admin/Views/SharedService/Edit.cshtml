@model ClinicApp.ViewModels.SharedServiceCreateEditViewModel
@{
    ViewBag.Title = "ویرایش خدمت مشترک";
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
}

<div class="container-fluid">
    <!-- Header Section -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header bg-warning text-white">
                    <h4 class="mb-0">
                        <i class="fas fa-edit"></i>
                        ویرایش خدمت مشترک
                    </h4>
                    <p class="mb-0">ویرایش اطلاعات خدمت مشترک</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Form Section -->
    <div class="row mt-3">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="fas fa-edit"></i>
                        اطلاعات خدمت مشترک
                    </h5>
                </div>
                <div class="card-body">
                    @using (Html.BeginForm("Edit", "SharedService", FormMethod.Post, new { @class = "form-horizontal" }))
                    {
                        @Html.AntiForgeryToken()
                        @Html.HiddenFor(model => model.SharedServiceId)

                        if (!ViewData.ModelState.IsValid)
                        {
                            <div class="alert alert-danger">
                                <h6><i class="fas fa-exclamation-triangle"></i> خطاهای اعتبارسنجی:</h6>
                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                            </div>
                        }

                        <div class="row">
                            <!-- Service Selection -->
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.ServiceId, htmlAttributes: new { @class = "control-label required" })
                                    @Html.DropDownListFor(model => model.ServiceId, Model.Services, "انتخاب خدمت...", new { @class = "form-control", @required = "required" })
                                    @Html.ValidationMessageFor(model => model.ServiceId, "", new { @class = "text-danger" })
                                    <small class="form-text text-muted">خدمتی که می‌خواهید در دپارتمان‌ها مشترک باشد</small>
                                </div>
                            </div>

                            <!-- Department Selection -->
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.DepartmentId, htmlAttributes: new { @class = "control-label required" })
                                    @Html.DropDownListFor(model => model.DepartmentId, Model.Departments, "انتخاب دپارتمان...", new { @class = "form-control", @required = "required" })
                                    @Html.ValidationMessageFor(model => model.DepartmentId, "", new { @class = "text-danger" })
                                    <small class="form-text text-muted">دپارتمانی که این خدمت در آن مشترک خواهد بود</small>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <!-- Active Status -->
                            <div class="col-md-6">
                                <div class="form-group">
                                    <div class="form-check">
                                        @Html.CheckBoxFor(model => model.IsActive, new { @class = "form-check-input" })
                                        @Html.LabelFor(model => model.IsActive, htmlAttributes: new { @class = "form-check-label" })
                                    </div>
                                    <small class="form-text text-muted">آیا این خدمت مشترک فعال باشد؟</small>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <!-- Override Technical Factor -->
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.OverrideTechnicalFactor, htmlAttributes: new { @class = "control-label" })
                                    @Html.TextBoxFor(model => model.OverrideTechnicalFactor, new { @class = "form-control", @type = "number", @step = "0.01", @placeholder = "ضریب فنی Override (اختیاری)" })
                                    @Html.ValidationMessageFor(model => model.OverrideTechnicalFactor, "", new { @class = "text-danger" })
                                    <small class="form-text text-muted">ضریب فنی خاص این دپارتمان (اختیاری)</small>
                                </div>
                            </div>

                            <!-- Override Professional Factor -->
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.OverrideProfessionalFactor, htmlAttributes: new { @class = "control-label" })
                                    @Html.TextBoxFor(model => model.OverrideProfessionalFactor, new { @class = "form-control", @type = "number", @step = "0.01", @placeholder = "ضریب حرفه‌ای Override (اختیاری)" })
                                    @Html.ValidationMessageFor(model => model.OverrideProfessionalFactor, "", new { @class = "text-danger" })
                                    <small class="form-text text-muted">ضریب حرفه‌ای خاص این دپارتمان (اختیاری)</small>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <!-- Department Specific Notes -->
                            <div class="col-12">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.DepartmentSpecificNotes, htmlAttributes: new { @class = "control-label" })
                                    @Html.TextAreaFor(model => model.DepartmentSpecificNotes, new { @class = "form-control", rows = 4, placeholder = "توضیحات خاص این دپارتمان..." })
                                    @Html.ValidationMessageFor(model => model.DepartmentSpecificNotes, "", new { @class = "text-danger" })
                                    <small class="form-text text-muted">توضیحات خاص این دپارتمان در مورد این خدمت (اختیاری)</small>
                                </div>
                            </div>
                        </div>

        <!-- Price Calculation Section -->
        <div class="row" id="price-calculation-section" style="display: none;">
            <div class="col-12">
                <div class="card border-2" id="price-calculation-card">
                    <div class="card-header bg-info text-white">
                        <h6 class="mb-0">
                            <i class="fas fa-calculator"></i>
                            محاسبه قیمت خدمت مشترک
                        </h6>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="control-label font-weight-bold">قیمت محاسبه شده:</label>
                                    <div class="input-group input-group-lg">
                                        <div class="input-group-prepend">
                                            <span class="input-group-text bg-success text-white">
                                                <i class="fas fa-money-bill-wave"></i> ریال
                                            </span>
                                        </div>
                                        <input type="text" class="form-control text-success font-weight-bold" id="calculated-price" readonly style="font-size: 1.2em;">
                                    </div>
                                    <small class="form-text text-muted">قیمت نهایی بر اساس فرمول وزارت بهداشت</small>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="control-label font-weight-bold">جزئیات محاسبه:</label>
                                    <div id="calculation-details" class="border rounded p-3 bg-light" style="min-height: 120px;">
                                        <div class="text-center text-muted">
                                            <i class="fas fa-info-circle"></i>
                                            لطفاً خدمت و دپارتمان را انتخاب کنید
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-12">
                                <button type="button" class="btn btn-info btn-sm" id="calculate-price-btn">
                                    <i class="fas fa-calculator"></i>
                                    محاسبه مجدد قیمت
                                </button>
                                <button type="button" class="btn btn-secondary btn-sm ml-2" onclick="clearCalculation()">
                                    <i class="fas fa-eraser"></i>
                                    پاک کردن محاسبه
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

                        <!-- Form Actions -->
                        <div class="form-group">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <button type="submit" class="btn btn-warning">
                                        <i class="fas fa-save"></i>
                                        به‌روزرسانی خدمت مشترک
                                    </button>
                                    <button type="button" class="btn btn-secondary" onclick="resetForm()">
                                        <i class="fas fa-undo"></i>
                                        بازنشانی تغییرات
                                    </button>
                                </div>
                                <div>
                                    <a href="@Url.Action("Details", new { id = Model.SharedServiceId })" class="btn btn-info">
                                        <i class="fas fa-eye"></i>
                                        مشاهده جزئیات
                                    </a>
                                    <a href="@Url.Action("Index")" class="btn btn-light">
                                        <i class="fas fa-arrow-right"></i>
                                        بازگشت به لیست
                                    </a>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Audit Information Section -->
    <div class="row mt-3">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="fas fa-history"></i>
                        اطلاعات ردیابی
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <h6><i class="fas fa-plus-circle text-success"></i> اطلاعات ایجاد:</h6>
                            <ul class="list-unstyled">
                                <li><strong>تاریخ ایجاد:</strong> @Model.CreatedAt.ToString("yyyy/MM/dd HH:mm")</li>
                                <li><strong>ایجادکننده:</strong> @Model.CreatedByUserName</li>
                            </ul>
                        </div>
                        <div class="col-md-6">
                            <h6><i class="fas fa-edit text-warning"></i> اطلاعات آخرین ویرایش:</h6>
                            <ul class="list-unstyled">
                                @if (Model.UpdatedAt.HasValue)
                                {
                                    <li><strong>تاریخ ویرایش:</strong> @Model.UpdatedAt.Value.ToString("yyyy/MM/dd HH:mm")</li>
                                    <li><strong>ویرایش‌کننده:</strong> @Model.UpdatedByUserName</li>
                                }
                                else
                                {
                                    <li><span class="text-muted">هنوز ویرایش نشده است</span></li>
                                }
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Help Section -->
    <div class="row mt-3">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="fas fa-info-circle"></i>
                        راهنمای ویرایش
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <h6><i class="fas fa-lightbulb text-warning"></i> نکات مهم:</h6>
                            <ul class="list-unstyled">
                                <li><i class="fas fa-check text-success"></i> تغییر خدمت یا دپارتمان ممکن است بر سایر بخش‌ها تأثیر بگذارد</li>
                                <li><i class="fas fa-check text-success"></i> غیرفعال کردن خدمت، آن را از لیست خدمات قابل استفاده حذف می‌کند</li>
                                <li><i class="fas fa-check text-success"></i> تمام تغییرات در سیستم ثبت می‌شوند</li>
                            </ul>
                        </div>
                        <div class="col-md-6">
                            <h6><i class="fas fa-exclamation-triangle text-danger"></i> هشدارها:</h6>
                            <ul class="list-unstyled">
                                <li><i class="fas fa-warning text-warning"></i> تغییر خدمت ممکن است بر محاسبات قیمت تأثیر بگذارد</li>
                                <li><i class="fas fa-warning text-warning"></i> تغییر دپارتمان ممکن است دسترسی‌ها را تغییر دهد</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // ذخیره مقادیر اولیه برای بازنشانی
            var initialValues = {
                serviceId: $('#ServiceId').val(),
                departmentId: $('#DepartmentId').val(),
                isActive: $('#IsActive').is(':checked'),
                notes: $('#DepartmentSpecificNotes').val(),
                overrideTechnicalFactor: $('#OverrideTechnicalFactor').val(),
                overrideProfessionalFactor: $('#OverrideProfessionalFactor').val()
            };

            // محاسبه خودکار در بارگذاری صفحه اگر خدمت و دپارتمان انتخاب شده باشند
            console.log('🔄 [BROWSER] بررسی محاسبه خودکار در بارگذاری صفحه');
            if (initialValues.serviceId && initialValues.departmentId) {
                console.log('✅ [BROWSER] خدمت و دپارتمان از قبل انتخاب شده - شروع محاسبه');
                checkAndShowPriceCalculation();
            } else {
                console.log('❌ [BROWSER] خدمت یا دپارتمان انتخاب نشده - مخفی کردن بخش محاسبه');
                $('#price-calculation-section').hide();
            }

            // اعتبارسنجی فرم
            $('form').on('submit', function(e) {
                var isValid = true;
                var errors = [];

                // بررسی انتخاب خدمت
                if (!$('#ServiceId').val()) {
                    errors.push('انتخاب خدمت الزامی است');
                    isValid = false;
                }

                // بررسی انتخاب دپارتمان
                if (!$('#DepartmentId').val()) {
                    errors.push('انتخاب دپارتمان الزامی است');
                    isValid = false;
                }

                if (!isValid) {
                    e.preventDefault();
                    alert('خطاهای زیر را برطرف کنید:\n' + errors.join('\n'));
                }
            });

            // تغییر خدمت - نمایش اطلاعات خدمت
            $('#ServiceId').change(function() {
                var serviceId = $(this).val();
                console.log('🔄 [BROWSER] تغییر خدمت - ServiceId:', serviceId);
                if (serviceId) {
                    console.log('✅ [BROWSER] خدمت انتخاب شده:', serviceId);
                    checkAndShowPriceCalculation();
                } else {
                    console.log('❌ [BROWSER] خدمت انتخاب نشده');
                }
            });

            // تغییر دپارتمان - نمایش اطلاعات دپارتمان
            $('#DepartmentId').change(function() {
                var departmentId = $(this).val();
                console.log('🔄 [BROWSER] تغییر دپارتمان - DepartmentId:', departmentId);
                if (departmentId) {
                    console.log('✅ [BROWSER] دپارتمان انتخاب شده:', departmentId);
                    checkAndShowPriceCalculation();
                } else {
                    console.log('❌ [BROWSER] دپارتمان انتخاب نشده');
                }
            });

            // تغییر ضرایب Override
            $('#OverrideTechnicalFactor, #OverrideProfessionalFactor').on('input', function() {
                var fieldName = $(this).attr('id');
                var fieldValue = $(this).val();
                console.log('🔄 [BROWSER] تغییر فیلد Override - Field:', fieldName, 'Value:', fieldValue);
                
                if ($('#ServiceId').val() && $('#DepartmentId').val()) {
                    console.log('✅ [BROWSER] محاسبه مجدد به دلیل تغییر Override');
                    calculatePrice();
                } else {
                    console.log('❌ [BROWSER] نمی‌توان محاسبه کرد - ServiceId یا DepartmentId خالی است');
                }
            });

            // دکمه محاسبه قیمت
            $('#calculate-price-btn').click(function() {
                console.log('🔘 [BROWSER] کلیک روی دکمه محاسبه قیمت');
                calculatePrice();
            });

            // بررسی و نمایش بخش محاسبه قیمت
            function checkAndShowPriceCalculation() {
                var serviceId = $('#ServiceId').val();
                var departmentId = $('#DepartmentId').val();
                
                console.log('🔍 [BROWSER] بررسی نمایش بخش محاسبه');
                console.log('🔍 [BROWSER] ServiceId:', serviceId, 'DepartmentId:', departmentId);
                
                if (serviceId && departmentId) {
                    console.log('✅ [BROWSER] نمایش بخش محاسبه و شروع محاسبه');
                    $('#price-calculation-section').show();
                    calculatePrice();
                } else {
                    console.log('❌ [BROWSER] مخفی کردن بخش محاسبه');
                    $('#price-calculation-section').hide();
                }
            }

            // محاسبه قیمت
            function calculatePrice() {
                var serviceId = $('#ServiceId').val();
                var departmentId = $('#DepartmentId').val();
                var overrideTechnicalFactor = $('#OverrideTechnicalFactor').val();
                var overrideProfessionalFactor = $('#OverrideProfessionalFactor').val();

                console.log('🚀 [BROWSER] شروع محاسبه قیمت');
                console.log('🚀 [BROWSER] ServiceId:', serviceId);
                console.log('🚀 [BROWSER] DepartmentId:', departmentId);
                console.log('🚀 [BROWSER] Override Technical Factor:', overrideTechnicalFactor);
                console.log('🚀 [BROWSER] Override Professional Factor:', overrideProfessionalFactor);

                if (!serviceId || !departmentId) {
                    console.log('❌ [BROWSER] ServiceId یا DepartmentId خالی است');
                    return;
                }

                console.log('📡 [BROWSER] ارسال درخواست AJAX...');
                $.ajax({
                    url: '@Url.Action("CalculateSharedServicePriceForCreate")',
                    type: 'POST',
                    data: {
                        serviceId: serviceId,
                        departmentId: departmentId,
                        overrideTechnicalFactor: overrideTechnicalFactor,
                        overrideProfessionalFactor: overrideProfessionalFactor
                    },
                    success: function(response) {
                        console.log('✅ [BROWSER] دریافت پاسخ از سرور');
                        console.log('📊 [BROWSER] Raw Response:', response);
                        console.log('📊 [BROWSER] Response Type:', typeof response);
                        
                        // Parse response if it's a string
                        var parsedResponse = response;
                        if (typeof response === 'string') {
                            try {
                                parsedResponse = JSON.parse(response);
                                console.log('🔄 [BROWSER] Response parsed successfully');
                            } catch (parseError) {
                                console.error('❌ [BROWSER] خطا در parse کردن response:', parseError);
                                $('#calculated-price').val('خطا در پردازش پاسخ');
                                $('#calculation-details').html('<div class="alert alert-danger">خطا در پردازش پاسخ سرور</div>');
                                return;
                            }
                        }
                        
                        console.log('📊 [BROWSER] Parsed Response:', parsedResponse);
                        console.log('📊 [BROWSER] Response Success:', parsedResponse ? parsedResponse.success : 'undefined');
                        
                        try {
                            if (parsedResponse && parsedResponse.success) {
                                console.log('✅ [BROWSER] محاسبه موفق');
                                console.log('💰 [BROWSER] Calculated Price:', parsedResponse.calculatedPrice);
                                console.log('🔧 [BROWSER] Technical Component:', parsedResponse.technicalComponent);
                                console.log('👨‍⚕️ [BROWSER] Professional Component:', parsedResponse.professionalComponent);
                                console.log('🔧 [BROWSER] Technical Factor:', parsedResponse.technicalFactor);
                                console.log('👨‍⚕️ [BROWSER] Professional Factor:', parsedResponse.professionalFactor);
                                console.log('📝 [BROWSER] Calculation Formula:', parsedResponse.calculationFormula);
                                console.log('🔄 [BROWSER] Has Override:', parsedResponse.hasOverride);
                                console.log('📅 [BROWSER] Financial Year:', parsedResponse.financialYear);
                                // فرمت کردن قیمت با جداکننده هزارگان
                                console.log('🎨 [BROWSER] فرمت کردن قیمت...');
                                var formattedPrice = new Intl.NumberFormat('fa-IR').format(parsedResponse.calculatedPrice);
                                console.log('🎨 [BROWSER] Formatted Price:', formattedPrice);
                                $('#calculated-price').val(formattedPrice);
                                
                                // نمایش جزئیات محاسبه
                                console.log('🎨 [BROWSER] ایجاد HTML جزئیات...');
                                var detailsHtml = '<div class="calculation-details">' +
                                    '<strong>جزئیات محاسبه:</strong><br>' +
                                    '<div class="row mt-2">' +
                                    '<div class="col-6">' +
                                    '<small class="text-muted">جزء فنی:</small><br>' +
                                    '<strong>' + parsedResponse.technicalComponent + '</strong>' +
                                    '</div>' +
                                    '<div class="col-6">' +
                                    '<small class="text-muted">جزء حرفه‌ای:</small><br>' +
                                    '<strong>' + parsedResponse.professionalComponent + '</strong>' +
                                    '</div>' +
                                    '</div>' +
                                    '<div class="row mt-2">' +
                                    '<div class="col-6">' +
                                    '<small class="text-muted">ضریب فنی:</small><br>' +
                                    '<strong>' + new Intl.NumberFormat('fa-IR').format(parsedResponse.technicalFactor) + '</strong>' +
                                    '</div>' +
                                    '<div class="col-6">' +
                                    '<small class="text-muted">ضریب حرفه‌ای:</small><br>' +
                                    '<strong>' + new Intl.NumberFormat('fa-IR').format(parsedResponse.professionalFactor) + '</strong>' +
                                    '</div>' +
                                    '</div>' +
                                    '<div class="mt-2">' +
                                    '<small class="text-muted">فرمول محاسبه:</small><br>' +
                                    '<code>' + parsedResponse.calculationFormula + '</code>' +
                                    '</div>';
                                
                                if (parsedResponse.hasOverride) {
                                    detailsHtml += '<div class="mt-2"><span class="badge badge-warning">استفاده از ضرایب Override</span></div>';
                                }
                                
                                detailsHtml += '</div>';
                                console.log('🎨 [BROWSER] HTML جزئیات:', detailsHtml);
                                $('#calculation-details').html(detailsHtml);
                                
                                // نمایش موفقیت
                                console.log('✅ [BROWSER] نمایش موفقیت در UI');
                                $('#price-calculation-section').removeClass('border-danger').addClass('border-success');
                            } else {
                                console.log('❌ [BROWSER] محاسبه ناموفق');
                                console.log('❌ [BROWSER] Error Message:', parsedResponse ? parsedResponse.message : 'undefined');
                                $('#calculated-price').val('خطا در محاسبه');
                                $('#calculation-details').html('<div class="alert alert-danger">خطا: ' + (parsedResponse.message || 'خطای نامشخص') + '</div>');
                                $('#price-calculation-section').removeClass('border-success').addClass('border-danger');
                            }
                        } catch (e) {
                            console.error('❌ [BROWSER] خطا در پردازش response:', e);
                            console.error('❌ [BROWSER] Error Stack:', e.stack);
                            $('#calculated-price').val('خطا در پردازش');
                            $('#calculation-details').html('<div class="alert alert-danger">خطا در پردازش نتیجه محاسبه</div>');
                            $('#price-calculation-section').removeClass('border-success').addClass('border-danger');
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error('❌ [BROWSER] خطا در AJAX:');
                        console.error('❌ [BROWSER] XHR:', xhr);
                        console.error('❌ [BROWSER] Status:', status);
                        console.error('❌ [BROWSER] Error:', error);
                        console.error('❌ [BROWSER] Response Text:', xhr.responseText);
                        $('#calculated-price').val('خطا در ارتباط');
                        $('#calculation-details').html('<div class="alert alert-danger">خطا در ارتباط با سرور: ' + error + '</div>');
                        $('#price-calculation-section').removeClass('border-success').addClass('border-danger');
                    }
                });
            }

            // تابع پاک کردن محاسبه
            window.clearCalculation = function() {
                $('#calculated-price').val('');
                $('#calculation-details').html(
                    '<div class="text-center text-muted">' +
                    '<i class="fas fa-info-circle"></i>' +
                    ' لطفاً خدمت و دپارتمان را انتخاب کنید' +
                    '</div>'
                );
                $('#price-calculation-section').hide();
                $('#price-calculation-card').removeClass('border-success border-danger');
            };

            // تابع بازنشانی فرم
            window.resetForm = function() {
                if (confirm('آیا از بازنشانی تغییرات اطمینان دارید؟ تمام تغییرات انجام شده پاک خواهد شد.')) {
                    $('#ServiceId').val(initialValues.serviceId);
                    $('#DepartmentId').val(initialValues.departmentId);
                    $('#IsActive').prop('checked', initialValues.isActive);
                    $('#DepartmentSpecificNotes').val(initialValues.notes);
                    $('#OverrideTechnicalFactor').val(initialValues.overrideTechnicalFactor);
                    $('#OverrideProfessionalFactor').val(initialValues.overrideProfessionalFactor);
                    
                    // پاک کردن محاسبه
                    clearCalculation();
                    
                    // بررسی مجدد نمایش بخش محاسبه
                    checkAndShowPriceCalculation();
                }
            };
        });
    </script>
}
