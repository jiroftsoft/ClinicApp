@model ClinicApp.ViewModels.CreateInsuranceViewModel

@{
    // این فایل یک Partial View است و نیازی به Layout ندارد
    Layout = null;
}

@using (Html.BeginForm("Create", "Insurance", FormMethod.Post, new { id = "createInsuranceForm" }))
{
    @Html.AntiForgeryToken()

    <div class="modal-body">
        <div id="validationSummary" class="alert alert-danger d-none p-2 mb-3">
            <h6 class="alert-heading small"><i class="fas fa-exclamation-circle"></i> خطای اعتبارسنجی</h6>
            <ul id="validationErrors" class="mb-0 small ps-4"></ul>
        </div>

        <div class="row g-3">
            <div class="col-12">
                @Html.LabelFor(model => model.Name, new { @class = "form-label fw-bold" })
                @Html.TextBoxFor(model => model.Name, new { @class = "form-control", placeholder = "مثال: بیمه تامین اجتماعی" })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger small" })
            </div>

            <div class="col-12">
                @Html.LabelFor(model => model.Description, new { @class = "form-label fw-bold" })
                @Html.TextAreaFor(model => model.Description, new { @class = "form-control", rows = 2, placeholder = "توضیحات (اختیاری)" })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger small" })
            </div>

            <div class="col-md-6">
                @Html.LabelFor(model => model.DefaultPatientShare, "سهم بیمار (پیش‌فرض)", new { @class = "form-label fw-bold" })
                <div class="input-group">
                    @Html.TextBoxFor(model => model.DefaultPatientShare, new
                    {
                        @class = "form-control",
                        type = "number",
                        min = "0",
                        max = "100",
                        step = "0.01",
                        placeholder = "مثال: 30"
                    })
                    <span class="input-group-text">%</span>
                </div>
                @Html.ValidationMessageFor(model => model.DefaultPatientShare, "", new { @class = "text-danger small" })
            </div>

            <div class="col-md-6">
                @Html.LabelFor(model => model.DefaultInsurerShare, "سهم بیمه (پیش‌فرض)", new { @class = "form-label fw-bold" })
                <div class="input-group">
                    @Html.TextBoxFor(model => model.DefaultInsurerShare, new
                    {
                        @class = "form-control",
                        type = "number",
                        min = "0",
                        max = "100",
                        step = "0.01",
                        placeholder = "مثال: 70"
                    })
                    <span class="input-group-text">%</span>
                </div>
                @Html.ValidationMessageFor(model => model.DefaultInsurerShare, "", new { @class = "text-danger small" })
            </div>

            <div id="shareValidationWarning" class="col-12 alert alert-warning d-none p-2 small">
                <i class="fas fa-exclamation-triangle"></i> مجموع سهم بیمار و بیمه باید برابر با 100% باشد.
            </div>

            <div class="col-12">
                <div class="form-check form-switch">
                    @Html.CheckBoxFor(model => model.IsActive, new { @class = "form-check-input" })
                    @Html.LabelFor(model => model.IsActive, new { @class = "form-check-label fw-bold" })
                </div>
            </div>
        </div>
    </div>
    <div class="modal-footer">
        <button type="button" class="btn btn-secondary btn-medical" data-bs-dismiss="modal">
            <i class="fas fa-times me-1"></i> انصراف
        </button>
        <button type="submit" class="btn btn-primary-medical btn-medical" id="saveInsuranceBtn">
            <i class="fas fa-save me-1"></i> ایجاد بیمه
        </button>
    </div>
}

<script>
    // IIFE برای جلوگیری از تداخل با اسکریپت‌های دیگر
    (function ($) {
        "use strict";

        // این تابع از اسکریپت اصلی (Index.cshtml) فراخوانی می‌شود
        // تا منطق این فرم را راه‌اندازی کند.
        function setupCreateInsuranceForm() {
            const form = $('#createInsuranceForm');
            const patientShareInput = $('#DefaultPatientShare');
            const insurerShareInput = $('#DefaultInsurerShare');
            const shareWarning = $('#shareValidationWarning');

            // تابع برای محاسبه و بررسی سهم‌ها
            function calculateShares() {
                const patientShare = parseFloat(patientShareInput.val().replace(',', '.')) || 0;

                // محاسبه خودکار سهم بیمه
                if ($(document.activeElement).is(patientShareInput)) {
                    if (patientShare >= 0 && patientShare <= 100) {
                        insurerShareInput.val((100 - patientShare).toFixed(2));
                    }
                }

                const insurerShare = parseFloat(insurerShareInput.val().replace(',', '.')) || 0;

                if (Math.abs(patientShare + insurerShare - 100) > 0.01) {
                    shareWarning.removeClass('d-none');
                } else {
                    shareWarning.addClass('d-none');
                }
            }

            // اتصال رویداد به فیلدهای سهم
            patientShareInput.on('input', calculateShares);
            insurerShareInput.on('input', function () {
                const insurerShare = parseFloat($(this).val().replace(',', '.')) || 0;
                if (insurerShare >= 0 && insurerShare <= 100) {
                    patientShareInput.val((100 - insurerShare).toFixed(2));
                }
                calculateShares();
            });

            // اتصال رویداد ارسال فرم
            form.off('submit').on('submit', window.handleFormSubmit);

            // محاسبه اولیه در زمان بارگذاری فرم
            calculateShares();
        }

        // اجرای تابع راه‌اندازی
        $(document).ready(function () {
            setupCreateInsuranceForm();
        });

    })(jQuery);
</script>