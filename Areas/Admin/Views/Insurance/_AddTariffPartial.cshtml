@using ClinicApp.Interfaces
@model List<ClinicApp.Interfaces.ServiceSelectItem>
@{
    Layout = null; // این یک Partial View است
    var categories = ViewBag.Categories as IEnumerable<ServiceCategorySelectItem> ?? new List<ServiceCategorySelectItem>();
}

<style>
    .filter-options {
        display: flex;
        gap: 1rem;
        flex-wrap: wrap;
        padding: 0.75rem 1rem;
        background-color: #f8fafc;
        border-bottom: 1px solid #e0e6ed;
    }

    .filter-option label {
        font-weight: 500;
        margin-bottom: 0;
    }

    .service-category-badge {
        display: inline-block;
        background-color: #e9f2fa;
        color: #0d6ab2;
        border-radius: 12px;
        padding: 0.1rem 0.5rem;
        font-size: 0.8rem;
        font-weight: 500;
    }
</style>

<div class="modal-body p-0">
    <div class="card medical-services-card shadow-sm border-0">
        <div class="card-header bg-white d-flex justify-content-between align-items-center py-3">
            <div>
                <h6 class="card-title mb-0 d-flex align-items-center">
                    <i class="fas fa-stethoscope me-2 text-primary"></i>
                    انتخاب خدمت برای افزودن به تعرفه
                </h6>
            </div>
            <div class="input-group" style="width: 250px;">
                <input type="text" id="serviceSearch" class="form-control" placeholder="جستجو در خدمات...">
                <span class="input-group-text bg-white"><i class="fas fa-search"></i></span>
            </div>
        </div>
        <div class="filter-options">
            <div class="filter-option">
                <label for="categoryFilter" class="me-2">دسته‌بندی:</label>
                <select id="categoryFilter" class="form-select form-select-sm">
                    <option value="">همه</option>
                    @foreach (var category in categories)
                    {
                        <option value="@category.ServiceCategoryId">@category.Title</option>
                    }
                </select>
            </div>
            <div class="filter-option">
                <label for="sortFilter" class="me-2">مرتب‌سازی:</label>
                <select id="sortFilter" class="form-select form-select-sm">
                    <option value="usage-desc" selected>بیشترین استفاده</option>
                    <option value="title-asc">نام (صعودی)</option>
                    <option value="title-desc">نام (نزولی)</option>
                    <option value="price-desc">گران‌ترین</option>
                    <option value="price-asc">ارزان‌ترین</option>
                </select>
            </div>
        </div>
        <div class="card-body p-0 position-relative" style="min-height: 200px;">
            <div id="servicesListContainer">
            </div>
        </div>
    </div>
</div>
<div class="modal-footer">
    <button type="button" class="btn btn-secondary btn-medical" data-bs-dismiss="modal">
        <i class="fas fa-times me-1"></i> بستن
    </button>
</div>


<script>
    // IIFE برای جلوگیری از تداخل
    (function ($) {
        "use strict";

        // وضعیت کامپوننت
        const state = {
            services: @Html.Raw(Json.Encode(Model)),
            originalServices: @Html.Raw(Json.Encode(Model)),
            searchTimeout: null
        };

        function formatPrice(price) {
            if (isNaN(price) || price === null) return '-';
            return price.toLocaleString('fa-IR') + ' ریال';
        }

        function highlight(text, term) {
            if (!term) return text;
            const regex = new RegExp(`(${term})`, 'gi');
            return text.replace(regex, '<span class="search-highlight">$1</span>');
        }

        // تابع برای مرتب‌سازی آرایه خدمات
        function sortServices(services, sortType) {
            return services.sort((a, b) => {
                switch (sortType) {
                    case 'title-asc': return a.Title.localeCompare(b.Title, 'fa');
                    case 'title-desc': return b.Title.localeCompare(a.Title, 'fa');
                    case 'price-asc': return (a.Price || 0) - (b.Price || 0);
                    case 'price-desc': return (b.Price || 0) - (a.Price || 0);
                    case 'usage-desc':
                    default:
                        return (b.UsageCount || 0) - (a.UsageCount || 0);
                }
            });
        }

        // تابع اصلی برای فیلتر و رندر کردن لیست
        function applyFiltersAndRender() {
            const searchTerm = $('#serviceSearch').val().trim().toLowerCase();
            const categoryId = $('#categoryFilter').val();
            const sortType = $('#sortFilter').val();

            let filtered = state.originalServices;

            // اعمال فیلتر جستجو
            if (searchTerm) {
                filtered = filtered.filter(s =>
                    s.Title.toLowerCase().includes(searchTerm) ||
                    s.ServiceCode.toLowerCase().includes(searchTerm)
                );
            }

            // اعمال فیلتر دسته‌بندی
            if (categoryId) {
                filtered = filtered.filter(s => s.ServiceCategoryId == categoryId);
            }

            // اعمال مرتب‌سازی
            state.services = sortServices(filtered, sortType);
            renderServicesList(searchTerm);
        }

        // تابع برای رندر کردن HTML لیست
        function renderServicesList(searchTerm = '') {
            const container = $('#servicesListContainer');
            if (!state.services || state.services.length === 0) {
                container.html(`
                    <div class="empty-state">
                        <i class="fas fa-stethoscope"></i>
                        <h5>هیچ خدمتی یافت نشد</h5>
                        <p>می‌توانید فیلترها را تغییر دهید.</p>
                    </div>`);
                return;
            }

            const tableRows = state.services.map(service => {
                // بررسی اینکه آیا خدمت قبلا در جدول تعرفه‌ها وجود دارد یا نه
                const isAdded = $(`#tariffsContainer tr[data-service-id='${service.Id}']`).length > 0;

                return `
                    <tr data-id="${service.Id}">
                        <td>${highlight(service.Title, searchTerm)}</td>
                        <td><span class="badge bg-secondary">${highlight(service.ServiceCode, searchTerm)}</span></td>
                        <td>${formatPrice(service.Price)}</td>
                        <td><span class="service-category-badge">${service.CategoryTitle || '-'}</span></td>
                        <td class="text-center">
                            <button type="button" class="btn-service btn-add-service"
                                    data-service-id="${service.Id}"
                                    data-service-title="${service.Title}"
                                    title="افزودن به لیست تعرفه" ${isAdded ? 'disabled' : ''}>
                                <i class="fas ${isAdded ? 'fa-check' : 'fa-plus'}"></i>
                            </button>
                        </td>
                    </tr>`;
            }).join('');

            container.html(`
                <div class="table-responsive">
                    <table class="table services-table">
                        <thead><tr><th>نام</th><th>کد</th><th>قیمت پایه</th><th>دسته‌بندی</th><th class="text-center">افزودن</th></tr></thead>
                        <tbody>${tableRows}</tbody>
                    </table>
                </div>`);
        }

        // تابع برای مدیریت رویدادها
        function setupEventHandlers() {
            const container = $('#servicesListContainer');

            // رویدادهای فیلترها
            $('#serviceSearch').on('keyup', function () {
                clearTimeout(state.searchTimeout);
                state.searchTimeout = setTimeout(applyFiltersAndRender, 300);
            });
            $('#categoryFilter, #sortFilter').on('change', applyFiltersAndRender);

            // رویداد کلیک روی دکمه افزودن (با event delegation)
            container.off('click', '.btn-add-service').on('click', '.btn-add-service', function () {
                const btn = $(this);
                const serviceId = btn.data('service-id');
                const serviceTitle = btn.data('service-title');

                // پر کردن فرم اصلی در مودال با اطلاعات این خدمت
                $('#serviceSelector').val(serviceId).trigger('change');

                // بستن مودال انتخاب خدمت (این مودال) و نمایش پیام
                $('#tariffModal').modal('hide');
                window.showSuccessAlert(`خدمت "${serviceTitle}" برای تعریف تعرفه انتخاب شد.`);
            });
        }

        // اجرای اولیه
        $(document).ready(function() {
            applyFiltersAndRender();
            setupEventHandlers();
        });

    })(jQuery);
</script>