@* صفحه برنامه کاری پزشک - طراحی Ultimate برای محیط درمانی *@
@model ClinicApp.ViewModels.DoctorManagementVM.DoctorScheduleViewModel
@{
    ViewBag.Title = "برنامه کاری پزشک";
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
}

@section Styles {
    <link href="~/Content/plugins/DataTables/js/dataTables.bootstrap5.min.css" rel="stylesheet" />
    <link href="~/Content/plugins/SweetAlert2/sweetalert2.min.css" rel="stylesheet" />
    <link href="~/Content/plugins/persian-datepicker/persian-datepicker.min.css" rel="stylesheet" />
    <style>
        .doctor-header {
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            border-radius: 15px;
            padding: 2rem;
            color: white;
            margin-bottom: 2rem;
        }

        .doctor-info {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1.5rem;
            margin-bottom: 1.5rem;
        }

        .info-item {
            text-align: center;
        }

        .info-label {
            font-size: 0.9rem;
            opacity: 0.8;
            margin-bottom: 0.5rem;
        }

        .info-value {
            font-size: 1.1rem;
            font-weight: 600;
        }

        .schedule-card {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            margin-bottom: 1rem;
            box-shadow: 0 5px 15px rgba(0,0,0,0.08);
            border-left: 4px solid #28a745;
            transition: all 0.3s ease;
        }

            .schedule-card:hover {
                transform: translateY(-2px);
                box-shadow: 0 8px 25px rgba(0,0,0,0.12);
            }

            .schedule-card.inactive {
                border-left-color: #dc3545;
                opacity: 0.7;
            }

        .schedule-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }

        .schedule-title {
            font-size: 1.2rem;
            font-weight: 600;
            color: #333;
        }

        .schedule-status {
            padding: 0.25rem 0.75rem;
            border-radius: 15px;
            font-size: 0.8rem;
            font-weight: 500;
        }

        .status-active {
            background: #d4edda;
            color: #155724;
        }

        .status-inactive {
            background: #f8d7da;
            color: #721c24;
        }

        .schedule-details {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 1rem;
            margin-bottom: 1rem;
        }

        .detail-item {
            display: flex;
            flex-direction: column;
            align-items: center;
            text-align: center;
        }

        /* FullCalendar Customization for Persian Clinic Environment */
        .fc {
            font-family: 'Vazir', 'Tahoma', sans-serif;
            direction: rtl;
        }

        .fc-header-toolbar {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-radius: 10px;
            padding: 1rem;
            margin-bottom: 1rem;
        }

        .fc-button {
            background: rgba(255, 255, 255, 0.2) !important;
            border: 1px solid rgba(255, 255, 255, 0.3) !important;
            color: white !important;
            border-radius: 20px !important;
            padding: 0.5rem 1rem !important;
            font-weight: 500 !important;
            transition: all 0.3s ease !important;
        }

            .fc-button:hover {
                background: rgba(255, 255, 255, 0.3) !important;
                transform: translateY(-1px) !important;
            }

        .fc-button-active {
            background: rgba(255, 255, 255, 0.4) !important;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2) !important;
        }

        .fc-day-header {
            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            color: white !important;
            font-weight: 600 !important;
            padding: 1rem 0.5rem !important;
            border: none !important;
        }

        .fc-event-working-hours {
            border-radius: 8px !important;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15) !important;
            transition: all 0.3s ease !important;
        }

            .fc-event-working-hours:hover {
                transform: scale(1.02) !important;
                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2) !important;
            }

        .fc-timegrid-slot {
            border-color: #e9ecef !important;
        }

        .fc-timegrid-slot-label {
            color: #6c757d !important;
            font-weight: 500 !important;
        }

        .fc-toolbar-title {
            color: white !important;
            font-weight: 600 !important;
            font-size: 1.2rem !important;
        }

        .fc-col-header-cell {
            border-color: #dee2e6 !important;
        }

        .fc-daygrid-day {
            border-color: #dee2e6 !important;
        }

            .fc-daygrid-day:hover {
                background-color: rgba(102, 126, 234, 0.05) !important;
            }

        .fc-daygrid-day-number {
            color: #495057 !important;
            font-weight: 500 !important;
        }

        .fc-daygrid-day.fc-day-today {
            background-color: rgba(40, 167, 69, 0.1) !important;
        }

            .fc-daygrid-day.fc-day-today .fc-daygrid-day-number {
                background-color: #28a745 !important;
                color: white !important;
                border-radius: 50% !important;
                width: 30px !important;
                height: 30px !important;
                display: flex !important;
                align-items: center !important;
                justify-content: center !important;
            }

        text-align: center;


        .detail-label {
            font-size: 0.8rem;
            color: #6c757d;
            margin-bottom: 0.25rem;
        }

        .detail-value {
            font-weight: 600;
            color: #333;
        }

        .time-slots {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 1rem;
            margin-bottom: 1rem;
        }

        .time-slot {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.5rem;
            margin-bottom: 0.5rem;
            background: white;
            border-radius: 6px;
            border-left: 3px solid #4facfe;
        }

            .time-slot:last-child {
                margin-bottom: 0;
            }

        .time-range {
            font-weight: 600;
            color: #333;
        }

        .slot-type {
            padding: 0.25rem 0.5rem;
            border-radius: 10px;
            font-size: 0.75rem;
            font-weight: 500;
        }

        .type-consultation {
            background: #e3f2fd;
            color: #1976d2;
        }

        .type-surgery {
            background: #fce4ec;
            color: #c2185b;
        }

        .type-emergency {
            background: #fff3e0;
            color: #f57c00;
        }

        .action-buttons {
            display: flex;
            gap: 0.5rem;
            justify-content: flex-end;
        }

        .btn-action {
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-size: 0.85rem;
            font-weight: 500;
            transition: all 0.3s ease;
        }

            .btn-action:hover {
                transform: scale(1.05);
            }

        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(255,255,255,0.9);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 9999;
        }

        .spinner {
            width: 50px;
            height: 50px;
            border: 5px solid #f3f3f3;
            border-top: 5px solid #4facfe;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @@keyframes spin {
            0% {
                transform: rotate(0deg);
            }

            100% {
                transform: rotate(360deg);
            }
        }

        .empty-state {
            text-align: center;
            padding: 3rem;
            color: #6c757d;
        }

            .empty-state i {
                font-size: 4rem;
                margin-bottom: 1rem;
                opacity: 0.5;
            }

        .calendar-container {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            margin-bottom: 2rem;
            box-shadow: 0 5px 15px rgba(0,0,0,0.08);
        }

        .fc-event {
            border-radius: 6px;
            border: none;
            padding: 2px 4px;
            font-size: 0.85rem;
        }

        .fc-event-consultation {
            background: #4facfe;
            color: white;
        }

        .fc-event-surgery {
            background: #f093fb;
            color: white;
        }

        .fc-event-emergency {
            background: #f5576c;
            color: white;
        }
    </style>
}

<div class="loading-overlay">
    <div class="spinner"></div>
</div>

@Html.AntiForgeryToken()

<div class="container-fluid">
    <!-- Doctor Header -->
    <div class="doctor-header">
        <div class="row align-items-center">
            <div class="col-md-8">
                <h2 class="mb-2">
                    <i class="fas fa-user-md me-2"></i>
                    @(Model?.DoctorName ?? "پزشک")
                </h2>
                <p class="mb-0 opacity-75">مدیریت برنامه کاری و زمان‌بندی</p>
            </div>
            <div class="col-md-4 text-end">
                <a href="@Url.Action("AssignSchedule", new { doctorId = Model?.DoctorId ?? 0 })" class="btn btn-light">
                    <i class="fas fa-plus me-2"></i>
                    برنامه جدید
                </a>
                <button type="button" class="btn btn-warning ms-2" onclick="debugSchedule()">
                    <i class="fas fa-bug me-2"></i>
                    دیباگ
                </button>
            </div>
        </div>

        <div class="doctor-info">
            <div class="info-item">
                <div class="info-label">کد ملی</div>
                <div class="info-value">@(Model?.NationalCode ?? "-")</div>
            </div>
            <div class="info-item">
                <div class="info-label">شماره نظام پزشکی</div>
                <div class="info-value">@(Model?.MedicalCouncilCode ?? "-")</div>
            </div>
            <div class="info-item">
                <div class="info-label">تخصص</div>
                <div class="info-value">@(Model?.SpecializationNames != null && Model.SpecializationNames.Any() ? string.Join("، ", Model.SpecializationNames) : "ثبت نشده")</div>
            </div>
            <div class="info-item">
                <div class="info-label">وضعیت</div>
                <div class="info-value">
                    <span class="badge bg-success">فعال</span>
                </div>
            </div>
        </div>
    </div>

    <!-- Statistics -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="row">
                <div class="col-md-3">
                    <div class="card bg-primary text-white">
                        <div class="card-body text-center">
                            <h4 class="mb-1">@(Model?.TotalSchedules ?? 0)</h4>
                            <small>کل برنامه‌ها</small>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card bg-success text-white">
                        <div class="card-body text-center">
                            <h4 class="mb-1">@(Model?.ActiveSchedules ?? 0)</h4>
                            <small>برنامه‌های فعال</small>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card bg-warning text-white">
                        <div class="card-body text-center">
                            <h4 class="mb-1">@(Model?.TotalTimeSlots ?? 0)</h4>
                            <small>کل زمان‌ها</small>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card bg-info text-white">
                        <div class="card-body text-center">
                            <h4 class="mb-1">@(Model?.WeeklyHours ?? 0)</h4>
                            <small>ساعت‌های هفتگی</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Calendar View -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="calendar-container">
                <h5 class="mb-3">
                    <i class="fas fa-calendar-alt me-2"></i>
                    نمای تقویم برنامه کاری
                </h5>
                <div id="scheduleCalendar"></div>
            </div>
        </div>
    </div>

    <!-- Schedule List -->
    <div class="row">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-clock me-2"></i>
                        برنامه‌های کاری
                    </h5>
                </div>
                <div class="card-body">
                    @if (Model?.Schedules != null && Model.Schedules.Any())
                    {
                        foreach (var schedule in Model.Schedules)
                        {
                            <div class="schedule-card @(!schedule.IsActive ? "inactive" : "")">
                                <div class="schedule-header">
                                    <div class="schedule-title">@schedule.Title</div>
                                    <div class="schedule-status @(schedule.IsActive ? "status-active" : "status-inactive")">
                                        @(schedule.IsActive ? "فعال" : "غیرفعال")
                                    </div>
                                </div>

                                <div class="schedule-details">
                                    <div class="detail-item">
                                        <div class="detail-label">روز هفته</div>
                                        <div class="detail-value">@schedule.DayOfWeek</div>
                                    </div>
                                    <div class="detail-item">
                                        <div class="detail-label">تاریخ شروع</div>
                                        <div class="detail-value">@(schedule.StartDate?.ToString("yyyy/MM/dd") ?? "-")</div>
                                    </div>
                                    <div class="detail-item">
                                        <div class="detail-label">تاریخ پایان</div>
                                        <div class="detail-value">@(schedule.EndDate?.ToString("yyyy/MM/dd") ?? "نامحدود")</div>
                                    </div>
                                    <div class="detail-item">
                                        <div class="detail-label">وضعیت</div>
                                        <div class="detail-value">
                                            <span class="badge bg-@(schedule.IsActive ? "success" : "danger")">
                                                @(schedule.IsActive ? "فعال" : "غیرفعال")
                                            </span>
                                        </div>
                                    </div>
                                </div>

                                @if (schedule.TimeSlots != null && schedule.TimeSlots.Any())
                                {
                                    <div class="time-slots">
                                        <strong>زمان‌های کاری:</strong>
                                        @foreach (var slot in schedule.TimeSlots)
                                        {
                                            <div class="time-slot">
                                                <div class="time-range">
                                                    @slot.StartTime.ToString(@"hh\:mm") - @slot.EndTime.ToString(@"hh\:mm")
                                                </div>
                                                <div class="slot-type type-@(slot.Type?.ToLower() ?? "consultation")">
                                                    @(slot.Type ?? "مشاوره")
                                                </div>
                                            </div>
                                        }
                                    </div>
                                }

                                @if (!string.IsNullOrEmpty(schedule.Notes))
                                {
                                    <div class="mb-3">
                                        <strong>یادداشت:</strong>
                                        <p class="mb-0 text-muted">@schedule.Notes</p>
                                    </div>
                                }

                                <div class="action-buttons">
                                    @if (schedule.IsActive)
                                    {
                                        <button class="btn btn-warning btn-action" onclick="deactivateSchedule(@schedule.Id)">
                                            <i class="fas fa-pause me-1"></i>
                                            غیرفعال کردن
                                        </button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-success btn-action" onclick="activateSchedule(@schedule.Id)">
                                            <i class="fas fa-play me-1"></i>
                                            فعال کردن
                                        </button>
                                    }

                                    <button class="btn btn-info btn-action" onclick="editSchedule(@schedule.Id)">
                                        <i class="fas fa-edit me-1"></i>
                                        ویرایش
                                    </button>

                                    <button class="btn btn-danger btn-action" onclick="removeSchedule(@schedule.Id)">
                                        <i class="fas fa-trash me-1"></i>
                                        حذف
                                    </button>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="empty-state">
                            <i class="fas fa-clock"></i>
                            <h5>هیچ برنامه کاری یافت نشد</h5>
                            <p>این پزشک هنوز هیچ برنامه کاری تعریف نکرده است</p>
                            <a href="@Url.Action("AssignSchedule", new { doctorId = Model?.DoctorId ?? 0 })" class="btn btn-primary">
                                <i class="fas fa-plus me-2"></i>
                                تعریف اولین برنامه
                            </a>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/Content/plugins/DataTables/js/jquery.dataTables.min.js"></script>
    <script src="~/Content/plugins/DataTables/js/dataTables.bootstrap5.min.js"></script>
    <script src="~/Content/plugins/SweetAlert2/sweetalert2@11.js"></script>
    <script src="~/Content/plugins/persian-datepicker/persian-datepicker.min.js"></script>
    <script src="~/Content/plugins/FullCalendar/index.global.min.js"></script>

    <script>
        $(document).ready(function() {
            // Initialize FullCalendar
            initializeCalendar();
        });

        function showLoading() {
            $('.loading-overlay').show();
        }

        function hideLoading() {
            $('.loading-overlay').hide();
        }

        // تابع کمکی برای تبدیل تاریخ به فارسی
        function toPersianDate(date) {
            try {
                return date.toLocaleDateString('fa-IR', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric',
                    weekday: 'long'
                });
            } catch (e) {
                // fallback در صورت خطا
                return date.toLocaleDateString('fa-IR');
            }
        }

        // تابع کمکی برای نمایش بهتر هفته
        function getWeekDisplayText(startDate, endDate) {
            var startPersian = toPersianDate(startDate);
            var endPersian = toPersianDate(endDate);
            
            // اگر در یک ماه باشد
            if (startDate.getMonth() === endDate.getMonth()) {
                return `هفته ${startDate.getDate()} تا ${endDate.getDate()} ${startDate.toLocaleDateString('fa-IR', { month: 'long', year: 'numeric' })}`;
            }
            
            // اگر در دو ماه مختلف باشد
            return `هفته ${startDate.getDate()} ${startDate.toLocaleDateString('fa-IR', { month: 'long' })} تا ${endDate.getDate()} ${endDate.toLocaleDateString('fa-IR', { month: 'long', year: 'numeric' })}`;
        }

        function initializeCalendar() {
            var calendarEl = document.getElementById('scheduleCalendar');
            var calendar = new FullCalendar.Calendar(calendarEl, {
                initialView: 'timeGridWeek',
                headerToolbar: {
                    left: 'prev,next today',
                    center: 'title',
                    right: 'dayGridMonth,timeGridWeek,timeGridDay'
                },
                locale: 'fa',
                direction: 'rtl',
                firstDay: 6, // شنبه
                slotMinTime: '08:00:00',
                slotMaxTime: '22:00:00',
                slotDuration: '00:30:00',
                slotLabelFormat: {
                    hour: '2-digit',
                    minute: '2-digit',
                    hour12: false
                },
                dayHeaderFormat: { weekday: 'long' },
                titleFormat: {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric'
                },
                editable: false,
                dayMaxEventRows: 3, // جایگزین eventLimit
                height: 'auto',
                events: generateScheduleEvents(),
                eventClick: function(info) {
                    handleEventClick(info);
                },
                eventDidMount: function(info) {
                    // اضافه کردن tooltip فارسی
                    $(info.el).tooltip({
                        title: info.event.title,
                        placement: 'top',
                        trigger: 'hover'
                    });
                },
                loading: function(isLoading) {
                    if (isLoading) {
                        showLoading();
                    } else {
                        hideLoading();
                    }
                },
                // تنظیمات بهینه‌سازی برای محیط درمانی
                eventDisplay: 'block',
                eventTimeFormat: {
                    hour: '2-digit',
                    minute: '2-digit',
                    hour12: false
                },
                // تنظیمات RTL و فارسی
                buttonText: {
                    today: 'امروز',
                    month: 'ماه',
                    week: 'هفته',
                    day: 'روز'
                },
                // بهبود نمایش عنوان برای محیط درمانی
                viewDidMount: function(arg) {
                    // اضافه کردن اطلاعات اضافی به عنوان
                    var titleEl = arg.el.querySelector('.fc-toolbar-title');
                    if (titleEl && arg.view.type === 'timeGridWeek') {
                        var startDate = arg.view.currentStart;
                        var endDate = arg.view.currentEnd;
                        
                        // تنظیم عنوان بهتر برای هفته
                        var weekText = getWeekDisplayText(startDate, endDate);
                        titleEl.innerHTML = weekText;
                        
                        // اضافه کردن اطلاعات اضافی
                        var currentDate = new Date();
                        var persianDate = toPersianDate(currentDate);
                        titleEl.innerHTML += '<br><small class="text-muted">امروز: ' + persianDate + '</small>';
                    }
                }
            });
            calendar.render();
        }

        function generateScheduleEvents() {
            var events = [];
            var workDays = @Html.Raw(Json.Encode(Model?.WorkDays ?? new List<ClinicApp.ViewModels.DoctorManagementVM.WorkDayViewModel>()));

            // Debug logging
            console.log('WorkDays from server:', workDays);
            console.log('Model data:', @Html.Raw(Json.Encode(Model)));

            if (workDays && workDays.length > 0) {
                workDays.forEach(function(workDay) {
                    console.log('Processing workDay:', workDay);
                    
                    if (workDay.IsActive && workDay.TimeRanges) {
                        console.log('WorkDay is active, TimeRanges:', workDay.TimeRanges);
                        
                        workDay.TimeRanges.forEach(function(timeRange) {
                            console.log('Processing timeRange:', timeRange);
                            
                            if (timeRange.IsActive) {
                                console.log('TimeRange is active, creating event...');
                                
                                // محاسبه تاریخ برای این هفته
                                var today = new Date();
                                var targetDay = workDay.DayOfWeekForCalendar; // استفاده از property جدید
                                
                                console.log('Target day:', targetDay, 'Today day:', today.getDay());
                                
                                // محاسبه روز هفته برای تقویم (یکشنبه = 0، شنبه = 6)
                                var calendarDay = targetDay; // حالا مستقیماً از سرور می‌آید

                                var eventDate = new Date(today);
                                var daysToAdd = (calendarDay - today.getDay() + 7) % 7;
                                eventDate.setDate(today.getDate() + daysToAdd);

                                console.log('Event date calculated:', eventDate);

                                // تنظیم زمان
                                var startTimeStr = timeRange.StartTimeString; // استفاده از property جدید
                                var endTimeStr = timeRange.EndTimeString; // استفاده از property جدید
                                
                                console.log('Time strings:', startTimeStr, endTimeStr);
                                
                                // تبدیل string به ساعت و دقیقه
                                var startTime = startTimeStr.split(':');
                                var endTime = endTimeStr.split(':');

                                var startDateTime = new Date(eventDate);
                                startDateTime.setHours(parseInt(startTime[0]), parseInt(startTime[1]), 0);

                                var endDateTime = new Date(eventDate);
                                endDateTime.setHours(parseInt(endTime[0]), parseInt(endTime[1]), 0);

                                console.log('Start/End dateTime:', startDateTime, endDateTime);

                                // محاسبه مدت زمان برای نمایش بهتر
                                var durationMinutes = Math.round((endDateTime - startDateTime) / (1000 * 60));

                                var event = {
                                    title: `زمان کاری - ${workDay.DayName} (${durationMinutes} دقیقه)`,
                                    start: startDateTime.toISOString(),
                                    end: endDateTime.toISOString(),
                                    className: 'fc-event-working-hours',
                                    backgroundColor: '#28a745',
                                    borderColor: '#28a745',
                                    textColor: '#ffffff',
                                    allDay: false,
                                    extendedProps: {
                                        workDayId: workDay.Id,
                                        timeRangeId: timeRange.Id,
                                        dayName: workDay.DayName,
                                        duration: durationMinutes,
                                        startTime: startTimeStr,
                                        endTime: endTimeStr
                                    }
                                };
                                
                                console.log('Created event:', event);
                                events.push(event);
                            }
                        });
                    }
                });
            }

            console.log('Final events array:', events);
            return events;
        }

        function handleEventClick(info) {
            var startTime = new Date(info.event.start).toLocaleTimeString('fa-IR', {
                hour: '2-digit',
                minute: '2-digit',
                hour12: false
            });
            var endTime = new Date(info.event.end).toLocaleTimeString('fa-IR', {
                hour: '2-digit',
                minute: '2-digit',
                hour12: false
            });

            var dayName = info.event.extendedProps.dayName;
            var duration = info.event.extendedProps.duration;
            var startTimeStr = info.event.extendedProps.startTime;
            var endTimeStr = info.event.extendedProps.endTime;

            Swal.fire({
                title: 'جزئیات زمان کاری',
                html: `
                    <div class="text-right">
                        <div class="alert alert-info">
                            <strong>روز:</strong> ${dayName}
                        </div>
                        <div class="row">
                            <div class="col-6">
                                <strong>زمان شروع:</strong><br>
                                <span class="badge bg-primary">${startTimeStr}</span>
                            </div>
                            <div class="col-6">
                                <strong>زمان پایان:</strong><br>
                                <span class="badge bg-success">${endTimeStr}</span>
                            </div>
                        </div>
                        <div class="mt-3">
                            <strong>مدت زمان کاری:</strong><br>
                            <span class="badge bg-warning">${duration} دقیقه</span>
                        </div>
                        <div class="mt-3 text-muted">
                            <small>این زمان برای پذیرش بیماران و مشاوره پزشکی در نظر گرفته شده است.</small>
                        </div>
                    </div>
                `,
                icon: 'info',
                confirmButtonText: 'باشه',
                confirmButtonColor: '#28a745',
                width: '500px'
            });
        }

        function activateSchedule(scheduleId) {
            Swal.fire({
                title: 'فعال کردن برنامه',
                text: 'آیا از فعال کردن این برنامه اطمینان دارید؟',
                icon: 'question',
                showCancelButton: true,
                confirmButtonText: 'بله، فعال کن',
                cancelButtonText: 'انصراف',
                reverseButtons: true
            }).then((result) => {
                if (result.isConfirmed) {
                    showLoading();

                    $.ajax({
                        url: '@Url.Action("ActivateSchedule")',
                        type: 'POST',
                        data: { scheduleId: scheduleId },
                        success: function(response) {
                            if (response.success) {
                                Swal.fire({
                                    icon: 'success',
                                    title: 'موفق',
                                    text: 'برنامه با موفقیت فعال شد',
                                    timer: 2000,
                                    showConfirmButton: false
                                }).then(() => {
                                    location.reload();
                                });
                            } else {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'خطا',
                                    text: response.message || 'خطا در فعال کردن برنامه'
                                });
                            }
                        },
                        error: function() {
                            Swal.fire({
                                icon: 'error',
                                title: 'خطا',
                                text: 'خطا در ارتباط با سرور'
                            });
                        },
                        complete: function() {
                            hideLoading();
                        }
                    });
                }
            });
        }

        function deactivateSchedule(scheduleId) {
            Swal.fire({
                title: 'غیرفعال کردن برنامه',
                text: 'آیا از غیرفعال کردن این برنامه اطمینان دارید؟',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'بله، غیرفعال کن',
                cancelButtonText: 'انصراف',
                reverseButtons: true
            }).then((result) => {
                if (result.isConfirmed) {
                    showLoading();

                    $.ajax({
                        url: '@Url.Action("DeactivateSchedule")',
                        type: 'POST',
                        data: { scheduleId: scheduleId },
                        success: function(response) {
                            if (response.success) {
                                Swal.fire({
                                    icon: 'success',
                                    title: 'موفق',
                                    text: 'برنامه با موفقیت غیرفعال شد',
                                    timer: 2000,
                                    showConfirmButton: false
                                }).then(() => {
                                    location.reload();
                                });
                            } else {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'خطا',
                                    text: response.message || 'خطا در غیرفعال کردن برنامه'
                                });
                            }
                        },
                        error: function() {
                            Swal.fire({
                                icon: 'error',
                                title: 'خطا',
                                text: 'خطا در ارتباط با سرور'
                            });
                        },
                        complete: function() {
                            hideLoading();
                        }
                    });
                }
            });
        }

        function editSchedule(scheduleId) {
            window.location.href = '@Url.Action("Edit")?id=' + scheduleId;
        }

        function removeSchedule(scheduleId) {
            Swal.fire({
                title: 'حذف برنامه',
                text: 'آیا از حذف این برنامه اطمینان دارید؟ این عملیات غیرقابل بازگشت است.',
                icon: 'error',
                showCancelButton: true,
                confirmButtonText: 'بله، حذف کن',
                cancelButtonText: 'انصراف',
                reverseButtons: true,
                confirmButtonColor: '#dc3545'
            }).then((result) => {
                if (result.isConfirmed) {
                    showLoading();

                    $.ajax({
                        url: '@Url.Action("RemoveSchedule")',
                        type: 'POST',
                        data: { scheduleId: scheduleId },
                        success: function(response) {
                            if (response.success) {
                                Swal.fire({
                                    icon: 'success',
                                    title: 'موفق',
                                    text: 'برنامه با موفقیت حذف شد',
                                    timer: 2000,
                                    showConfirmButton: false
                                }).then(() => {
                                    location.reload();
                                });
                            } else {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'خطا',
                                    text: response.message || 'خطا در حذف برنامه'
                                });
                            }
                        },
                        error: function() {
                            Swal.fire({
                                icon: 'error',
                                title: 'خطا',
                                text: 'خطا در ارتباط با سرور'
                            });
                        },
                        complete: function() {
                            hideLoading();
                        }
                    });
                }
            });
        }

        function debugSchedule() {
            showLoading();
            
            $.ajax({
                url: '@Url.Action("DebugSchedule", new { doctorId = Model?.DoctorId ?? 0 })',
                type: 'GET',
                success: function(response) {
                    hideLoading();
                    
                    var debugHtml = `
                        <div class="text-right">
                            <h6>اطلاعات کلی:</h6>
                            <p><strong>موفقیت:</strong> ${response.Success}</p>
                            <p><strong>پیام:</strong> ${response.Message || 'بدون پیام'}</p>
                            <p><strong>داده موجود:</strong> ${response.HasData}</p>
                            <p><strong>شناسه پزشک:</strong> ${response.DoctorId || 'نامشخص'}</p>
                            <p><strong>نام پزشک:</strong> ${response.DoctorName || 'نامشخص'}</p>
                            
                            <h6 class="mt-3">آمار:</h6>
                            <p><strong>تعداد روزهای کاری:</strong> ${response.WorkDaysCount}</p>
                            <p><strong>روزهای کاری فعال:</strong> ${response.ActiveWorkDaysCount}</p>
                            <p><strong>کل بازه‌های زمانی:</strong> ${response.TotalTimeRanges}</p>
                            <p><strong>بازه‌های زمانی فعال:</strong> ${response.ActiveTimeRanges}</p>
                            <p><strong>کل برنامه‌ها:</strong> ${response.TotalSchedules}</p>
                            <p><strong>برنامه‌های فعال:</strong> ${response.ActiveSchedules}</p>
                            <p><strong>کل زمان‌ها:</strong> ${response.TotalTimeSlots}</p>
                            <p><strong>ساعت‌های هفتگی:</strong> ${response.WeeklyHours}</p>
                        </div>
                    `;
                    
                    if (response.WorkDaysDetails && response.WorkDaysDetails.length > 0) {
                        debugHtml += '<h6 class="mt-3">جزئیات روزهای کاری:</h6>';
                        response.WorkDaysDetails.forEach(function(workDay, index) {
                            debugHtml += `
                                <div class="border p-2 mb-2">
                                    <strong>روز ${index + 1}:</strong> ${workDay.DayName} (ID: ${workDay.Id})
                                    <br>DayOfWeek: ${workDay.DayOfWeek}, DayOfWeekForCalendar: ${workDay.DayOfWeekForCalendar}
                                    <br>فعال: ${workDay.IsActive}, تعداد بازه‌ها: ${workDay.TimeRangesCount}
                                </div>
                            `;
                            
                            if (workDay.TimeRanges && workDay.TimeRanges.length > 0) {
                                workDay.TimeRanges.forEach(function(timeRange, tIndex) {
                                    debugHtml += `
                                        <div class="ms-3 text-muted">
                                            بازه ${tIndex + 1}: ${timeRange.StartTime} - ${timeRange.EndTime}
                                            <br>StartTimeString: ${timeRange.StartTimeString}, EndTimeString: ${timeRange.EndTimeString}
                                            <br>فعال: ${timeRange.IsActive}
                                        </div>
                                    `;
                                });
                            }
                        });
                    }
                    
                    Swal.fire({
                        title: 'اطلاعات دیباگ برنامه کاری',
                        html: debugHtml,
                        width: '800px',
                        confirmButtonText: 'باشه',
                        confirmButtonColor: '#28a745'
                    });
                },
                error: function() {
                    hideLoading();
                    Swal.fire({
                        icon: 'error',
                        title: 'خطا',
                        text: 'خطا در دریافت اطلاعات دیباگ'
                    });
                }
            });
        }
    </script>
}
