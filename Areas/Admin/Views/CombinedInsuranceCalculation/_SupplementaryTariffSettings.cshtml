@model ClinicApp.ViewModels.Insurance.Supplementary.SupplementarySettings

@{
    ViewBag.Title = "تنظیمات بیمه تکمیلی";
}

<div class="card">
    <div class="card-header">
        <h5 class="card-title mb-0">
            <i class="fas fa-cogs text-primary"></i>
            تنظیمات بیمه تکمیلی
        </h5>
    </div>
    <div class="card-body">
        <form id="supplementarySettingsForm" class="needs-validation" novalidate>
            @Html.AntiForgeryToken()
            @Html.HiddenFor(m => m.PlanId)
            
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="planName" class="form-label">
                            <i class="fas fa-file-contract text-info"></i>
                            نام طرح بیمه
                        </label>
                        @Html.TextBoxFor(m => m.PlanName, new { @class = "form-control", required = "required" })
                        @Html.ValidationMessageFor(m => m.PlanName, "", new { @class = "invalid-feedback" })
                    </div>
                </div>
                
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="coveragePercent" class="form-label">
                            <i class="fas fa-percentage text-success"></i>
                            درصد پوشش بیمه تکمیلی
                        </label>
                        <div class="input-group">
                            @Html.TextBoxFor(m => m.CoveragePercent, new { 
                                @class = "form-control", 
                                type = "number", 
                                step = "0.01", 
                                min = "0", 
                                max = "100",
                                required = "required"
                            })
                            <div class="input-group-append">
                                <span class="input-group-text">%</span>
                            </div>
                        </div>
                        @Html.ValidationMessageFor(m => m.CoveragePercent, "", new { @class = "invalid-feedback" })
                    </div>
                </div>
            </div>
            
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="maxPayment" class="form-label">
                            <i class="fas fa-money-bill-wave text-warning"></i>
                            حداکثر مبلغ پرداخت (ریال)
                        </label>
                        @Html.TextBoxFor(m => m.MaxPayment, new { 
                            @class = "form-control", 
                            type = "number", 
                            step = "0.01", 
                            min = "0",
                            required = "required"
                        })
                        @Html.ValidationMessageFor(m => m.MaxPayment, "", new { @class = "invalid-feedback" })
                    </div>
                </div>
                
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="deductible" class="form-label">
                            <i class="fas fa-minus-circle text-danger"></i>
                            فرانشیز (ریال)
                        </label>
                        @Html.TextBoxFor(m => m.Deductible, new { 
                            @class = "form-control", 
                            type = "number", 
                            step = "0.01", 
                            min = "0"
                        })
                        @Html.ValidationMessageFor(m => m.Deductible, "", new { @class = "invalid-feedback" })
                    </div>
                </div>
            </div>
            
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <div class="form-check">
                            @Html.CheckBoxFor(m => m.IsActive, new { @class = "form-check-input" })
                            <label class="form-check-label" for="isActive">
                                <i class="fas fa-toggle-on text-success"></i>
                                فعال
                            </label>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="row">
                <div class="col-md-12">
                    <div class="form-group">
                        <label for="settingsJson" class="form-label">
                            <i class="fas fa-code text-info"></i>
                            تنظیمات JSON (اختیاری)
                        </label>
                        @Html.TextAreaFor(m => m.SettingsJson, new { 
                            @class = "form-control", 
                            rows = "5",
                            placeholder = "{\n  \"minAmountForCoverage\": 100000,\n  \"maxUsagePerYear\": 10,\n  \"waitingPeriodDays\": 30\n}"
                        })
                        @Html.ValidationMessageFor(m => m.SettingsJson, "", new { @class = "invalid-feedback" })
                        <small class="form-text text-muted">
                            برای تنظیمات پیچیده‌تر می‌توانید از JSON استفاده کنید
                        </small>
                    </div>
                </div>
            </div>
            
            <div class="form-actions">
                <button type="submit" class="btn btn-primary">
                    <i class="fas fa-save"></i>
                    ذخیره تنظیمات
                </button>
                <button type="button" class="btn btn-secondary" onclick="resetForm()">
                    <i class="fas fa-undo"></i>
                    بازنشانی
                </button>
                <button type="button" class="btn btn-info" onclick="loadDefaultSettings()">
                    <i class="fas fa-magic"></i>
                    تنظیمات پیش‌فرض
                </button>
            </div>
        </form>
    </div>
</div>

<div class="card mt-4">
    <div class="card-header">
        <h5 class="card-title mb-0">
            <i class="fas fa-info-circle text-info"></i>
            راهنمای تنظیمات
        </h5>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-6">
                <h6><i class="fas fa-percentage text-success"></i> درصد پوشش بیمه تکمیلی</h6>
                <p class="text-muted">
                    درصدی از مبلغ باقی‌مانده پس از کسر بیمه اصلی که بیمه تکمیلی پرداخت می‌کند.
                    مثال: اگر 80% باشد، بیمه تکمیلی 80% از مبلغ باقی‌مانده را پرداخت می‌کند.
                </p>
            </div>
            
            <div class="col-md-6">
                <h6><i class="fas fa-money-bill-wave text-warning"></i> حداکثر مبلغ پرداخت</h6>
                <p class="text-muted">
                    حداکثر مبلغی که بیمه تکمیلی در هر بار استفاده پرداخت می‌کند.
                    حتی اگر درصد پوشش بیشتر باشد، این مبلغ رعایت می‌شود.
                </p>
            </div>
        </div>
        
        <div class="row">
            <div class="col-md-6">
                <h6><i class="fas fa-minus-circle text-danger"></i> فرانشیز</h6>
                <p class="text-muted">
                    مبلغی که بیمار باید خودش پرداخت کند قبل از اینکه بیمه تکمیلی فعال شود.
                    این مبلغ از مبلغ کل خدمت کسر می‌شود.
                </p>
            </div>
            
            <div class="col-md-6">
                <h6><i class="fas fa-code text-info"></i> تنظیمات JSON</h6>
                <p class="text-muted">
                    برای تنظیمات پیچیده‌تر مانند حداقل مبلغ، حداکثر دفعات استفاده در سال،
                    دوره انتظار و سایر قوانین خاص بیمه تکمیلی.
                </p>
            </div>
        </div>
    </div>
</div>

<script>
$(document).ready(function() {
    // اعتبارسنجی فرم
    var form = document.getElementById('supplementarySettingsForm');
    form.addEventListener('submit', function(event) {
        event.preventDefault();
        event.stopPropagation();
        
        if (form.checkValidity()) {
            saveSupplementarySettings();
        }
        
        form.classList.add('was-validated');
    });
    
    // تابع ذخیره تنظیمات
    function saveSupplementarySettings() {
        var formData = $('#supplementarySettingsForm').serialize();
        
        // نمایش loading
        showLoading();
        
        $.ajax({
            url: '@Url.Action("UpdateSupplementarySettings", "CombinedInsuranceCalculation")',
            type: 'POST',
            data: formData,
            success: function(response) {
                hideLoading();
                
                if (response.success) {
                    showSuccessMessage('تنظیمات بیمه تکمیلی با موفقیت ذخیره شد');
                } else {
                    showErrorMessage(response.message || 'خطا در ذخیره تنظیمات');
                }
            },
            error: function(xhr, status, error) {
                hideLoading();
                showErrorMessage('خطا در ارتباط با سرور: ' + error);
            }
        });
    }
    
    // تابع بازنشانی فرم
    function resetForm() {
        $('#supplementarySettingsForm')[0].reset();
        $('#supplementarySettingsForm').removeClass('was-validated');
        showInfoMessage('فرم بازنشانی شد');
    }
    
    // تابع بارگذاری تنظیمات پیش‌فرض
    function loadDefaultSettings() {
        $('#CoveragePercent').val('80');
        $('#MaxPayment').val('5000000');
        $('#Deductible').val('100000');
        $('#IsActive').prop('checked', true);
        $('#SettingsJson').val('{\n  "minAmountForCoverage": 100000,\n  "maxUsagePerYear": 10,\n  "waitingPeriodDays": 30\n}');
        
        showInfoMessage('تنظیمات پیش‌فرض بارگذاری شد');
    }
    
    // نمایش loading
    function showLoading() {
        $('button[type="submit"]').prop('disabled', true).html('<i class="fas fa-spinner fa-spin"></i> در حال ذخیره...');
    }
    
    // مخفی کردن loading
    function hideLoading() {
        $('button[type="submit"]').prop('disabled', false).html('<i class="fas fa-save"></i> ذخیره تنظیمات');
    }
    
    // نمایش پیام موفقیت
    function showSuccessMessage(message) {
        toastr.success(message, 'موفقیت', {
            positionClass: 'toast-top-left',
            timeOut: 5000
        });
    }
    
    // نمایش پیام خطا
    function showErrorMessage(message) {
        toastr.error(message, 'خطا', {
            positionClass: 'toast-top-left',
            timeOut: 5000
        });
    }
    
    // نمایش پیام اطلاعات
    function showInfoMessage(message) {
        toastr.info(message, 'اطلاعات', {
            positionClass: 'toast-top-left',
            timeOut: 3000
        });
    }
    
    // اعتبارسنجی JSON
    $('#SettingsJson').on('blur', function() {
        var jsonText = $(this).val();
        if (jsonText.trim() !== '') {
            try {
                JSON.parse(jsonText);
                $(this).removeClass('is-invalid').addClass('is-valid');
            } catch (e) {
                $(this).removeClass('is-valid').addClass('is-invalid');
                showErrorMessage('فرمت JSON نامعتبر است');
            }
        }
    });
});
</script>
