@model ClinicApp.ViewModels.Insurance.InsuranceTariff.InsuranceTariffCreateEditViewModel

@{
    ViewBag.Title = "ایجاد تعرفه بیمه";
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
    ViewBag.Description = "تعریف تعرفه جدید برای خدمات درمانی و بیمه‌ای - سیستم کلینیک شفا";
    ViewBag.Keywords = "تعرفه بیمه, خدمات درمانی, کلینیک, بیمه, تعرفه";
}

<!-- 🚀 SEO: Meta Tags -->
@section MetaTags {
    <meta name="description" content="@ViewBag.Description" />
    <meta name="keywords" content="@ViewBag.Keywords" />
    <meta name="author" content="سیستم کلینیک شفا" />
    <meta name="robots" content="noindex, nofollow" />
}

@section Styles {
    <style>
        /* 🏥 MEDICAL: استایل‌های فرم درمانی */
        .medical-form-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 24px;
            font-family: 'Vazirmatn', 'Vazir', 'Tahoma', sans-serif;
            direction: rtl;
            text-align: right;
            background: #ffffff;
            min-height: 100vh;
            position: relative;
            z-index: 1;
        }

        /* 🚀 FIX: Override backgrounds */
        .main-content, body, html {
            background: #ffffff !important;
        }

        /* 🚀 PERFORMANCE: Select2 Remote Styling */
        .select2-container--default .select2-selection--single {
            height: 38px;
            border: 1px solid #ced4da;
            border-radius: 6px;
            padding: 0 8px;
        }

        /* 🏥 MEDICAL: Bulk Operation Styling */
        .bulk-operation-disabled {
            opacity: 0.6;
            pointer-events: none;
        }

        .bulk-operation-disabled .select2-container {
            opacity: 0.6;
            pointer-events: none;
        }

        .bulk-operation-disabled .form-control {
            background-color: #f8f9fa;
            border-color: #dee2e6;
        }

        #bulkOperationIndicator {
            border-left: 4px solid #17a2b8;
            background-color: #d1ecf1;
            border-color: #bee5eb;
        }

        #bulkProgressModal .modal-content {
            border-radius: 10px;
        }

        #bulkProgressModal .progress {
            height: 25px;
            border-radius: 12px;
        }

        #bulkProgressModal .progress-bar {
            border-radius: 12px;
        }

        .select2-container--default .select2-selection--single .select2-selection__rendered {
            line-height: 36px;
            padding-right: 20px;
        }

        .select2-container--default .select2-selection--single .select2-selection__arrow {
            height: 36px;
            right: 8px;
        }

        .select2-dropdown {
            border: 1px solid #ced4da;
            border-radius: 6px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .select2-results__option {
            padding: 8px 12px;
            font-size: 14px;
        }

        .select2-results__option--highlighted {
            background: #e3f2fd;
            color: #1976d2;
        }

        /* 🏥 MEDICAL: Form Styling */
        .medical-form-card {
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            border: 1px solid #e3f2fd;
            overflow: hidden;
        }

        .medical-form-header {
            background: linear-gradient(135deg, #1976d2 0%, #42a5f5 100%);
            color: white;
            padding: 20px;
            border-bottom: none;
        }

        .medical-form-body {
            padding: 30px;
        }

        .medical-form-group {
            margin-bottom: 24px;
        }

        .medical-form-label {
            font-weight: 600;
            color: #333;
            margin-bottom: 8px;
            display: block;
        }

        .medical-form-control {
            border: 1px solid #ced4da;
            border-radius: 6px;
            padding: 10px 12px;
            font-size: 14px;
            transition: all 0.2s ease;
            width: 100%;
        }

        .medical-form-control:focus {
            border-color: #1976d2;
            box-shadow: 0 0 0 0.2rem rgba(25, 118, 210, 0.25);
            outline: none;
        }

        .medical-form-control.is-invalid {
            border-color: #dc3545;
        }

        .medical-form-control.is-valid {
            border-color: #28a745;
        }

        .medical-form-help {
            font-size: 12px;
            color: #666;
            margin-top: 4px;
        }

        .medical-form-error {
            color: #dc3545;
            font-size: 12px;
            margin-top: 4px;
        }

        .medical-form-success {
            color: #28a745;
            font-size: 12px;
            margin-top: 4px;
        }

        /* 🏥 MEDICAL: Calculation Section */
        .medical-calculation-card {
            background: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: 8px;
            padding: 20px;
            margin-top: 20px;
        }

        .medical-calculation-header {
            background: #e3f2fd;
            color: #1976d2;
            padding: 12px 16px;
            border-radius: 6px;
            margin-bottom: 16px;
            font-weight: 600;
        }

        .medical-calculation-result {
            background: white;
            border: 1px solid #e9ecef;
            border-radius: 6px;
            padding: 16px;
            margin-bottom: 12px;
        }

        .medical-calculation-field {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 8px 0;
            border-bottom: 1px solid #f0f0f0;
        }

        .medical-calculation-field:last-child {
            border-bottom: none;
            font-weight: 600;
            color: #1976d2;
        }

        .medical-calculation-label {
            font-weight: 500;
            color: #333;
        }

        .medical-calculation-value {
            font-weight: 600;
            color: #1976d2;
        }

        /* 🏥 MEDICAL: Button Styling */
        .medical-btn {
            padding: 12px 24px;
            border-radius: 6px;
            font-weight: 600;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            transition: all 0.2s ease;
            border: none;
            cursor: pointer;
        }

        .medical-btn-primary {
            background: #1976d2;
            color: white;
        }

        .medical-btn-primary:hover {
            background: #1565c0;
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(25, 118, 210, 0.3);
        }

        .medical-btn-secondary {
            background: #6c757d;
            color: white;
        }

        .medical-btn-secondary:hover {
            background: #5a6268;
            transform: translateY(-1px);
        }

        .medical-btn-success {
            background: #28a745;
            color: white;
        }

        .medical-btn-success:hover {
            background: #218838;
            transform: translateY(-1px);
        }

        /* 🏥 MEDICAL: Loading States */
        .medical-loading {
            display: none;
            text-align: center;
            padding: 20px;
            color: #666;
        }

        .medical-loading.show {
            display: block;
        }

        .medical-spinner {
            border: 3px solid #f3f3f3;
            border-top: 3px solid #1976d2;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            animation: spin 1s linear infinite;
            margin: 0 auto 10px;
        }

        @@keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* 🏥 MEDICAL: Progress Indicator */
        .medical-progress {
            background: #e9ecef;
            border-radius: 10px;
            height: 6px;
            margin: 16px 0;
            overflow: hidden;
        }

        .medical-progress-bar {
            background: linear-gradient(90deg, #1976d2, #42a5f5);
            height: 100%;
            border-radius: 10px;
            transition: width 0.3s ease;
            width: 0%;
        }

        /* 🏥 MEDICAL: Responsive Design */
        @@media (max-width: 768px) {
            .medical-form-container {
                padding: 16px;
            }
            
            .medical-form-body {
                padding: 20px;
            }
            
            .medical-calculation-card {
                padding: 16px;
            }
        }

        /* 🏥 MEDICAL: Accessibility */
        .medical-form-control:focus {
            outline: 2px solid #1976d2;
            outline-offset: 2px;
        }

        .medical-btn:focus {
            outline: 2px solid #1976d2;
            outline-offset: 2px;
        }

        /* 🏥 MEDICAL: Print Styles */
        @@media print {
            .medical-form-container {
                box-shadow: none;
                border: 1px solid #ccc;
            }
            
            .medical-btn {
                display: none;
            }
        }
    </style>
}

<div class="medical-form-container">
    <div class="medical-form-card">
        <!-- Header -->
        <div class="medical-form-header">
            <h2 class="mb-2">
                <i class="fas fa-money-bill-wave"></i>
                ایجاد تعرفه بیمه جدید
            </h2>
            <p class="mb-0 opacity-75">تعریف تعرفه جدید برای خدمات درمانی و بیمه‌ای</p>
        </div>

        <!-- Form Body -->
        <div class="medical-form-body">
            @using (Html.BeginForm("Create", "InsuranceTariff", FormMethod.Post, new { @class = "medical-form", @id = "insuranceTariffForm" }))
            {
                @Html.AntiForgeryToken()
                @Html.HiddenFor(m => m.IdempotencyKey, new { @id = "idempotencyKey" })

                <!-- Service Selection Section -->
                <div class="row mb-4">
                    <div class="col-12">
                        <h5 class="text-primary mb-3">
                            <i class="fas fa-stethoscope"></i>
                            انتخاب خدمت
                        </h5>
                    </div>
                </div>

                <div class="row">
                    <!-- Department -->
                    <div class="col-md-6 mb-3">
                        <div class="medical-form-group">
                            <label class="medical-form-label" for="DepartmentId">
                                دپارتمان <span class="text-danger">*</span>
                            </label>
                            @Html.DropDownListFor(m => m.DepartmentId, Model.Departments, "دپارتمان مربوط به خدمت را انتخاب کنید", new { @class = "medical-form-control", @id = "DepartmentId", @required = "required" })
                            <div class="medical-form-help">دپارتمان مربوط به خدمت را انتخاب کنید</div>
                            @Html.ValidationMessageFor(m => m.DepartmentId, "", new { @class = "medical-form-error" })
                        </div>
                    </div>

                    <!-- Service Category -->
                    <div class="col-md-6 mb-3 service-selection-group">
                        <div class="medical-form-group">
                            <label class="medical-form-label" for="ServiceCategoryId">
                                سرفصل خدمت
                            </label>
                            @Html.DropDownListFor(m => m.ServiceCategoryId, Model.ServiceCategories, "دسته‌بندی خدمت را انتخاب کنید", new { @class = "medical-form-control", @id = "ServiceCategoryId" })
                            <div class="medical-form-help">دسته‌بندی خدمت را انتخاب کنید</div>
                            @Html.ValidationMessageFor(m => m.ServiceCategoryId, "", new { @class = "medical-form-error" })
                        </div>
                    </div>
                </div>

                <div class="row">
                    <!-- Service -->
                    <div class="col-md-6 mb-3 service-selection-group">
                        <div class="medical-form-group">
                            <label class="medical-form-label" for="ServiceId">
                                خدمت <span class="text-danger">*</span>
                            </label>
                            @Html.DropDownListFor(m => m.ServiceId, Model.Services, "خدمت مورد نظر را انتخاب کنید", new { @class = "medical-form-control", @id = "ServiceId" })
                            <div class="medical-form-help">خدمت مورد نظر را انتخاب کنید</div>
                            @Html.ValidationMessageFor(m => m.ServiceId, "", new { @class = "medical-form-error" })
                        </div>
                    </div>

                    <!-- All Services Checkbox -->
                    <div class="col-md-6 mb-3">
                        <div class="medical-form-group">
                            <div class="form-check">
                                <input type="checkbox" name="IsAllServices" id="IsAllServices" class="form-check-input" value="true" />
                                <label class="form-check-label" for="IsAllServices">
                                    ایجاد تعرفه برای همه خدمات
                                </label>
                            </div>
                            <div class="medical-form-help">در صورت انتخاب، تعرفه برای همه خدمات ایجاد می‌شود</div>
                        </div>
                    </div>
                </div>

                <!-- Insurance Information Section -->
                <div class="row mb-4">
                    <div class="col-12">
                        <h5 class="text-primary mb-3">
                            <i class="fas fa-shield-alt"></i>
                            اطلاعات بیمه
                        </h5>
                    </div>
                </div>

                <div class="row">
                    <!-- Insurance Provider -->
                    <div class="col-md-6 mb-3">
                        <div class="medical-form-group">
                            <label class="medical-form-label" for="InsuranceProviderId">
                                ارائه‌دهنده بیمه <span class="text-danger">*</span>
                            </label>
                            @Html.DropDownListFor(m => m.InsuranceProviderId, Model.InsuranceProviders, "ارائه‌دهنده بیمه را انتخاب کنید", new { @class = "medical-form-control", @id = "InsuranceProviderId", @required = "required" })
                            <div class="medical-form-help">ارائه‌دهنده بیمه را انتخاب کنید</div>
                            @Html.ValidationMessageFor(m => m.InsuranceProviderId, "", new { @class = "medical-form-error" })
                        </div>
                    </div>

                    <!-- Insurance Plan -->
                    <div class="col-md-6 mb-3">
                        <div class="medical-form-group">
                            <label class="medical-form-label" for="InsurancePlanId">
                                طرح بیمه <span class="text-danger">*</span>
                            </label>
                            @Html.DropDownListFor(m => m.InsurancePlanId, Model.InsurancePlans, "طرح بیمه مورد نظر را انتخاب کنید", new { @class = "medical-form-control", @id = "InsurancePlanId", @required = "required" })
                            <div class="medical-form-help">طرح بیمه مورد نظر را انتخاب کنید</div>
                            @Html.ValidationMessageFor(m => m.InsurancePlanId, "", new { @class = "medical-form-error" })
                        </div>
                    </div>
                </div>

                <!-- Tariff Calculation Section -->
                <div class="row mb-4">
                    <div class="col-12">
                        <h5 class="text-primary mb-3">
                            <i class="fas fa-calculator"></i>
                            قواعد محاسبه
                        </h5>
                    </div>
                </div>

                <div class="row">
                    <!-- Tariff Price -->
                    <div class="col-md-4 mb-3">
                        <div class="medical-form-group">
                            <label class="medical-form-label" for="TariffPrice">
                                قیمت تعرفه (ریال)
                            </label>
                            @Html.TextBoxFor(m => m.TariffPrice, new { @class = "medical-form-control", @id = "TariffPrice", @type = "number", @min = "0", @max = "2000000000", @step = "1", @inputmode = "numeric" })
                            <div class="medical-form-help">مبلغ تعرفه (ریال) - در صورت عدم ورود از قیمت پایه خدمت استفاده می‌شود</div>
                            @Html.ValidationMessageFor(m => m.TariffPrice, "", new { @class = "medical-form-error" })
                        </div>
                    </div>

                    <!-- Patient Share -->
                    <div class="col-md-4 mb-3">
                        <div class="medical-form-group">
                            <label class="medical-form-label" for="PatientShare">
                                سهم بیمار (ریال)
                            </label>
                            @Html.TextBoxFor(m => m.PatientShare, new { @class = "medical-form-control", @id = "PatientShare", @type = "number", @min = "0", @max = "2000000000", @step = "1", @inputmode = "numeric" })
                            <div class="medical-form-help">سهم بیمار (ریال)</div>
                            @Html.ValidationMessageFor(m => m.PatientShare, "", new { @class = "medical-form-error" })
                        </div>
                    </div>

                    <!-- Insurer Share -->
                    <div class="col-md-4 mb-3">
                        <div class="medical-form-group">
                            <label class="medical-form-label" for="InsurerShare">
                                سهم بیمه (ریال)
                            </label>
                            @Html.TextBoxFor(m => m.InsurerShare, new { @class = "medical-form-control", @id = "InsurerShare", @type = "number", @min = "0", @max = "2000000000", @step = "1", @inputmode = "numeric" })
                            <div class="medical-form-help">سهم بیمه (ریال)</div>
                            @Html.ValidationMessageFor(m => m.InsurerShare, "", new { @class = "medical-form-error" })
                        </div>
                    </div>
                </div>

                <!-- Auto Calculation Section -->
                <div class="medical-calculation-card">
                    <div class="medical-calculation-header">
                        <i class="fas fa-calculator"></i>
                        محاسبه خودکار
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <button type="button" class="medical-btn medical-btn-primary" id="calculateBtn">
                                <i class="fas fa-calculator"></i>
                                محاسبه خودکار
                            </button>
                        </div>
                        <div class="col-md-6">
                            <div class="medical-progress">
                                <div class="medical-progress-bar" id="progressBar"></div>
                            </div>
                        </div>
                    </div>

                    <!-- Calculation Results -->
                    <div id="calculationResults" style="display: none;">
                        <div class="medical-calculation-result">
                            <div class="medical-calculation-field">
                                <span class="medical-calculation-label">قیمت تعرفه:</span>
                                <span class="medical-calculation-value" id="calculatedTariffPrice">0 تومان</span>
                            </div>
                            <div class="medical-calculation-field">
                                <span class="medical-calculation-label">سهم بیمار:</span>
                                <span class="medical-calculation-value" id="calculatedPatientShare">0 تومان</span>
                            </div>
                            <div class="medical-calculation-field">
                                <span class="medical-calculation-label">سهم بیمه:</span>
                                <span class="medical-calculation-value" id="calculatedInsurerShare">0 تومان</span>
                            </div>
                        </div>
                    </div>

                    <!-- Calculation Summary -->
                    <div id="calculationSummary" class="medical-form-help"></div>
                </div>

                <!-- Form Actions -->
                <div class="row mt-4">
                    <div class="col-12">
                        <div class="d-flex justify-content-between">
                            <a href="@Url.Action("Index")" class="medical-btn medical-btn-secondary">
                                <i class="fas fa-arrow-right"></i>
                                بازگشت
                            </a>
                            <button type="submit" class="medical-btn medical-btn-success">
                                <i class="fas fa-save"></i>
                                ایجاد تعرفه
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Loading State -->
                <div class="medical-loading" id="loadingOverlay">
                    <div class="medical-spinner"></div>
                    <p>در حال پردازش...</p>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
    <script src="~/Scripts/select2.min.js"></script>
    <link href="~/Content/plugins/select2/css/select2.min.css" rel="stylesheet" />

    <script>
        (function () {
            // ---------- Utils ----------
            function convertPersianToEnglish(str) {
                if (!str) return str;
                return str.toString()
                    .replace(/[۰-۹]/g, d => '۰۱۲۳۴۵۶۷۸۹'.indexOf(d))
                    .replace(/[٠-٩]/g, d => '٠١٢٣٤٥٦٧٨٩'.indexOf(d))
                    .replace(/[,\s]/g, '');
            }

            function formatCurrency(value) {
                if (value === null || value === undefined || value === '') return '';
                var num = parseFloat(convertPersianToEnglish(value));
                if (isNaN(num)) return '';
                return num.toLocaleString('fa-IR');
            }

            function parseCurrency(value) {
                if (!value) return 0;
                var clean = convertPersianToEnglish(value.toString().replace(/[,\s]/g, ''));
                return parseFloat(clean) || 0;
            }

            // 🔧 CRITICAL FIX: حذف تبدیل واحد - سیستم بر مبنای ریال
            // تمام مقادیر در سیستم به صورت ریال هستند

            // ---------- Global State ----------
            var calculationTimeout, lastCalculationData = null, isCalculating = false;
            var lastCalcXhr = null, lastCid = null; // 🔧 CRITICAL FIX: جلوگیری از Race Condition

            // ---------- Initialize ----------
            $(document).ready(function () {
                console.log('🏥 MEDICAL: Insurance Tariff Create form initialized');

                // Generate idempotency key
                $('#idempotencyKey').val('create_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9));

                loadInitialDataParallel();
                setupFormProtection();
                setupCurrencyFormatting();
                setupDateValidation();
                setupPersianNumberConversion();
                setupNumberInputHandling();
                setupFormValidation();
                setupAccessibility();
                setupAutoCalculation();
            });

            // ---------- Cascading Dropdowns ----------
            function setupCascadingDropdowns() {
                $('#DepartmentId').off('change').on('change', function () {
                    var departmentId = $(this).val();
                    if (departmentId) loadServiceCategories(departmentId); else clearServiceCategories();
                    clearServices();
                });

                $('#ServiceCategoryId').off('change').on('change', function () {
                    var categoryId = $(this).val();
                    if (categoryId) loadServices(categoryId); else clearServices();
                });

                $('#InsuranceProviderId').off('change').on('change', function () {
                    var providerId = $(this).val();
                    if (providerId) loadInsurancePlans(providerId); else clearInsurancePlans();
                });
            }

            function loadServiceCategories(departmentId) {
                $('#ServiceCategoryId').prop('disabled', true).html('<option value="">در حال بارگذاری...</option>');
                $.ajax({
                    url: '@Url.Action("GetServiceCategories", "InsuranceTariff")',
                    type: 'GET',
                    dataType: 'json',
                    cache: false,
                    headers: {'Cache-Control':'no-cache, no-store, must-revalidate','Pragma':'no-cache','Expires':'0'},
                    data: { departmentId: departmentId },
                    success: function (response) {
                        if (response.success && Array.isArray(response.data) && response.data.length) {
                            var opts = '<option value="">انتخاب دسته‌بندی خدمت</option>';
                            $.each(response.data, function (_, item) { 
                                opts += '<option value="' + item.id + '">' + item.name + '</option>'; 
                            });
                            $('#ServiceCategoryId').html(opts).prop('disabled', false);
                        } else {
                            $('#ServiceCategoryId').html('<option value="">هیچ دسته‌بندی یافت نشد</option>').prop('disabled', false);
                        }
                    },
                    error: function () {
                        $('#ServiceCategoryId').html('<option value="">خطا در بارگذاری</option>').prop('disabled', false);
                    }
                });
            }

            function loadServices(categoryId) {
                if ($.fn.select2 && $('#ServiceId').data('select2')) {
                    $('#ServiceId').select2('destroy');
                }
                $('#ServiceId').empty();

                $('#ServiceId').select2({
                    placeholder: 'خدمت مورد نظر را انتخاب کنید',
                    allowClear: true,
                    minimumInputLength: 2,
                    ajax: {
                        url: '@Url.Action("GetServices", "InsuranceTariff")',
                        dataType: 'json',
                        cache: false,
                        delay: 300,
                        headers: {'Cache-Control':'no-cache, no-store, must-revalidate','Pragma':'no-cache','Expires':'0'},
                        data: function (params) {
                            return { serviceCategoryId: categoryId, search: params.term, page: params.page || 1, pageSize: 20 };
                        },
                        processResults: function (data) {
                            if (data.success && Array.isArray(data.data)) {
                                var results = data.data.map(function (x) { 
                                    return { id: x.id, text: x.name, description: x.description || '' }; 
                                });
                                return { results: results, pagination: { more: !!data.hasMore } };
                            }
                            return { results: [] };
                        }
                    },
                    templateResult: function (s) {
                        if (s.loading) return s.text;
                        // 🔧 CRITICAL FIX: ضد XSS در Select2
                        var $root = $('<div class="service-option"/>');
                        $('<div class="service-name"/>').text(s.text).appendTo($root);
                        if (s.description) $('<div class="service-description"/>').text(s.description).appendTo($root);
                        return $root;
                    },
                    templateSelection: function (s) { return s.text || ''; }
                });
                if (categoryId) $('#ServiceId').trigger('change');
            }

            function loadInsuranceProviders() {
                return new Promise(function (resolve, reject) {
                    if ($.fn.select2 && $('#InsuranceProviderId').data('select2')) {
                        $('#InsuranceProviderId').select2('destroy');
                    }
                    $('#InsuranceProviderId').empty();

                    $('#InsuranceProviderId').select2({
                        placeholder: 'ارائه‌دهنده بیمه را انتخاب کنید',
                        allowClear: true,
                        minimumInputLength: 1,
                        ajax: {
                            url: '@Url.Action("GetInsuranceProviders", "InsuranceTariff")',
                            dataType: 'json',
                            cache: false,
                            delay: 300,
                            headers: {'Cache-Control':'no-cache, no-store, must-revalidate','Pragma':'no-cache','Expires':'0'},
                            data: function (p) { return { search: p.term, page: p.page || 1, pageSize: 10 }; },
                            processResults: function (data) {
                                if (data.success && Array.isArray(data.data)) {
                                    var results = data.data.map(function (x) { 
                                        return { id: x.id, text: x.name, description: x.description || '' }; 
                                    });
                                    return { results: results, pagination: { more: !!data.hasMore } };
                                }
                                return { results: [] };
                            },
                            error: function (xhr, s, e) { reject(e); }
                        },
                        templateResult: function (p) {
                            if (p.loading) return p.text;
                            // 🔧 CRITICAL FIX: ضد XSS در Select2
                            var $root = $('<div class="provider-option"/>');
                            $('<div class="provider-name"/>').text(p.text).appendTo($root);
                            if (p.description) $('<div class="provider-description"/>').text(p.description).appendTo($root);
                            return $root;
                        },
                        templateSelection: function (p) { return p.text || ''; }
                    });
                    resolve([]);
                });
            }

            function loadInsurancePlans(providerId) {
                if ($.fn.select2 && $('#InsurancePlanId').data('select2')) {
                    $('#InsurancePlanId').select2('destroy');
                }
                $('#InsurancePlanId').empty();

                $('#InsurancePlanId').select2({
                    placeholder: 'طرح بیمه مورد نظر را انتخاب کنید',
                    allowClear: true,
                    minimumInputLength: 1,
                    ajax: {
                        url: '@Url.Action("GetInsurancePlans", "InsuranceTariff")',
                        dataType: 'json',
                        cache: false,
                        delay: 300,
                        headers: {'Cache-Control':'no-cache, no-store, must-revalidate','Pragma':'no-cache','Expires':'0'},
                        data: function (p) { return { providerId: providerId, search: p.term, page: p.page || 1, pageSize: 15 }; },
                        processResults: function (data) {
                            if (data.success && Array.isArray(data.data)) {
                                var results = data.data.map(function (x) { 
                                    return { id: x.id, text: x.name, planCode: x.planCode || '', coveragePercent: x.coveragePercent || 0 }; 
                                });
                                return { results: results, pagination: { more: !!data.hasMore } };
                            }
                            return { results: [] };
                        }
                    },
                    templateResult: function (plan) {
                        if (plan.loading) return plan.text;
                        // 🔧 CRITICAL FIX: ضد XSS در Select2
                        var $root = $('<div class="plan-option"/>');
                        $('<div class="plan-name"/>').text(plan.text).appendTo($root);
                        if (plan.planCode) $('<div class="plan-code"/>').text('کد: ' + plan.planCode).appendTo($root);
                        if (plan.coveragePercent) $('<div class="plan-coverage"/>').text('پوشش: ' + plan.coveragePercent + '%').appendTo($root);
                        return $root;
                    },
                    templateSelection: function (plan) { return plan.text || ''; }
                });
                if (providerId) $('#InsurancePlanId').trigger('change');
            }

            // ---------- Clear Helpers ----------
            function clearServiceCategories() { 
                $('#ServiceCategoryId').html('<option value="">انتخاب دسته‌بندی خدمت</option>').prop('disabled', false); 
            }
            function clearServices() { 
                if ($.fn.select2 && $('#ServiceId').data('select2')) {
                    $('#ServiceId').select2('destroy');
                }
                $('#ServiceId').empty(); 
            }
            function clearInsurancePlans() { 
                if ($.fn.select2 && $('#InsurancePlanId').data('select2')) {
                    $('#InsurancePlanId').select2('destroy');
                }
                $('#InsurancePlanId').empty(); 
            }

            // ---------- Parallel Data Loading ----------
            function loadInitialDataParallel() {
                console.log('🚀 PERFORMANCE: Starting parallel data loading...');
                var startTime = performance.now();
                
                Promise.all([
                    loadInsuranceProviders(),
                    loadDepartments()
                ]).then(function() {
                    var duration = performance.now() - startTime;
                    console.log('🚀 PERFORMANCE: Parallel loading completed in ' + duration.toFixed(2) + 'ms');
                }).catch(function(error) {
                    console.error('🚀 PERFORMANCE: Parallel loading failed:', error);
                });
            }

            function loadDepartments() {
                return new Promise(function (resolve, reject) {
                    $.ajax({
                        url: '@Url.Action("GetDepartments", "InsuranceTariff")',
                        type: 'GET',
                        dataType: 'json',
                        cache: false,
                        headers: {'Cache-Control':'no-cache, no-store, must-revalidate','Pragma':'no-cache','Expires':'0'},
                        success: function (response) {
                            if (response.success && Array.isArray(response.data)) {
                                console.log('🚀 PERFORMANCE: Departments loaded successfully');
                                resolve(response.data);
                            } else {
                                reject('No departments found');
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error('🚀 PERFORMANCE: Failed to load departments:', error);
                            reject(error);
                        }
                    });
                });
            }

            // ---------- Form Protection ----------
            function setupFormProtection() {
                // 🔧 CRITICAL FIX: جلوگیری از double-submit با فلگ
                $('#insuranceTariffForm').on('submit', function() {
                    var submitBtn = $(this).find('button[type="submit"]');
                    if (submitBtn.data('submitting') || submitBtn.prop('disabled')) {
                        return false;
                    }
                    submitBtn.data('submitting', true).prop('disabled', true);
                    // 🔧 CRITICAL FIX: غیرفعال‌سازی تا دریافت پاسخ نهایی
                    // setTimeout حذف شد - دکمه تا دریافت پاسخ غیرفعال می‌ماند
                });

                // 🛡️ P0 FIX: Setup custom validation
                setupCustomValidation();
                
                // 🏥 MEDICAL: Setup bulk operation handling
                setupBulkOperationHandling();
                
                // Warn before leaving with unsaved changes
                var formChanged = false;
                $('.medical-form-control').on('change input', function() {
                    formChanged = true;
                });

                $(window).on('beforeunload', function() {
                    if (formChanged) {
                        return 'تغییرات ذخیره نشده‌ای وجود دارد. آیا مطمئن هستید؟';
                    }
                });

                $('#insuranceTariffForm').on('submit', function() {
                    formChanged = false;
                });
            }

            // ---------- Bulk Operation Handling ----------
            function setupBulkOperationHandling() {
                console.log('🏥 MEDICAL: Setting up bulk operation handling');
                
                // Handle IsAllServices checkbox change
                $('#IsAllServices').on('change', function() {
                    var isChecked = $(this).is(':checked');
                    console.log('🏥 MEDICAL: IsAllServices changed:', isChecked);
                    
                    if (isChecked) {
                        // Show confirmation dialog
                        showBulkOperationConfirmation();
                        
                        // Disable service-related dropdowns
                        disableServiceDropdowns();
                        
                        // Clear service selections
                        clearServiceSelections();
                        
                        // Update form labels and help text
                        updateFormForBulkOperation();
                    } else {
                        // Enable service-related dropdowns
                        enableServiceDropdowns();
                        
                        // Restore form labels and help text
                        restoreFormForSingleOperation();
                    }
                });
                
                // Handle form submission for bulk operation
                $('#insuranceTariffForm').on('submit', function(e) {
                    if ($('#IsAllServices').is(':checked')) {
                        e.preventDefault();
                        showBulkOperationProgress();
                        submitBulkOperation();
                    }
                });
            }
            
            function showBulkOperationConfirmation() {
                var confirmationMessage = `
                    <div class="alert alert-warning">
                        <h5><i class="fas fa-exclamation-triangle"></i> تایید عملیات انبوه</h5>
                        <p>آیا مطمئن هستید که می‌خواهید تعرفه را برای <strong>همه خدمات</strong> ایجاد کنید؟</p>
                        <p class="mb-0"><small>این عملیات ممکن است زمان‌بر باشد و تعرفه‌های موجود را بررسی می‌کند.</small></p>
                    </div>
                `;
                
                // Show confirmation in a modal or alert
                if (typeof Swal !== 'undefined') {
                    Swal.fire({
                        title: 'تایید عملیات انبوه',
                        html: confirmationMessage,
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'بله، ادامه بده',
                        cancelButtonText: 'لغو',
                        confirmButtonColor: '#d33',
                        cancelButtonColor: '#3085d6'
                    }).then((result) => {
                        if (!result.isConfirmed) {
                            $('#IsAllServices').prop('checked', false);
                            enableServiceDropdowns();
                            restoreFormForSingleOperation();
                        }
                    });
                } else {
                    // Fallback to browser confirm
                    if (!confirm('آیا مطمئن هستید که می‌خواهید تعرفه را برای همه خدمات ایجاد کنید؟')) {
                        $('#IsAllServices').prop('checked', false);
                        enableServiceDropdowns();
                        restoreFormForSingleOperation();
                    }
                }
            }
            
            function disableServiceDropdowns() {
                console.log('🏥 MEDICAL: Disabling service dropdowns for bulk operation');
                
                // Disable service category dropdown
                $('#ServiceCategoryId').prop('disabled', true).addClass('disabled');
                
                // Disable service dropdown
                $('#ServiceId').prop('disabled', true).addClass('disabled');
                
                // 🚀 P0 FIX: حذف required attribute برای bulk operation
                $('#ServiceId').removeAttr('required');
                $('#ServiceCategoryId').removeAttr('required');
                
                // Add visual indicators
                $('.service-selection-group').addClass('bulk-operation-disabled');
            }
            
            function enableServiceDropdowns() {
                console.log('🏥 MEDICAL: Enabling service dropdowns for single operation');
                
                // Enable service category dropdown
                $('#ServiceCategoryId').prop('disabled', false).removeClass('disabled');
                
                // Enable service dropdown
                $('#ServiceId').prop('disabled', false).removeClass('disabled');
                
                // 🚀 P0 FIX: اضافه کردن required attribute برای single operation
                $('#ServiceId').attr('required', 'required');
                
                // Remove visual indicators
                $('.service-selection-group').removeClass('bulk-operation-disabled');
            }
            
            function clearServiceSelections() {
                console.log('🏥 MEDICAL: Clearing service selections for bulk operation');
                
                // Clear service category selection
                $('#ServiceCategoryId').val(null).trigger('change');
                
                // Clear service selection
                $('#ServiceId').val(null).trigger('change');
            }
            
            function updateFormForBulkOperation() {
                console.log('🏥 MEDICAL: Updating form for bulk operation');
                
                // 🔧 CRITICAL FIX: فقط راهنمای همان سکشن را تغییر دهید
                $('#IsAllServices').closest('.medical-form-group').find('.medical-form-help')
                    .text('تعرفه برای همه خدمات فعال ایجاد خواهد شد');
                
                // Add bulk operation indicator
                if (!$('#bulkOperationIndicator').length) {
                    $('<div id="bulkOperationIndicator" class="alert alert-info mt-2">' +
                        '<i class="fas fa-info-circle"></i> ' +
                        'حالت عملیات انبوه فعال است - تعرفه برای همه خدمات ایجاد خواهد شد' +
                        '</div>').insertAfter('#IsAllServices').parent();
                }
            }
            
            function restoreFormForSingleOperation() {
                console.log('🏥 MEDICAL: Restoring form for single operation');
                
                // 🔧 CRITICAL FIX: بازگردانی الزامی‌ها برای Single operation
                $('#ServiceId').attr('required', 'required');
                // اگر لازم است:
                // $('#ServiceCategoryId').attr('required', 'required');
                
                // Restore help text
                $('#IsAllServices').closest('.medical-form-group').find('.medical-form-help')
                    .text('در صورت انتخاب، تعرفه برای همه خدمات ایجاد می‌شود');
                
                // Remove bulk operation indicator
                $('#bulkOperationIndicator').remove();
            }
            
            function showBulkOperationProgress() {
                console.log('🏥 MEDICAL: Showing bulk operation progress');
                
                // Create progress modal
                var progressHtml = `
                    <div id="bulkProgressModal" class="modal fade" tabindex="-1" role="dialog">
                        <div class="modal-dialog modal-lg" role="document">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title">
                                        <i class="fas fa-cogs"></i> ایجاد تعرفه برای همه خدمات
                                    </h5>
                                </div>
                                <div class="modal-body">
                                    <div class="progress mb-3">
                                        <div id="bulkProgressBar" class="progress-bar progress-bar-striped progress-bar-animated" 
                                             role="progressbar" style="width: 0%"></div>
                                    </div>
                                    <div id="bulkProgressText" class="text-center">
                                        در حال آماده‌سازی عملیات...
                                    </div>
                                    <div id="bulkProgressDetails" class="mt-3">
                                        <small class="text-muted">لطفاً صبر کنید، این عملیات ممکن است چند دقیقه طول بکشد.</small>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                
                // 🔧 CRITICAL FIX: جلوگیری از اضافه شدن Modal چندبار
                if (!$('#bulkProgressModal').length) {
                    $('body').append(progressHtml);
                }
                $('#bulkProgressModal').modal({
                    backdrop: 'static',
                    keyboard: false
                });
            }
            
            function submitBulkOperation() {
                console.log('🏥 MEDICAL: Submitting bulk operation');
                
                // 🚀 P0 FIX: بررسی IsAllServices قبل از ارسال
                var isAllServices = $('#IsAllServices').is(':checked');
                console.log('🏥 MEDICAL: IsAllServices checkbox state:', isAllServices);
                
                // Update progress
                updateBulkProgress(10, 'در حال ارسال درخواست...');
                
                // Get form data
                var formData = $('#insuranceTariffForm').serialize();
                console.log('🏥 MEDICAL: Form data:', formData);
                
                // 🚀 P0 FIX: تضمین ارسال IsAllServices
                if (isAllServices && !formData.includes('IsAllServices=true')) {
                    console.log('🚀 P0 FIX: Adding IsAllServices=true to form data');
                    formData += '&IsAllServices=true';
                }
                
                // بررسی وجود IsAllServices در formData
                if (formData.includes('IsAllServices=true')) {
                    console.log('✅ IsAllServices=true found in form data');
                } else if (formData.includes('IsAllServices=false')) {
                    console.log('❌ IsAllServices=false found in form data');
                } else {
                    console.log('⚠️ IsAllServices not found in form data');
                }
                
                // Submit via AJAX
                $.ajax({
                    url: '@Url.Action("Create", "InsuranceTariff")',
                    type: 'POST',
                    data: formData,
                    dataType: 'json',
                    cache: false,
                    headers: {
                        'Cache-Control': 'no-cache, no-store, must-revalidate',
                        'Pragma': 'no-cache',
                        'Expires': '0'
                    },
                    success: function(response) {
                        console.log('🏥 MEDICAL: Bulk operation response:', response);
                        
                        if (response.success) {
                            updateBulkProgress(100, 'عملیات با موفقیت تکمیل شد!');
                            
                            setTimeout(function() {
                                $('#bulkProgressModal').modal('hide');
                                if (response.redirectUrl) {
                                    window.location.href = response.redirectUrl;
                                } else {
                                    window.location.href = '@Url.Action("Index", "InsuranceTariff")';
                                }
                            }, 2000);
                        } else {
                            var errorMessage = 'خطا در عملیات: ' + (response.message || 'خطای نامشخص');
                            
                            // نمایش جزئیات خطا
                            if (response.isBulkOperation) {
                                errorMessage += ' (عملیات انبوه)';
                            }
                            if (response.planId) {
                                errorMessage += ' - PlanId: ' + response.planId;
                            }
                            if (response.serviceId) {
                                errorMessage += ' - ServiceId: ' + response.serviceId;
                            }
                            
                            updateBulkProgress(0, errorMessage);
                            
                            // نمایش جزئیات خطا
                            if (response.errors && response.errors.length > 0) {
                                console.error('🏥 MEDICAL: Validation errors:', response.errors);
                            }
                            
                            console.error('🏥 MEDICAL: Bulk operation failed:', response);
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error('🏥 MEDICAL: Bulk operation error:', error);
                        
                        // بررسی نوع خطا
                        var errorMessage = 'خطا در عملیات: ' + error;
                        
                        if (xhr.responseText) {
                            try {
                                var errorResponse = JSON.parse(xhr.responseText);
                                if (errorResponse.message) {
                                    errorMessage = errorResponse.message;
                                }
                            } catch (e) {
                                // اگر JSON نیست، احتمالاً HTML error page است
                                errorMessage = 'خطا در سرور - لطفاً صفحه را refresh کنید';
                            }
                        }
                        
                        updateBulkProgress(0, errorMessage);
                    }
                });
            }
            
            function updateBulkProgress(percent, text) {
                $('#bulkProgressBar').css('width', percent + '%');
                $('#bulkProgressText').text(text);
            }

            // ---------- Currency Formatting ----------
            function setupCurrencyFormatting() {
                $('.medical-form-control[type="number"]').on('input', function() {
                    var value = $(this).val();
                    if (value) {
                        var formatted = formatCurrency(value);
                        $(this).attr('data-formatted', formatted);
                    }
                });
            }

            // ---------- Date Validation ----------
            function setupDateValidation() {
                $('.medical-form-control[type="date"]').on('change', function() {
                    var value = $(this).val();
                    if (value) {
                        var date = new Date(value);
                        var today = new Date();
                        if (date < today) {
                            $(this).addClass('is-invalid');
                            $(this).next('.medical-form-error').text('تاریخ نمی‌تواند در گذشته باشد');
                        } else {
                            $(this).removeClass('is-invalid');
                            $(this).next('.medical-form-error').text('');
                        }
                    }
                });
            }

            // ---------- Persian Number Conversion ----------
            function setupPersianNumberConversion() {
                $('.medical-form-control').on('input', function() {
                    var value = $(this).val();
                    if (value) {
                        var englishValue = convertPersianToEnglish(value);
                        if (englishValue !== value) {
                            $(this).val(englishValue);
                        }
                    }
                });
            }

            // ---------- Number Input Handling ----------
            function setupNumberInputHandling() {
                $('.medical-form-control[type="number"]').on('keypress', function(e) {
                    var char = String.fromCharCode(e.which);
                    if (!/[0-9]/.test(char) && e.which !== 8 && e.which !== 0) {
                        e.preventDefault();
                    }
                });
            }

            // ---------- Form Validation ----------
            function setupFormValidation() {
                // Real-time validation
                $('.medical-form-control').on('blur', function() {
                    validateField($(this));
                });

                // Form submission validation
                $('#insuranceTariffForm').on('submit', function(e) {
                    var isValid = true;
                    $('.medical-form-control[required]').each(function() {
                        if (!validateField($(this))) {
                            isValid = false;
                        }
                    });

                    // 🔧 CRITICAL FIX: Validation تجاری
                    if (!$('#IsAllServices').is(':checked')) {
                        var t = parseCurrency($('#TariffPrice').val());
                        var p = parseCurrency($('#PatientShare').val());
                        var i = parseCurrency($('#InsurerShare').val());
                        if (t > 0 && p >= 0 && i >= 0 && t !== (p + i)) {
                            e.preventDefault();
                            alert('سهم بیمار + سهم بیمه باید دقیقاً برابر قیمت تعرفه (به ریال) باشد.');
                            isValid = false;
                        }
                    }

                    if (!isValid) {
                        e.preventDefault();
                        alert('لطفاً تمام فیلدهای الزامی را پر کنید');
                    }
                });
            }

            function validateField(field) {
                var value = field.val();
                var isValid = true;

                if (field.prop('required') && (!value || value.trim() === '')) {
                    field.addClass('is-invalid');
                    field.next('.medical-form-error').text('این فیلد الزامی است');
                    isValid = false;
                } else if (field.attr('type') === 'number' && value) {
                    var num = parseFloat(value);
                    if (isNaN(num) || num < 0) {
                        field.addClass('is-invalid');
                        field.next('.medical-form-error').text('عدد معتبر وارد کنید');
                        isValid = false;
                    } else {
                        field.removeClass('is-invalid');
                        field.next('.medical-form-error').text('');
                    }
                } else {
                    field.removeClass('is-invalid');
                    field.next('.medical-form-error').text('');
                }

                return isValid;
            }

            // ---------- Accessibility ----------
            function setupAccessibility() {
                // Keyboard navigation
                $('.medical-form-control').on('keydown', function(e) {
                    if (e.key === 'Enter') {
                        e.preventDefault();
                        var nextField = $(this).closest('.medical-form-group').next().find('.medical-form-control');
                        if (nextField.length) {
                            nextField.focus();
                        }
                    }
                });

                // ARIA labels
                $('.medical-form-control').each(function() {
                    var field = $(this);
                    var label = field.closest('.medical-form-group').find('.medical-form-label').text();
                    field.attr('aria-label', label);
                });
            }

            // ---------- Auto Calculation ----------
            function setupAutoCalculation() {
                setupCascadingDropdowns();

                // Field change detection
                $('#ServiceId, #InsurancePlanId, #TariffPrice, #PatientShare, #InsurerShare').on('change input', function() {
                    debounceCalculation();
                });

                // 🔧 CRITICAL FIX: آگاهی از پوشش/فرانشیز بعد از انتخاب طرح بیمه
                $('#InsurancePlanId').on('change', function() {
                    var planId = $(this).val();
                    if (planId) {
                        loadDeductibleAndCoverageInfo(planId);
                    }
                });

                // Manual calculation button
                $('#calculateBtn').on('click', function() {
                    performCalculation();
                });
            }

            function debounceCalculation() {
                clearTimeout(calculationTimeout);
                calculationTimeout = setTimeout(function() {
                    if (!isCalculating) {
                        performCalculation();
                    }
                }, 500);
            }

            function performCalculation() {
                var serviceId = $('#ServiceId').val();
                var planId = $('#InsurancePlanId').val();
                
                if (!serviceId || !planId) {
                    console.log('🏥 MEDICAL: Skipping calculation - missing required fields. ServiceId:', serviceId, 'PlanId:', planId);
                    return;
                }

                // 🛡️ P0 FIX: جلوگیری از infinite loop
                if (isCalculating) {
                    console.log('🏥 MEDICAL: Calculation already in progress, skipping...');
                    return;
                }

                // 🔧 CRITICAL FIX: جلوگیری از Race Condition
                if (lastCalcXhr) try { lastCalcXhr.abort(); } catch(e){}
                
                isCalculating = true;
                updateProgress(0);

                var correlationId = lastCid = 'calc_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
                console.log('🏥 MEDICAL: Performing calculation - CorrelationId:', correlationId, 'ServiceId:', serviceId, 'PlanId:', planId);

                // 🔧 CRITICAL FIX: ارسال مستقیم ریال (بدون تبدیل)
                var formData = {
                    serviceId: serviceId,
                    insurancePlanId: planId,
                    providerId: $('#InsuranceProviderId').val(),
                    currentTariffPrice: parseCurrency($('#TariffPrice').val()) || 0, // ریال
                    currentPatientShare: parseCurrency($('#PatientShare').val()) || 0, // ریال
                    currentInsurerShare: parseCurrency($('#InsurerShare').val()) || 0, // ریال
                    unit: 'RIAL', // 🔧 CRITICAL FIX: واحد صریح
                    correlationId: correlationId
                };

                updateProgress(30);

                // 🔧 CRITICAL FIX: Anti-Forgery Token در Header
                var token = $('input[name="__RequestVerificationToken"]').val();
                formData.__RequestVerificationToken = token;

                lastCalcXhr = $.ajax({
                    url: '@Url.Action("CalculateAdvancedTariff", "InsuranceTariff")',
                    type: 'POST',
                    dataType: 'json',
                    timeout: 15000, // 🔧 CRITICAL FIX: Timeout 15 ثانیه
                    headers: { 'RequestVerificationToken': token }, // 🔧 CRITICAL FIX: Anti-Forgery در Header
                    data: formData,
                    success: function(response) {
                        // 🔧 CRITICAL FIX: بررسی CorrelationId برای جلوگیری از پاسخ‌های کهنه
                        if (correlationId !== lastCid) {
                            console.log('🏥 MEDICAL: Ignoring stale calculation response');
                            return;
                        }
                        updateProgress(100);
                        console.log('🏥 MEDICAL: Calculation Response Received:', response);
                        
                        // 🔍 بررسی دقیق response structure
                        if (response && (response.success === true || response.Success === true)) {
                            console.log('🏥 MEDICAL: Success response detected, calling displayCalculationResults');
                            displayCalculationResults(response.data || response.Data);
                            logCalculationSuccess(correlationId, response.data || response.Data);
                        } else {
                            var errorMessage = response?.message || response?.Message || 'خطای نامشخص در محاسبه';
                            console.log('🏥 MEDICAL: Error response detected:', errorMessage);
                            displayCalculationError(errorMessage);
                            logCalculationError(correlationId, 'Server Error', errorMessage);
                        }
                        isCalculating = false;
                    },
                    error: function(xhr, status, error) {
                        updateProgress(100);
                        console.error('🏥 MEDICAL: AJAX Error Details:', {
                            status: xhr.status,
                            statusText: xhr.statusText,
                            responseText: xhr.responseText,
                            error: error
                        });
                        
                        var errorMessage = 'خطا در محاسبه';
                        if (xhr.responseText) {
                            try {
                                var errorResponse = JSON.parse(xhr.responseText);
                                errorMessage = errorResponse.message || errorResponse.Message || errorMessage;
                            } catch (e) {
                                errorMessage = 'خطا در محاسبه: ' + (error || xhr.statusText);
                            }
                        }
                        
                        displayCalculationError(errorMessage);
                        logCalculationError(correlationId, 'Network Error', errorMessage);
                        isCalculating = false;
                    }
                });
            }

            function displayCalculationResults(data) {
                // 🔍 بررسی وجود داده‌ها
                if (!data) {
                    console.error('🏥 MEDICAL: No calculation data received');
                    displayCalculationError('داده‌های محاسبه دریافت نشد');
                    return;
                }

                console.log('🏥 MEDICAL: Binding calculation results to form fields - Data:', data);
                
                // 🔍 تحلیل ساختار response
                if (window.analyzeResponse) {
                    window.analyzeResponse({ data: data });
                }
                
                // 🔍 بررسی ساختار داده‌ها و تطبیق با نام‌های مختلف
                var tariffPrice = data.tariffPrice || data.TariffPrice;
                var patientShare = data.patientShare || data.PatientShare;
                var insurerShare = data.insurerShare || data.InsurerShare;
                
                console.log('🏥 MEDICAL: Extracted values:', {
                    tariffPrice: tariffPrice,
                    patientShare: patientShare,
                    insurerShare: insurerShare
                });

                // 🔍 Debug: بررسی element ها
                debugFormElements();
                debugHTMLStructure();

                // 🚀 P0 FIX: Bind داده‌ها به textbox های اصلی فرم
                try {
                    // 🔍 بررسی وجود element ها
                    var tariffPriceElement = $('#TariffPrice');
                    var patientShareElement = $('#PatientShare');
                    var insurerShareElement = $('#InsurerShare');
                    
                    console.log('🏥 MEDICAL: Element Check:', {
                        tariffPriceExists: tariffPriceElement.length > 0,
                        patientShareExists: patientShareElement.length > 0,
                        insurerShareExists: insurerShareElement.length > 0
                    });

                    // 🔧 CRITICAL FIX: نمایش مستقیم ریال (بدون تبدیل)
                    // قیمت تعرفه
                    if (tariffPrice !== undefined && tariffPrice !== null && tariffPriceElement.length > 0) {
                        tariffPriceElement.val(tariffPrice);
                        console.log('🏥 MEDICAL: TariffPrice bound:', tariffPrice);
                    }

                    // سهم بیمار
                    if (patientShare !== undefined && patientShare !== null && patientShareElement.length > 0) {
                        patientShareElement.val(patientShare);
                        console.log('🏥 MEDICAL: PatientShare bound:', patientShare);
                    }

                    // سهم بیمه
                    if (insurerShare !== undefined && insurerShare !== null && insurerShareElement.length > 0) {
                        insurerShareElement.val(insurerShare);
                        console.log('🏥 MEDICAL: InsurerShare bound:', insurerShare);
                    }

                    // نمایش نتایج محاسبه شده (ریال)
                    $('#calculatedTariffPrice').text(formatCurrency(tariffPrice) + ' ریال');
                    $('#calculatedPatientShare').text(formatCurrency(patientShare) + ' ریال');
                    $('#calculatedInsurerShare').text(formatCurrency(insurerShare) + ' ریال');
                    
                    $('#calculationResults').show();
                    $('#calculationSummary').html('<div class="alert alert-success">✅ محاسبه با موفقیت انجام شد</div>');

                    console.log('🏥 MEDICAL: All calculation results bound successfully');
                    
                    // 🔍 بررسی مقادیر فیلدها بعد از binding
                    if (window.checkFieldValues) {
                        window.checkFieldValues();
                    }
                } catch (error) {
                    console.error('🏥 MEDICAL: Error binding calculation results:', error);
                    
                    // 🔄 Fallback: تلاش برای bind با نام‌های مختلف
                    try {
                        console.log('🏥 MEDICAL: Attempting fallback binding...');
                        fallbackBinding(data);
                        
                        // 🔍 بررسی مقادیر فیلدها بعد از fallback
                        if (window.checkFieldValues) {
                            window.checkFieldValues();
                        }
                    } catch (fallbackError) {
                        console.error('🏥 MEDICAL: Fallback binding also failed:', fallbackError);
                        displayCalculationError('خطا در نمایش نتایج محاسبه');
                    }
                }
            }

            function displayCalculationError(message) {
                console.error('🏥 MEDICAL: Calculation Error Display:', message);
                
                // 🔧 CRITICAL FIX: عدم پاک‌کردن ورودی‌ها در خطا
                // $('#TariffPrice').val('');
                // $('#PatientShare').val('');
                // $('#InsurerShare').val('');
                
                $('#calculationResults').hide();
                
                // نمایش پیام خطا با جزئیات بیشتر
                var errorMessage = message || 'خطای نامشخص در محاسبه';
                $('#calculationSummary').html('<div class="alert alert-danger">❌ ' + errorMessage + '</div>');
            }

            function updateProgress(percent) {
                $('#progressBar').css('width', percent + '%');
            }

            // 🔧 CRITICAL FIX: آگاهی از پوشش/فرانشیز قبل از محاسبه
            function loadDeductibleAndCoverageInfo(planId) {
                if (!planId) return;
                
                console.log('🏥 MEDICAL: Loading deductible and coverage info for plan:', planId);
                
                $.ajax({
                    url: '@Url.Action("GetInsurancePlanDeductible", "InsuranceTariff")',
                    type: 'GET',
                    dataType: 'json',
                    data: { planId: planId },
                    success: function(response) {
                        if (response.success && response.data) {
                            var deductible = response.data.deductible || 0;
                            var coveragePercent = response.data.coveragePercent || 0;
                            
                            // نمایش اطلاعات در UI
                            showPlanInfo(deductible, coveragePercent);
                            
                            console.log('🏥 MEDICAL: Plan info loaded - Deductible:', deductible, 'Coverage:', coveragePercent + '%');
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error('🏥 MEDICAL: Error loading plan info:', error);
                    }
                });
            }

            function showPlanInfo(deductible, coveragePercent) {
                // ایجاد یا به‌روزرسانی نمایش اطلاعات طرح
                var infoHtml = `
                    <div id="planInfoCard" class="alert alert-info mt-3">
                        <h6><i class="fas fa-info-circle"></i> اطلاعات طرح بیمه</h6>
                        <div class="row">
                            <div class="col-md-6">
                                <strong>فرانشیز:</strong> ${formatCurrency(deductible)} ریال
                            </div>
                            <div class="col-md-6">
                                <strong>درصد پوشش:</strong> ${coveragePercent}%
                            </div>
                        </div>
                    </div>
                `;
                
                // حذف اطلاعات قبلی و اضافه کردن جدید
                $('#planInfoCard').remove();
                $('#InsurancePlanId').closest('.medical-form-group').after(infoHtml);
            }

            function logCalculationSuccess(correlationId, data) {
                console.log('🏥 MEDICAL: Calculation Success - CorrelationId:', correlationId, 'Data:', data);
                
                // 🔍 Debug: بررسی ساختار داده‌ها
                if (data) {
                    console.log('🏥 MEDICAL: Data Structure Analysis:', {
                        hasTariffPrice: 'tariffPrice' in data,
                        hasPatientShare: 'patientShare' in data,
                        hasInsurerShare: 'insurerShare' in data,
                        tariffPriceValue: data.tariffPrice,
                        patientShareValue: data.patientShare,
                        insurerShareValue: data.insurerShare
                    });
                }
            }

            function logCalculationError(correlationId, type, message) {
                console.log('🏥 MEDICAL: Calculation Error - CorrelationId:', correlationId, 'Type:', type, 'Message:', message);
            }

            // 🔍 Debug Helper: بررسی وجود element ها
            function debugFormElements() {
                console.log('🏥 MEDICAL: Form Elements Debug:', {
                    'TariffPrice': $('#TariffPrice').length,
                    'PatientShare': $('#PatientShare').length,
                    'InsurerShare': $('#InsurerShare').length,
                    'ServiceId': $('#ServiceId').length,
                    'InsurancePlanId': $('#InsurancePlanId').length,
                    'InsuranceProviderId': $('#InsuranceProviderId').length
                });

                // 🔍 بررسی نام‌های فیلدها
                $('input[name*="Tariff"], input[name*="Share"]').each(function() {
                    console.log('🏥 MEDICAL: Found field:', {
                        name: $(this).attr('name'),
                        id: $(this).attr('id'),
                        type: $(this).attr('type')
                    });
                });
            }

            // 🔄 Fallback Binding: تلاش برای bind با نام‌های مختلف
            function fallbackBinding(data) {
                console.log('🏥 MEDICAL: Fallback binding started with data:', data);

                // تلاش برای پیدا کردن فیلدها با نام‌های مختلف
                var tariffSelectors = [
                    '#TariffPrice', 'input[name="TariffPrice"]', 'input[name="tariffPrice"]',
                    'input[name="Tariff"]', 'input[name="tariff"]'
                ];

                var patientSelectors = [
                    '#PatientShare', 'input[name="PatientShare"]', 'input[name="patientShare"]',
                    'input[name="Patient"]', 'input[name="patient"]'
                ];

                var insurerSelectors = [
                    '#InsurerShare', 'input[name="InsurerShare"]', 'input[name="insurerShare"]',
                    'input[name="Insurer"]', 'input[name="insurer"]'
                ];

                // استخراج مقادیر با نام‌های مختلف
                var tariffPrice = data.tariffPrice || data.TariffPrice;
                var patientShare = data.patientShare || data.PatientShare;
                var insurerShare = data.insurerShare || data.InsurerShare;

                // Bind قیمت تعرفه
                if (tariffPrice !== undefined && tariffPrice !== null) {
                    for (var i = 0; i < tariffSelectors.length; i++) {
                        var element = $(tariffSelectors[i]);
                        if (element.length > 0) {
                            // 🛡️ P0 FIX: استفاده از اعداد انگلیسی برای input type="number"
                            element.val(tariffPrice);
                            console.log('🏥 MEDICAL: Fallback TariffPrice bound using selector:', tariffSelectors[i]);
                            break;
                        }
                    }
                }

                // Bind سهم بیمار
                if (patientShare !== undefined && patientShare !== null) {
                    for (var i = 0; i < patientSelectors.length; i++) {
                        var element = $(patientSelectors[i]);
                        if (element.length > 0) {
                            // 🛡️ P0 FIX: استفاده از اعداد انگلیسی برای input type="number"
                            element.val(patientShare);
                            console.log('🏥 MEDICAL: Fallback PatientShare bound using selector:', patientSelectors[i]);
                            break;
                        }
                    }
                }

                // Bind سهم بیمه
                if (insurerShare !== undefined && insurerShare !== null) {
                    for (var i = 0; i < insurerSelectors.length; i++) {
                        var element = $(insurerSelectors[i]);
                        if (element.length > 0) {
                            // 🛡️ P0 FIX: استفاده از اعداد انگلیسی برای input type="number"
                            element.val(insurerShare);
                            console.log('🏥 MEDICAL: Fallback InsurerShare bound using selector:', insurerSelectors[i]);
                            break;
                        }
                    }
                }

                console.log('🏥 MEDICAL: Fallback binding completed');
            }

            // 🔍 HTML Structure Debug: بررسی ساختار HTML
            function debugHTMLStructure() {
                console.log('🏥 MEDICAL: HTML Structure Debug:');
                console.log('🏥 MEDICAL: All input fields:', $('input').map(function() {
                    return {
                        id: $(this).attr('id'),
                        name: $(this).attr('name'),
                        type: $(this).attr('type'),
                        class: $(this).attr('class')
                    };
                }).get());
            }

            // 🌐 Global Debug Helper: برای استفاده در console
            window.debugInsuranceTariff = function() {
                console.log('🏥 MEDICAL: Global Debug Helper Activated');
                debugFormElements();
                debugHTMLStructure();
                console.log('🏥 MEDICAL: Current form values:', {
                    TariffPrice: $('#TariffPrice').val(),
                    PatientShare: $('#PatientShare').val(),
                    InsurerShare: $('#InsurerShare').val(),
                    ServiceId: $('#ServiceId').val(),
                    InsurancePlanId: $('#InsurancePlanId').val()
                });
            };

            // 🧪 Test Binding Helper: برای تست binding
            window.testBinding = function() {
                console.log('🏥 MEDICAL: Test Binding Helper Activated');
                var testData = {
                    tariffPrice: 119300,
                    patientShare: 47720,
                    insurerShare: 71580
                };
                console.log('🏥 MEDICAL: Testing with data:', testData);
                displayCalculationResults(testData);
            };

            // 🔍 Response Structure Analyzer: برای تحلیل ساختار response
            window.analyzeResponse = function(response) {
                console.log('🏥 MEDICAL: Response Structure Analysis:');
                console.log('🏥 MEDICAL: Response type:', typeof response);
                console.log('🏥 MEDICAL: Response keys:', Object.keys(response || {}));
                console.log('🏥 MEDICAL: Success check:', {
                    'response.success': response?.success,
                    'response.Success': response?.Success,
                    'response.data': response?.data,
                    'response.Data': response?.Data
                });
                
                if (response?.data || response?.Data) {
                    var data = response.data || response.Data;
                    console.log('🏥 MEDICAL: Data structure:', {
                        'data.tariffPrice': data?.tariffPrice,
                        'data.TariffPrice': data?.TariffPrice,
                        'data.patientShare': data?.patientShare,
                        'data.PatientShare': data?.PatientShare,
                        'data.insurerShare': data?.insurerShare,
                        'data.InsurerShare': data?.InsurerShare
                    });
                }
            };

            // 🔍 Field Values Checker: برای بررسی مقادیر فیلدها
            window.checkFieldValues = function() {
                console.log('🏥 MEDICAL: Field Values Check:');
                console.log('🏥 MEDICAL: TariffPrice value:', $('#TariffPrice').val());
                console.log('🏥 MEDICAL: PatientShare value:', $('#PatientShare').val());
                console.log('🏥 MEDICAL: InsurerShare value:', $('#InsurerShare').val());
                console.log('🏥 MEDICAL: TariffPrice element exists:', $('#TariffPrice').length > 0);
                console.log('🏥 MEDICAL: PatientShare element exists:', $('#PatientShare').length > 0);
                console.log('🏥 MEDICAL: InsurerShare element exists:', $('#InsurerShare').length > 0);
            };

            // 🛡️ Loop Prevention Helper: برای جلوگیری از infinite loop
            window.stopInfiniteLoop = function() {
                console.log('🏥 MEDICAL: Stopping infinite loop...');
                isCalculating = false;
                clearTimeout(calculationTimeout);
                console.log('🏥 MEDICAL: Infinite loop stopped');
            };

            // 🔄 System Reset Helper: برای reset کردن سیستم
            window.resetCalculationSystem = function() {
                console.log('🏥 MEDICAL: Resetting calculation system...');
                isCalculating = false;
                clearTimeout(calculationTimeout);
                $('#TariffPrice').val('');
                $('#PatientShare').val('');
                $('#InsurerShare').val('');
                $('#calculationResults').hide();
                $('#calculationSummary').html('');
                console.log('🏥 MEDICAL: Calculation system reset');
            };

            // 🔍 Event Listeners Checker: برای بررسی event listeners
            window.checkEventListeners = function() {
                console.log('🏥 MEDICAL: Event Listeners Check:');
                console.log('🏥 MEDICAL: TariffPrice change listeners:', $._data($('#TariffPrice')[0], 'events'));
                console.log('🏥 MEDICAL: PatientShare change listeners:', $._data($('#PatientShare')[0], 'events'));
                console.log('🏥 MEDICAL: InsurerShare change listeners:', $._data($('#InsurerShare')[0], 'events'));
                console.log('🏥 MEDICAL: ServiceId change listeners:', $._data($('#ServiceId')[0], 'events'));
                console.log('🏥 MEDICAL: InsurancePlanId change listeners:', $._data($('#InsurancePlanId')[0], 'events'));
            };

            // 🛡️ Custom Validation: برای validation سفارشی
            function setupCustomValidation() {
                // حذف HTML5 validation
                $('input[type="number"]').removeAttr('step');
                
                // اضافه کردن validation سفارشی
                $('#TariffPrice, #PatientShare, #InsurerShare').on('input', function() {
                    var value = parseFloat($(this).val());
                    if (value && value < 0) {
                        $(this).val(0);
                    }
                });
                
                console.log('🏥 MEDICAL: Custom validation setup completed');
            }

            // 🔍 Validation Helper: برای بررسی validation
            window.checkValidation = function() {
                console.log('🏥 MEDICAL: Validation Check:');
                console.log('🏥 MEDICAL: TariffPrice step attribute:', $('#TariffPrice').attr('step'));
                console.log('🏥 MEDICAL: PatientShare step attribute:', $('#PatientShare').attr('step'));
                console.log('🏥 MEDICAL: InsurerShare step attribute:', $('#InsurerShare').attr('step'));
                console.log('🏥 MEDICAL: All number inputs:', $('input[type="number"]').length);
            };
        })();
    </script>
}
