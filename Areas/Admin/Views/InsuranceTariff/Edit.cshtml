@model ClinicApp.ViewModels.Insurance.InsuranceTariff.InsuranceTariffCreateEditViewModel
@{
    ViewBag.Title = "ویرایش تعرفه بیمه";
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
}

<div class="container-fluid">
    <!-- Header Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="h3 mb-0">
                        <i class="fas fa-edit text-warning"></i>
                        ویرایش تعرفه بیمه
                    </h1>
                    <p class="text-muted mb-0">ویرایش تعرفه خاص برای خدمت در طرح بیمه</p>
                </div>
                <div>
                    <a href="@Url.Action("Details", new { id = Model.InsuranceTariffId })" class="btn btn-info">
                        <i class="fas fa-eye"></i>
                        مشاهده جزئیات
                    </a>
                    <a href="@Url.Action("Index")" class="btn btn-secondary">
                        <i class="fas fa-arrow-right"></i>
                        بازگشت به لیست
                    </a>
                </div>
            </div>
        </div>
    </div>

    <!-- Form Section -->
    <div class="row">
        <div class="col-lg-8">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="fas fa-edit"></i>
                        اطلاعات تعرفه بیمه
                    </h5>
                </div>
                <div class="card-body">
                    @using (Html.BeginForm("Edit", "InsuranceTariff", FormMethod.Post, new { @class = "needs-validation", novalidate = "novalidate" }))
                    {
                        @Html.AntiForgeryToken()
                        @Html.HiddenFor(model => model.InsuranceTariffId)
                        @Html.ValidationSummary(true, "", new { @class = "alert alert-danger" })
                        
                        <!-- Hidden fields for "All" selections -->
                        <input type="hidden" id="IsAllServiceCategories" name="IsAllServiceCategories" value="false" />
                        <input type="hidden" id="IsAllServices" name="IsAllServices" value="false" />

                        <div class="row">
                            <!-- Department Selection -->
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.DepartmentId, new { @class = "form-label required" })
                                    <select id="DepartmentId" name="DepartmentId" class="form-control" required>
                                        <option value="">انتخاب دپارتمان</option>
                                    </select>
                                    @Html.ValidationMessageFor(model => model.DepartmentId, "", new { @class = "text-danger small mt-1" })
                                    <div class="form-note">دپارتمان مورد نظر را انتخاب کنید</div>
                                </div>
                            </div>

                            <!-- Service Category Selection -->
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.ServiceCategoryId, new { @class = "form-label" })
                                    <select id="ServiceCategoryId" name="ServiceCategoryId" class="form-control">
                                        <option value="">انتخاب سرفصل خدمت</option>
                                    </select>
                                    @Html.ValidationMessageFor(model => model.ServiceCategoryId, "", new { @class = "text-danger small mt-1" })
                                    <div class="form-note">
                                        <i class="fas fa-info-circle text-info"></i>
                                        سرفصل خدمت مورد نظر را انتخاب کنید یا "همه سرفصل‌ها" را برای تعریف تعرفه عمومی انتخاب کنید
                                    </div>
                                </div>
                            </div>

                            <!-- Service Selection -->
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.ServiceId, new { @class = "form-label required" })
                                    @Html.DropDownListFor(model => model.ServiceId, Model.ServiceSelectList, 
                                        "انتخاب خدمت", new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.ServiceId, "", new { @class = "text-danger small mt-1" })
                                    <div class="form-note">خدمت مورد نظر را انتخاب کنید یا "همه خدمات" را انتخاب کنید</div>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <!-- Insurance Provider Selection -->
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="form-label required">ارائه‌دهنده بیمه</label>
                                    @Html.DropDownListFor(model => model.InsuranceProviderId, Model.InsuranceProviderSelectList, 
                                        "انتخاب ارائه‌دهنده بیمه", new { @class = "form-control", required = "required" })
                                    <div class="form-note">ارائه‌دهنده بیمه مورد نظر را انتخاب کنید</div>
                                </div>
                            </div>

                            <!-- Insurance Plan Selection -->
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.InsurancePlanId, new { @class = "form-label required" })
                                    @Html.DropDownListFor(model => model.InsurancePlanId, Model.InsurancePlanSelectList, 
                                        "انتخاب طرح بیمه", new { @class = "form-control", required = "required" })
                                    @Html.ValidationMessageFor(model => model.InsurancePlanId, "", new { @class = "text-danger small mt-1" })
                                    <div class="form-note">طرح بیمه مورد نظر را انتخاب کنید</div>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <!-- Tariff Price -->
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.TariffPrice, new { @class = "form-label" })
                                    @Html.TextBoxFor(model => model.TariffPrice, new { 
                                        @class = "form-control", 
                                        type = "number", 
                                        min = "0", 
                                        step = "1000", 
                                        placeholder = "قیمت تعرفه (تومان)" 
                                    })
                                    @Html.ValidationMessageFor(model => model.TariffPrice, "", new { @class = "text-danger small mt-1" })
                                    <div class="form-note">قیمت خاص برای این تعرفه (اختیاری)</div>
                                </div>
                            </div>

                            <!-- Patient Share -->
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.PatientShare, new { @class = "form-label" })
                                    @Html.TextBoxFor(model => model.PatientShare, new { 
                                        @class = "form-control", 
                                        type = "number", 
                                        min = "0", 
                                        max = "100", 
                                        step = "0.1", 
                                        placeholder = "درصد سهم بیمار" 
                                    })
                                    @Html.ValidationMessageFor(model => model.PatientShare, "", new { @class = "text-danger small mt-1" })
                                    <div class="form-note">درصد سهم بیمار (0-100)</div>
                                </div>
                            </div>

                            <!-- Insurer Share -->
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.InsurerShare, new { @class = "form-label" })
                                    @Html.TextBoxFor(model => model.InsurerShare, new { 
                                        @class = "form-control", 
                                        type = "number", 
                                        min = "0", 
                                        max = "100", 
                                        step = "0.1", 
                                        placeholder = "درصد سهم بیمه" 
                                    })
                                    @Html.ValidationMessageFor(model => model.InsurerShare, "", new { @class = "text-danger small mt-1" })
                                    <div class="form-note">درصد سهم بیمه (0-100)</div>
                                </div>
                            </div>
                        </div>

                        <!-- IsActive -->
                        <div class="row">
                            <div class="col-12">
                                <div class="form-group">
                                    <div class="form-check">
                                        @Html.CheckBoxFor(model => model.IsActive, new { @class = "form-check-input" })
                                        @Html.LabelFor(model => model.IsActive, new { @class = "form-check-label" })
                                    </div>
                                    @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-danger small mt-1" })
                                    <div class="form-note">تعرفه فعال باشد یا غیرفعال</div>
                                </div>
                            </div>
                        </div>

                        <!-- Validation Summary -->
                        <div class="row">
                            <div class="col-12">
                                <div class="alert alert-info">
                                    <h6><i class="fas fa-info-circle"></i> نکات مهم:</h6>
                                    <ul class="mb-0">
                                        <li>اگر قیمت تعرفه وارد نشود، از قیمت پایه خدمت استفاده می‌شود</li>
                                        <li>اگر سهم بیمار و بیمه وارد نشود، از تنظیمات طرح بیمه استفاده می‌شود</li>
                                        <li>مجموع سهم بیمار و بیمه نباید بیش از 100 درصد باشد</li>
                                    </ul>
                                </div>
                            </div>
                        </div>

                        <!-- Submit Buttons -->
                        <div class="row">
                            <div class="col-12">
                                <div class="form-group">
                                    <button type="submit" class="btn btn-warning">
                                        <i class="fas fa-save"></i>
                                        ذخیره تغییرات
                                    </button>
                                    <a href="@Url.Action("Details", new { id = Model.InsuranceTariffId })" class="btn btn-info">
                                        <i class="fas fa-eye"></i>
                                        مشاهده جزئیات
                                    </a>
                                    <a href="@Url.Action("Index")" class="btn btn-secondary">
                                        <i class="fas fa-times"></i>
                                        انصراف
                                    </a>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Info Panel -->
        <div class="col-lg-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="fas fa-info-circle"></i>
                        راهنمای ویرایش تعرفه بیمه
                    </h5>
                </div>
                <div class="card-body">
                    <h6>ویرایش تعرفه بیمه</h6>
                    <p class="text-muted small">
                        می‌توانید اطلاعات تعرفه بیمه را ویرایش کنید. تغییرات بلافاصله اعمال می‌شود.
                    </p>

                    <h6>نکات مهم</h6>
                    <ul class="text-muted small">
                        <li>تغییر قیمت تعرفه بر روی محاسبات آینده تأثیر می‌گذارد</li>
                        <li>تغییر سهم بیمار و بیمه بر روی محاسبات آینده تأثیر می‌گذارد</li>
                        <li>غیرفعال کردن تعرفه باعث عدم استفاده از آن می‌شود</li>
                    </ul>

                    <h6>مثال</h6>
                    <div class="bg-light p-3 rounded">
                        <small>
                            <strong>خدمت:</strong> آزمایش خون<br>
                            <strong>قیمت پایه:</strong> 50,000 تومان<br>
                            <strong>تعرفه بیمه:</strong> 45,000 تومان<br>
                            <strong>سهم بیمه:</strong> 80%<br>
                            <strong>سهم بیمار:</strong> 20%
                        </small>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Form validation - اجازه ارسال فرم به سرور برای validation
            $('.needs-validation').on('submit', function(e) {
                console.log('✅ فرم Edit آماده ارسال است');
                $(this).addClass('was-validated');
            });

            // نمایش loading indicator
            showLoadingIndicator();
            
            // Cascade Dropdowns
            loadDepartments();
            
            // اطمینان از بارگیری dropdown ها قبل از ارسال فرم
            var dropdownsLoaded = false;
            setTimeout(function() {
                dropdownsLoaded = true;
                console.log('✅ Dropdown ها آماده هستند');
            }, 2000); // 2 ثانیه timeout
            
            $('#DepartmentId').on('change', function() {
                var departmentId = $(this).val();
                if (departmentId) {
                    loadServiceCategories(departmentId);
                } else {
                    $('#ServiceCategoryId').empty().append('<option value="">انتخاب سرفصل خدمت</option>');
                    $('#ServiceId').empty().append('<option value="">انتخاب خدمت</option>');
                }
            });
            
            $('#ServiceCategoryId').on('change', function() {
                var serviceCategoryId = $(this).val();
                if (serviceCategoryId) {
                    loadServices(serviceCategoryId);
                } else {
                    $('#ServiceId').empty().append('<option value="">انتخاب خدمت</option>');
                }
            });
            
            $('#InsuranceProviderId').on('change', function() {
                var providerId = $(this).val();
                if (providerId) {
                    loadInsurancePlans(providerId);
                } else {
                    $('#InsurancePlanId').empty().append('<option value="">انتخاب طرح بیمه</option>');
                }
            });

            // Check for existing tariff (excluding current one)
            $('#ServiceId, #InsurancePlanId').on('change', function() {
                var serviceId = $('#ServiceId').val();
                var planId = $('#InsurancePlanId').val();
                var currentId = $('#InsuranceTariffId').val();
                
                if (serviceId && planId) {
                    checkExistingTariff(serviceId, planId, currentId);
                }
            });

            function checkExistingTariff(serviceId, planId, excludeId) {
                $.ajax({
                    url: '@Url.Action("CheckTariffExists")',
                    type: 'POST',
                    data: {
                        serviceId: serviceId,
                        planId: planId,
                        excludeId: excludeId,
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function(response) {
                        if (response.exists) {
                            showWarning('تعرفه بیمه برای این خدمت و طرح قبلاً تعریف شده است.');
                        }
                    }
                });
            }

            function showWarning(message) {
                var alert = $('<div class="alert alert-warning alert-dismissible fade show" role="alert">' +
                    '<i class="fas fa-exclamation-triangle"></i> ' + message +
                    '<button type="button" class="close" data-dismiss="alert">' +
                    '<span>&times;</span></button></div>');
                
                $('.card-body').prepend(alert);
                
                setTimeout(function() {
                    alert.fadeOut();
                }, 5000);
            }
            
            // Helper Functions
            function showLoadingIndicator() {
                // اضافه کردن loading indicator به dropdown ها
                $('#DepartmentId').html('<option value="">در حال بارگیری دپارتمان‌ها...</option>');
                $('#ServiceCategoryId').html('<option value="">در حال بارگیری سرفصل‌ها...</option>');
                $('#ServiceId').html('<option value="">در حال بارگیری خدمات...</option>');
                $('#InsuranceProviderId').html('<option value="">در حال بارگیری ارائه‌دهندگان...</option>');
                $('#InsurancePlanId').html('<option value="">در حال بارگیری طرح‌ها...</option>');
                
                // غیرفعال کردن dropdown ها
                $('#DepartmentId, #ServiceCategoryId, #ServiceId, #InsuranceProviderId, #InsurancePlanId').prop('disabled', true);
            }
            
            function hideLoadingIndicator() {
                // فعال کردن dropdown ها
                $('#DepartmentId, #ServiceCategoryId, #ServiceId, #InsuranceProviderId, #InsurancePlanId').prop('disabled', false);
            }
            
            // Cascade Dropdown Functions
            function loadDepartments() {
                console.log('🔄 شروع بارگیری دپارتمان‌ها...');
                $.ajax({
                    url: '@Url.Action("GetDepartments")',
                    type: 'GET',
                    cache: false,
                    success: function(response) {
                        console.log('📊 پاسخ دپارتمان‌ها:', response);
                        
                        // بررسی دقیق response - ممکن است response string باشد
                        var data = response;
                        if (typeof response === 'string') {
                            try {
                                data = JSON.parse(response);
                            } catch (e) {
                                console.error('❌ خطا در parse کردن JSON:', e);
                                showWarning('خطا در پردازش اطلاعات دپارتمان‌ها');
                                return;
                            }
                        }
                        
                        console.log('🔍 parsed data:', data);
                        
                        if (data && data.success === true && data.data) {
                            var options = '<option value="">انتخاب دپارتمان</option>';
                            $.each(data.data, function(index, item) {
                                var selected = item.id == @Model.DepartmentId ? 'selected' : '';
                                options += '<option value="' + item.id + '" ' + selected + '>' + item.name + '</option>';
                            });
                            
                            // حذف Select2 قبلی اگر وجود دارد
                            if ($('#DepartmentId').hasClass('select2-hidden-accessible')) {
                                $('#DepartmentId').select2('destroy');
                            }
                            
                            $('#DepartmentId').html(options);
                            
                            // فعال‌سازی Select2
                            $('#DepartmentId').select2({
                                placeholder: 'انتخاب دپارتمان',
                                allowClear: true,
                                dir: 'rtl',
                                width: '100%'
                            });
                            
                            console.log('✅ دپارتمان‌ها بارگیری شدند:', data.data.length, 'مورد');
                            hideLoadingIndicator();
                            
                            // بارگیری سرفصل‌های خدماتی برای دپارتمان انتخاب شده
                            if (@Model.DepartmentId > 0) {
                                loadServiceCategories(@Model.DepartmentId);
                            }
                        } else {
                            console.error('❌ خطا در بارگیری دپارتمان‌ها - data:', data);
                            showWarning('خطا در بارگیری دپارتمان‌ها');
                            hideLoadingIndicator();
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error('❌ خطای AJAX در بارگیری دپارتمان‌ها:', error);
                        showWarning('خطا در بارگیری دپارتمان‌ها');
                        hideLoadingIndicator();
                    }
                });
            }
            
            function loadServiceCategories(departmentId) {
                console.log('🔄 شروع بارگیری سرفصل‌های خدماتی - DepartmentId:', departmentId);
                $.ajax({
                    url: '@Url.Action("GetServiceCategories")',
                    type: 'GET',
                    data: { departmentId: departmentId },
                    cache: false,
                    success: function(response) {
                        console.log('📊 پاسخ سرفصل‌های خدماتی:', response);
                        
                        // بررسی دقیق response - ممکن است response string باشد
                        var data = response;
                        if (typeof response === 'string') {
                            try {
                                data = JSON.parse(response);
                            } catch (e) {
                                console.error('❌ خطا در parse کردن JSON:', e);
                                showWarning('خطا در پردازش اطلاعات سرفصل‌های خدماتی');
                                return;
                            }
                        }
                        
                        console.log('🔍 parsed data:', data);
                        
                        if (data && data.success === true && data.data) {
                            var options = '<option value="">انتخاب سرفصل خدمت</option>';
                            options += '<option value="all" class="text-primary font-weight-bold">📋 همه سرفصل‌ها</option>';
                            options += '<option value="" disabled>─────────────────</option>';
                            $.each(data.data, function(index, item) {
                                var selected = item.id == @Model.ServiceCategoryId ? 'selected' : '';
                                options += '<option value="' + item.id + '" ' + selected + '>' + item.name + '</option>';
                            });
                            
                            // حذف Select2 قبلی اگر وجود دارد
                            if ($('#ServiceCategoryId').hasClass('select2-hidden-accessible')) {
                                $('#ServiceCategoryId').select2('destroy');
                            }
                            
                            $('#ServiceCategoryId').html(options);
                            
                            // فعال‌سازی Select2
                            $('#ServiceCategoryId').select2({
                                placeholder: 'انتخاب سرفصل خدمت',
                                allowClear: true,
                                dir: 'rtl',
                                width: '100%'
                            });
                            
                            $('#ServiceId').empty().append('<option value="">انتخاب خدمت</option>');
                            
                            console.log('✅ سرفصل‌های خدماتی بارگیری شدند:', data.data.length, 'مورد');
                            
                            // بارگیری خدمات برای سرفصل انتخاب شده
                            if (@Model.ServiceCategoryId > 0) {
                                loadServices(@Model.ServiceCategoryId);
                            }
                        } else {
                            console.error('❌ خطا در بارگیری سرفصل‌های خدماتی - data:', data);
                            showWarning('خطا در بارگیری سرفصل‌های خدماتی');
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error('❌ خطای AJAX در بارگیری سرفصل‌های خدماتی:', error);
                        showWarning('خطا در بارگیری سرفصل‌های خدماتی');
                    }
                });
            }
            
            function loadServices(serviceCategoryId) {
                console.log('🔄 شروع بارگیری خدمات - ServiceCategoryId:', serviceCategoryId);
                $.ajax({
                    url: '@Url.Action("GetServices")',
                    type: 'GET',
                    data: { serviceCategoryId: serviceCategoryId },
                    cache: false,
                    success: function(response) {
                        console.log('📊 پاسخ خدمات:', response);
                        
                        // بررسی دقیق response - ممکن است response string باشد
                        var data = response;
                        if (typeof response === 'string') {
                            try {
                                data = JSON.parse(response);
                            } catch (e) {
                                console.error('❌ خطا در parse کردن JSON:', e);
                                showWarning('خطا در پردازش اطلاعات خدمات');
                                return;
                            }
                        }
                        
                        console.log('🔍 parsed data:', data);
                        
                        if (data && data.success === true && data.data) {
                            var options = '<option value="">انتخاب خدمت</option>';
                            options += '<option value="all" class="text-success font-weight-bold">🔧 همه خدمات</option>';
                            options += '<option value="" disabled>─────────────────</option>';
                            $.each(data.data, function(index, item) {
                                var selected = item.id == @Model.ServiceId ? 'selected' : '';
                                options += '<option value="' + item.id + '" ' + selected + '>' + item.name + '</option>';
                            });
                            
                            // حذف Select2 قبلی اگر وجود دارد
                            if ($('#ServiceId').hasClass('select2-hidden-accessible')) {
                                $('#ServiceId').select2('destroy');
                            }
                            
                            $('#ServiceId').html(options);
                            
                            // فعال‌سازی Select2
                            $('#ServiceId').select2({
                                placeholder: 'انتخاب خدمت',
                                allowClear: true,
                                dir: 'rtl',
                                width: '100%'
                            });
                            
                            console.log('✅ خدمات بارگیری شدند:', data.data.length, 'مورد');
                        } else {
                            console.error('❌ خطا در بارگیری خدمات - data:', data);
                            showWarning('خطا در بارگیری خدمات');
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error('❌ خطای AJAX در بارگیری خدمات:', error);
                        showWarning('خطا در بارگیری خدمات');
                    }
                });
            }
            
            function loadInsurancePlans(providerId) {
                console.log('🔄 شروع بارگیری طرح‌های بیمه - ProviderId:', providerId);
                $.ajax({
                    url: '@Url.Action("GetInsurancePlans")',
                    type: 'GET',
                    data: { providerId: providerId },
                    cache: false,
                    success: function(response) {
                        console.log('📊 پاسخ طرح‌های بیمه:', response);
                        
                        // بررسی دقیق response - ممکن است response string باشد
                        var data = response;
                        if (typeof response === 'string') {
                            try {
                                data = JSON.parse(response);
                            } catch (e) {
                                console.error('❌ خطا در parse کردن JSON:', e);
                                showWarning('خطا در پردازش اطلاعات طرح‌های بیمه');
                                return;
                            }
                        }
                        
                        console.log('🔍 parsed data:', data);
                        
                        if (data && data.success === true && data.data) {
                            var options = '<option value="">انتخاب طرح بیمه</option>';
                            $.each(data.data, function(index, item) {
                                var selected = item.id == @Model.InsurancePlanId ? 'selected' : '';
                                options += '<option value="' + item.id + '" ' + selected + '>' + item.name + '</option>';
                            });
                            
                            // حذف Select2 قبلی اگر وجود دارد
                            if ($('#InsurancePlanId').hasClass('select2-hidden-accessible')) {
                                $('#InsurancePlanId').select2('destroy');
                            }
                            
                            $('#InsurancePlanId').html(options);
                            
                            // فعال‌سازی Select2
                            $('#InsurancePlanId').select2({
                                placeholder: 'انتخاب طرح بیمه',
                                allowClear: true,
                                dir: 'rtl',
                                width: '100%'
                            });
                            
                            console.log('✅ طرح‌های بیمه بارگیری شدند:', data.data.length, 'مورد');
                        } else {
                            console.error('❌ خطا در بارگیری طرح‌های بیمه - data:', data);
                            showWarning('خطا در بارگیری طرح‌های بیمه');
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error('❌ خطای AJAX در بارگیری طرح‌های بیمه:', error);
                        showWarning('خطا در بارگیری طرح‌های بیمه');
                    }
                });
            }
            
            // Form submission handling
            $('form').on('submit', function(e) {
                // بررسی اینکه آیا dropdown ها بارگیری شده‌اند
                if (!dropdownsLoaded) {
                    e.preventDefault();
                    showWarning('لطفاً صبر کنید تا فهرست‌ها بارگیری شوند');
                    return false;
                }
                
                var departmentId = $('#DepartmentId').val();
                var serviceCategoryId = $('#ServiceCategoryId').val();
                var serviceId = $('#ServiceId').val();
                var insuranceProviderId = $('#InsuranceProviderId').val();
                var insurancePlanId = $('#InsurancePlanId').val();
                
                // Debug: نمایش مقادیر اولیه
                console.log('🔍 مقادیر اولیه قبل از پردازش:');
                console.log('DepartmentId:', departmentId);
                console.log('ServiceCategoryId:', serviceCategoryId);
                console.log('ServiceId:', serviceId);
                console.log('InsuranceProviderId:', insuranceProviderId);
                console.log('InsurancePlanId:', insurancePlanId);
                
                // بررسی اینکه آیا فیلدهای ضروری پر شده‌اند
                if (!departmentId || departmentId === '' || departmentId === 'در حال بارگیری دپارتمان‌ها...') {
                    e.preventDefault();
                    showWarning('لطفاً دپارتمان را انتخاب کنید');
                    return false;
                }
                
                if (!insuranceProviderId || insuranceProviderId === '' || insuranceProviderId === 'در حال بارگیری ارائه‌دهندگان...') {
                    e.preventDefault();
                    showWarning('لطفاً ارائه‌دهنده بیمه را انتخاب کنید');
                    return false;
                }
                
                if (!insurancePlanId || insurancePlanId === '' || insurancePlanId === 'در حال بارگیری طرح‌ها...') {
                    e.preventDefault();
                    showWarning('لطفاً طرح بیمه را انتخاب کنید');
                    return false;
                }
                
                // اگر سرفصل خدمت انتخاب نشده و خدمت هم انتخاب نشده
                if ((!serviceCategoryId || serviceCategoryId === '' || serviceCategoryId === 'در حال بارگیری سرفصل‌ها...') && 
                    (!serviceId || serviceId === '' || serviceId === 'در حال بارگیری خدمات...')) {
                    e.preventDefault();
                    showWarning('لطفاً سرفصل خدمت یا خدمت را انتخاب کنید');
                    return false;
                }
                
                // پردازش "همه خدمات"
                if (serviceId === 'all') {
                    $('#ServiceId').val('');
                    $('#IsAllServices').val('true');
                    console.log('🔄 مقدار "همه خدمات" به خالی تبدیل شد و IsAllServices = true');
                } else {
                    $('#IsAllServices').val('false');
                }
                
                // پردازش "همه سرفصل‌ها"
                if (serviceCategoryId === 'all') {
                    $('#ServiceCategoryId').val('');
                    $('#IsAllServiceCategories').val('true');
                    console.log('🔄 مقدار "همه سرفصل‌ها" به خالی تبدیل شد و IsAllServiceCategories = true');
                } else {
                    $('#IsAllServiceCategories').val('false');
                }
                
                // Debug: نمایش مقادیر نهایی
                console.log('🔍 مقادیر نهایی قبل از ارسال:');
                console.log('DepartmentId:', $('#DepartmentId').val());
                console.log('ServiceCategoryId:', $('#ServiceCategoryId').val());
                console.log('ServiceId:', $('#ServiceId').val());
                console.log('IsAllServices:', $('#IsAllServices').val());
                console.log('IsAllServiceCategories:', $('#IsAllServiceCategories').val());
                console.log('InsuranceProviderId:', $('#InsuranceProviderId').val());
                console.log('InsurancePlanId:', $('#InsurancePlanId').val());
                console.log('TariffPrice:', $('#TariffPrice').val());
                console.log('PatientShare:', $('#PatientShare').val());
                console.log('InsurerShare:', $('#InsurerShare').val());
                
                console.log('✅ فرم آماده ارسال است');
                $(this).addClass('was-validated');
            });
        });
    </script>
}
