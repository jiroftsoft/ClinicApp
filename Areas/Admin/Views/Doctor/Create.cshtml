@model ClinicApp.ViewModels.DoctorManagementVM.DoctorCreateEditViewModel
@{
    ViewBag.Title = "ثبت پزشک جدید";
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
}

@section Styles {
    <link href="~/Content/plugins/persian-datepicker/persian-datepicker.min.css" rel="stylesheet" />
    <style>
        /* Medical Environment Color Scheme */
        :root {
            --medical-primary: #2c5aa0;
            --medical-secondary: #6c757d;
            --medical-success: #28a745;
            --medical-danger: #dc3545;
            --medical-warning: #ffc107;
            --medical-info: #17a2b8;
            --medical-light: #f8f9fa;
            --medical-dark: #343a40;
            --medical-border: #dee2e6;
            --medical-text: #495057;
            --medical-text-muted: #6c757d;
        }

        /* Base Styles */
        body {
            font-family: 'Tahoma', 'Arial', sans-serif;
            font-size: 14px;
            line-height: 1.6;
            color: var(--medical-text);
            background-color: #ffffff;
        }

        /* Form Container */
        .medical-form-container {
            background: #ffffff;
            border: 1px solid var(--medical-border);
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            padding: 2rem;
            margin-bottom: 2rem;
        }

        .medical-form-header {
            border-bottom: 3px solid var(--medical-primary);
            padding-bottom: 1rem;
            margin-bottom: 2rem;
        }

        .medical-form-title {
            color: var(--medical-primary);
            font-size: 1.5rem;
            font-weight: 600;
            margin: 0;
        }

        .medical-form-subtitle {
            color: var(--medical-text-muted);
            font-size: 0.9rem;
            margin-top: 0.5rem;
        }

        /* Form Groups */
        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-group label {
            font-weight: 600;
            color: var(--medical-text);
            margin-bottom: 0.5rem;
            display: block;
        }

        .form-group label.required::after {
            content: " *";
            color: var(--medical-danger);
            font-weight: bold;
        }

        .form-control {
            border: 2px solid var(--medical-border);
            border-radius: 6px;
            padding: 0.75rem;
            font-size: 14px;
            transition: border-color 0.15s ease-in-out;
            background-color: #ffffff;
        }

        .form-control:focus {
            border-color: var(--medical-primary);
            box-shadow: 0 0 0 0.2rem rgba(44, 90, 160, 0.25);
            outline: 0;
        }

        .form-control.is-invalid {
            border-color: var(--medical-danger);
        }

        .form-control.is-valid {
            border-color: var(--medical-success);
        }

        /* Validation Messages */
        .invalid-feedback {
            display: block;
            color: var(--medical-danger);
            font-size: 0.875rem;
            margin-top: 0.25rem;
        }

        .valid-feedback {
            display: block;
            color: var(--medical-success);
            font-size: 0.875rem;
            margin-top: 0.25rem;
        }

        /* Buttons */
        .btn {
            font-size: 14px;
            font-weight: 600;
            padding: 0.75rem 1.5rem;
            border-radius: 6px;
            border: 2px solid transparent;
            transition: all 0.15s ease-in-out;
            min-width: 120px;
        }

        .btn-primary {
            background-color: var(--medical-primary);
            border-color: var(--medical-primary);
            color: #ffffff;
        }

        .btn-primary:hover {
            background-color: #1e4a8a;
            border-color: #1e4a8a;
        }

        .btn-secondary {
            background-color: var(--medical-secondary);
            border-color: var(--medical-secondary);
            color: #ffffff;
        }

        .btn-secondary:hover {
            background-color: #5a6268;
            border-color: #5a6268;
        }

        .btn-danger {
            background-color: var(--medical-danger);
            border-color: var(--medical-danger);
            color: #ffffff;
        }

        /* Form Sections */
        .form-section {
            background: var(--medical-light);
            border: 1px solid var(--medical-border);
            border-radius: 6px;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
        }

        .form-section-title {
            color: var(--medical-primary);
            font-size: 1.1rem;
            font-weight: 600;
            margin-bottom: 1rem;
            padding-bottom: 0.5rem;
            border-bottom: 2px solid var(--medical-primary);
        }

        /* Alert Messages */
        .alert {
            border-radius: 6px;
            border: none;
            padding: 1rem;
            margin-bottom: 1.5rem;
            font-size: 14px;
        }

        .alert-success {
            background-color: #d4edda;
            color: #155724;
            border-left: 4px solid var(--medical-success);
        }

        .alert-danger {
            background-color: #f8d7da;
            color: #721c24;
            border-left: 4px solid var(--medical-danger);
        }

        .alert-warning {
            background-color: #fff3cd;
            color: #856404;
            border-left: 4px solid var(--medical-warning);
        }

        /* Help Text */
        .help-text {
            font-size: 0.875rem;
            color: var(--medical-text-muted);
            margin-top: 0.25rem;
        }

        /* Responsive Design */
        @@media (max-width: 768px) {
            .medical-form-container {
                padding: 1rem;
            }
            
            .btn {
                width: 100%;
                margin-bottom: 0.5rem;
            }
        }

        /* RTL Specific Styles */
        .form-control {
            text-align: right;
        }

        .btn-group {
            direction: rtl;
        }

        /* Accessibility */
        .form-control:focus {
            outline: 2px solid var(--medical-primary);
            outline-offset: 2px;
        }

        /* Loading State */
        .form-loading {
            opacity: 0.6;
            pointer-events: none;
        }

        .spinner-border-sm {
            width: 1rem;
            height: 1rem;
        }
    </style>
}

<div class="container-fluid">
    <!-- Page Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="h3 mb-0 text-gray-800">
                <i class="fas fa-user-plus text-primary"></i>
                ثبت پزشک جدید
            </h1>
            <p class="text-muted mb-0">اطلاعات پزشک جدید را وارد کنید</p>
        </div>
        <a href="@Url.Action("Index", "Doctor")" class="btn btn-secondary">
            <i class="fas fa-arrow-right"></i>
            بازگشت به لیست
        </a>
    </div>

    <!-- Alert Messages -->
    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="fas fa-check-circle"></i>
            @TempData["Success"]
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
    }

    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="fas fa-exclamation-triangle"></i>
            @TempData["Error"]
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
    }

    @if (!ViewData.ModelState.IsValid)
    {
        <div class="alert alert-danger" role="alert">
            <h6 class="alert-heading">
                <i class="fas fa-exclamation-triangle"></i>
                خطاهای اعتبارسنجی:
            </h6>
            @Html.ValidationSummary(false, "", new { @class = "mb-0" })
        </div>
    }

    <!-- Main Form -->
    <div class="medical-form-container">
        <div class="medical-form-header">
            <h2 class="medical-form-title">اطلاعات پزشک</h2>
            <p class="medical-form-subtitle">لطفاً تمام فیلدهای الزامی را تکمیل کنید</p>
        </div>

        @using (Html.BeginForm("Create", "Doctor", FormMethod.Post, new { @class = "needs-validation", novalidate = "novalidate", enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()

            <!-- Basic Information Section -->
            <div class="form-section">
                <h3 class="form-section-title">
                    <i class="fas fa-user"></i>
                    اطلاعات پایه
                </h3>
                
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(m => m.FirstName, "نام", new { @class = "required" })
                            @Html.TextBoxFor(m => m.FirstName, new { 
                                @class = "form-control", 
                                placeholder = "نام پزشک را وارد کنید",
                                maxlength = "100",
                                required = "required"
                            })
                            @Html.ValidationMessageFor(m => m.FirstName, "", new { @class = "invalid-feedback" })
                            <div class="help-text">نام باید به فارسی و حداقل 2 کاراکتر باشد</div>
                        </div>
                    </div>
                    
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(m => m.LastName, "نام خانوادگی", new { @class = "required" })
                            @Html.TextBoxFor(m => m.LastName, new { 
                                @class = "form-control", 
                                placeholder = "نام خانوادگی پزشک را وارد کنید",
                                maxlength = "100",
                                required = "required"
                            })
                            @Html.ValidationMessageFor(m => m.LastName, "", new { @class = "invalid-feedback" })
                            <div class="help-text">نام خانوادگی باید به فارسی و حداقل 2 کاراکتر باشد</div>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(m => m.NationalCode, "کد ملی", new { @class = "required" })
                            @Html.TextBoxFor(m => m.NationalCode, new { 
                                @class = "form-control", 
                                placeholder = "کد ملی 10 رقمی",
                                maxlength = "10",
                                pattern = "[0-9]{10}",
                                required = "required"
                            })
                            @Html.ValidationMessageFor(m => m.NationalCode, "", new { @class = "invalid-feedback" })
                            <div class="help-text">کد ملی باید دقیقاً 10 رقم باشد</div>
                        </div>
                    </div>
                    
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(m => m.MedicalCouncilCode, "شماره نظام پزشکی", new { @class = "required" })
                            @Html.TextBoxFor(m => m.MedicalCouncilCode, new { 
                                @class = "form-control", 
                                placeholder = "شماره نظام پزشکی",
                                maxlength = "20",
                                required = "required"
                            })
                            @Html.ValidationMessageFor(m => m.MedicalCouncilCode, "", new { @class = "invalid-feedback" })
                            <div class="help-text">شماره نظام پزشکی الزامی است</div>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(m => m.PhoneNumber, "شماره تلفن", new { @class = "required" })
                            @Html.TextBoxFor(m => m.PhoneNumber, new { 
                                @class = "form-control", 
                                placeholder = "09123456789",
                                maxlength = "11",
                                pattern = "0[0-9]{10}",
                                required = "required"
                            })
                            @Html.ValidationMessageFor(m => m.PhoneNumber, "", new { @class = "invalid-feedback" })
                            <div class="help-text">شماره تلفن باید با 0 شروع شود و 11 رقم باشد</div>
                        </div>
                    </div>
                    
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(m => m.Email, "ایمیل")
                            @Html.TextBoxFor(m => m.Email, new { 
                                @class = "form-control", 
                                type = "email",
                                placeholder = "example@email.com",
                                maxlength = "100"
                            })
                            @Html.ValidationMessageFor(m => m.Email, "", new { @class = "invalid-feedback" })
                            <div class="help-text">فرمت ایمیل صحیح وارد کنید</div>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(m => m.Gender, "جنسیت", new { @class = "required" })
                            @Html.DropDownListFor(m => m.Gender, new SelectList(new[]
                            {
                                new { Value = "", Text = "انتخاب جنسیت" },
                                new { Value = "1", Text = "مرد" },
                                new { Value = "2", Text = "زن" }
                            }, "Value", "Text"), new { @class = "form-control", required = "required" })
                            @Html.ValidationMessageFor(m => m.Gender, "", new { @class = "invalid-feedback" })
                        </div>
                    </div>
                    
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(m => m.DateOfBirthShamsi, "تاریخ تولد")
                            @Html.TextBoxFor(m => m.DateOfBirthShamsi, new { 
                                @class = "form-control persian-date", 
                                placeholder = "مثال: 1369/03/27",
                                autocomplete = "off"
                            })
                            @Html.ValidationMessageFor(m => m.DateOfBirthShamsi, "", new { @class = "invalid-feedback" })
                            <div class="help-text">تاریخ تولد را به صورت شمسی وارد کنید</div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Professional Information Section -->
            <div class="form-section">
                <h3 class="form-section-title">
                    <i class="fas fa-stethoscope"></i>
                    اطلاعات حرفه‌ای
                </h3>
                
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(m => m.Degree, "مدرک تحصیلی", new { @class = "required" })
                            @Html.DropDownListFor(m => m.Degree, new SelectList(new[]
                            {
                                new { Value = "", Text = "انتخاب مدرک تحصیلی" },
                                new { Value = "1", Text = "پزشک عمومی" },
                                new { Value = "2", Text = "متخصص" },
                                new { Value = "3", Text = "فوق تخصص" },
                                new { Value = "4", Text = "دندانپزشک" },
                                new { Value = "5", Text = "داروساز" }
                            }, "Value", "Text"), new { @class = "form-control", required = "required" })
                            @Html.ValidationMessageFor(m => m.Degree, "", new { @class = "invalid-feedback" })
                        </div>
                    </div>
                    
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(m => m.SelectedSpecializationIds, "تخصص‌ها", new { @class = "required" })
                            <select id="SelectedSpecializationIds" name="SelectedSpecializationIds" multiple class="form-control" required>
                                @if (ViewBag.Specializations != null)
                                {
                                    foreach (var specialization in ViewBag.Specializations)
                                    {
                                        <option value="@specialization.SpecializationId">@specialization.Name</option>
                                    }
                                }
                            </select>
                            @Html.ValidationMessageFor(m => m.SelectedSpecializationIds, "", new { @class = "invalid-feedback" })
                            <div class="help-text">می‌توانید چند تخصص انتخاب کنید (Ctrl + کلیک)</div>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(m => m.University, "دانشگاه محل تحصیل")
                            @Html.TextBoxFor(m => m.University, new { 
                                @class = "form-control", 
                                placeholder = "نام دانشگاه محل تحصیل",
                                maxlength = "200"
                            })
                            @Html.ValidationMessageFor(m => m.University, "", new { @class = "invalid-feedback" })
                            <div class="help-text">نام دانشگاه محل تحصیل پزشک</div>
                        </div>
                    </div>
                    
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(m => m.GraduationYear, "سال فارغ‌التحصیلی")
                            @Html.TextBoxFor(m => m.GraduationYear, new { 
                                @class = "form-control", 
                                type = "number",
                                min = "1350",
                                max = "1410",
                                placeholder = "مثال: 1395"
                            })
                            @Html.ValidationMessageFor(m => m.GraduationYear, "", new { @class = "invalid-feedback" })
                            <div class="help-text">سال فارغ‌التحصیلی باید بین 1350 تا 1410 باشد</div>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(m => m.ExperienceYears, "سال‌های تجربه")
                            @Html.TextBoxFor(m => m.ExperienceYears, new { 
                                @class = "form-control", 
                                type = "number",
                                min = "0",
                                max = "50",
                                placeholder = "تعداد سال‌های تجربه"
                            })
                            @Html.ValidationMessageFor(m => m.ExperienceYears, "", new { @class = "invalid-feedback" })
                            <div class="help-text">تعداد سال‌های تجربه کاری</div>
                        </div>
                    </div>
                    
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(m => m.LicenseNumber, "شماره پروانه پزشکی")
                            @Html.TextBoxFor(m => m.LicenseNumber, new { 
                                @class = "form-control", 
                                placeholder = "شماره پروانه پزشکی",
                                maxlength = "50"
                            })
                            @Html.ValidationMessageFor(m => m.LicenseNumber, "", new { @class = "invalid-feedback" })
                            <div class="help-text">شماره پروانه پزشکی (اختیاری)</div>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-12">
                        <div class="form-group">
                            @Html.LabelFor(m => m.Bio, "بیوگرافی")
                            @Html.TextAreaFor(m => m.Bio, new { 
                                @class = "form-control", 
                                rows = "4",
                                placeholder = "توضیحات مختصر درباره سوابق و تخصص‌های پزشک...",
                                maxlength = "2000"
                            })
                            @Html.ValidationMessageFor(m => m.Bio, "", new { @class = "invalid-feedback" })
                            <div class="help-text">حداکثر 2000 کاراکتر</div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Contact Information Section -->
            <div class="form-section">
                <h3 class="form-section-title">
                    <i class="fas fa-address-book"></i>
                    اطلاعات تماس و آدرس
                </h3>
                
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(m => m.HomeAddress, "آدرس منزل")
                            @Html.TextAreaFor(m => m.HomeAddress, new { 
                                @class = "form-control", 
                                rows = "3",
                                placeholder = "آدرس منزل پزشک...",
                                maxlength = "500"
                            })
                            @Html.ValidationMessageFor(m => m.HomeAddress, "", new { @class = "invalid-feedback" })
                            <div class="help-text">آدرس منزل پزشک (اختیاری)</div>
                        </div>
                    </div>
                    
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(m => m.OfficeAddress, "آدرس مطب")
                            @Html.TextAreaFor(m => m.OfficeAddress, new { 
                                @class = "form-control", 
                                rows = "3",
                                placeholder = "آدرس مطب یا کلینیک...",
                                maxlength = "500"
                            })
                            @Html.ValidationMessageFor(m => m.OfficeAddress, "", new { @class = "invalid-feedback" })
                            <div class="help-text">آدرس مطب یا کلینیک پزشک</div>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(m => m.EmergencyContact, "شماره تماس اضطراری")
                            @Html.TextBoxFor(m => m.EmergencyContact, new { 
                                @class = "form-control", 
                                placeholder = "شماره تماس اضطراری",
                                maxlength = "50"
                            })
                            @Html.ValidationMessageFor(m => m.EmergencyContact, "", new { @class = "invalid-feedback" })
                            <div class="help-text">شماره تماس اضطراری (اختیاری)</div>
                        </div>
                    </div>
                    
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(m => m.Education, "تحصیلات")
                            @Html.TextBoxFor(m => m.Education, new { 
                                @class = "form-control", 
                                placeholder = "تحصیلات تکمیلی یا دوره‌های تخصصی",
                                maxlength = "100"
                            })
                            @Html.ValidationMessageFor(m => m.Education, "", new { @class = "invalid-feedback" })
                            <div class="help-text">تحصیلات تکمیلی یا دوره‌های تخصصی (اختیاری)</div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Status Section -->
            <div class="form-section">
                <h3 class="form-section-title">
                    <i class="fas fa-cog"></i>
                    تنظیمات
                </h3>
                
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <div class="custom-control custom-switch">
                                @Html.CheckBoxFor(m => m.IsActive, new { @class = "custom-control-input", id = "IsActive" })
                                <label class="custom-control-label" for="IsActive">
                                    پزشک فعال است
                                </label>
                            </div>
                            <div class="help-text">پزشک فعال می‌تواند نوبت‌دهی کند</div>
                        </div>
                    </div>
                    
                    <div class="col-md-6">
                        <div class="form-group">
                            <label for="ProfileImage">تصویر پروفایل</label>
                            <input type="file" id="ProfileImage" name="ProfileImage" class="form-control" accept="image/*" />
                            <div class="help-text">حداکثر 2 مگابایت، فرمت‌های مجاز: JPG, PNG, GIF</div>
                            <div id="imagePreview" class="mt-2" style="display: none;">
                                <img id="previewImg" src="" alt="پیش‌نمایش" style="max-width: 150px; max-height: 150px; border-radius: 8px;" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Form Actions -->
            <div class="d-flex justify-content-end align-items-center pt-3 border-top">
                <a href="@Url.Action("Index", "Doctor")" class="btn btn-secondary me-2">
                    <i class="fas fa-times"></i>
                    انصراف
                </a>
                <button type="submit" class="btn btn-primary" id="submitBtn">
                    <i class="fas fa-save"></i>
                    ثبت پزشک
                </button>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script src="~/Content/plugins/persian-datepicker/persian-datepicker.min.js"></script>
    <script src="~/Content/plugins/SweetAlert2/sweetalert2@11.js"></script>
    <script>
        $(document).ready(function () {
            // Initialize Persian DatePicker
            $('.persian-date').persianDatepicker({
                format: 'YYYY/MM/DD',
                initialValue: false,
                autoClose: true,
                onSelect: function(unix) {
                    var date = new Date(unix);
                    var persianDate = date.getFullYear() + '/' + 
                        String(date.getMonth() + 1).padStart(2, '0') + '/' + 
                        String(date.getDate()).padStart(2, '0');
                    $(this.element).val(persianDate);
                }
            });

            // Form validation
            $('form').on('submit', function() {
                var isValid = true;
                
                // Check required fields
                $(this).find('[required]').each(function() {
                    if (!$(this).val()) {
                        $(this).addClass('is-invalid');
                        isValid = false;
                    } else {
                        $(this).removeClass('is-invalid').addClass('is-valid');
                    }
                });

                // Check specializations
                var specializations = $('#SelectedSpecializationIds').val();
                if (!specializations || specializations.length === 0) {
                    $('#SelectedSpecializationIds').addClass('is-invalid');
                    isValid = false;
                } else {
                    $('#SelectedSpecializationIds').removeClass('is-invalid').addClass('is-valid');
                }

                if (isValid) {
                    $('#submitBtn').prop('disabled', true).html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> در حال ثبت...');
                    $('form').addClass('form-loading');
                }

                return isValid;
            });

            // Real-time validation
            $('input, select, textarea').on('blur', function() {
                if ($(this).prop('required') && !$(this).val()) {
                    $(this).addClass('is-invalid').removeClass('is-valid');
                } else if ($(this).val()) {
                    $(this).removeClass('is-invalid').addClass('is-valid');
                }
            });

            // National Code validation
            $('#NationalCode').on('input', function() {
                var value = $(this).val();
                if (value.length === 10) {
                    if (isValidNationalCode(value)) {
                        $(this).removeClass('is-invalid').addClass('is-valid');
                    } else {
                        $(this).addClass('is-invalid').removeClass('is-valid');
                    }
                }
            });

            // Image preview
            $('#ProfileImage').on('change', function() {
                var file = this.files[0];
                if (file) {
                    // Check file size (2MB)
                    if (file.size > 2 * 1024 * 1024) {
                        Swal.fire({
                            icon: 'error',
                            title: 'خطا',
                            text: 'حجم فایل نباید بیشتر از 2 مگابایت باشد.',
                            confirmButtonText: 'باشه'
                        });
                        $(this).val('');
                        return;
                    }

                    // Check file type
                    var allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif'];
                    if (!allowedTypes.includes(file.type)) {
                        Swal.fire({
                            icon: 'error',
                            title: 'خطا',
                            text: 'فقط فایل‌های تصویری مجاز هستند.',
                            confirmButtonText: 'باشه'
                        });
                        $(this).val('');
                        return;
                    }

                    // Show preview
                    var reader = new FileReader();
                    reader.onload = function(e) {
                        $('#previewImg').attr('src', e.target.result);
                        $('#imagePreview').show();
                    };
                    reader.readAsDataURL(file);
                } else {
                    $('#imagePreview').hide();
                }
            });

            function isValidNationalCode(code) {
                if (code.length !== 10) return false;
                
                var sum = 0;
                for (var i = 0; i < 9; i++) {
                    sum += parseInt(code[i]) * (10 - i);
                }
                var remainder = sum % 11;
                var checkDigit = parseInt(code[9]);
                
                if (remainder < 2) {
                    return checkDigit === remainder;
                } else {
                    return checkDigit === (11 - remainder);
                }
            }
        });
    </script>
}
