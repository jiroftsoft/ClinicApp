@model ClinicApp.ViewModels.Insurance.InsuranceProvider.InsuranceProviderCreateEditViewModel
@{
    ViewBag.Title = "ویرایش ارائه‌دهنده بیمه";
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
}

@Html.AntiForgeryToken()

@section Styles {
    <style>
        .insurance-form {
            background: #ffffff;
            border-radius: 10px;
            padding: 2rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        .insurance-form .form-control {
            border-radius: 8px;
            border: 2px solid #e9ecef;
            transition: all 0.3s ease;
        }
        .insurance-form .form-control:focus {
            border-color: #0d6efd;
            box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25);
        }
        .form-group label {
            font-weight: 600;
            color: #495057;
            margin-bottom: 0.5rem;
        }
        .btn-submit {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border: none;
            border-radius: 8px;
            padding: 0.75rem 2rem;
            font-weight: 600;
            transition: all 0.3s ease;
        }
        .btn-submit:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }
        .btn-cancel {
            background: #6c757d;
            border: none;
            border-radius: 8px;
            padding: 0.75rem 2rem;
            font-weight: 600;
            transition: all 0.3s ease;
        }
        .btn-cancel:hover {
            background: #5a6268;
            transform: translateY(-2px);
        }
        .form-check-input:checked {
            background-color: #0d6efd;
            border-color: #0d6efd;
        }
        .form-check-label {
            font-weight: 500;
        }
    </style>
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>ویرایش ارائه‌دهنده بیمه</h2>
                <a href="@Url.Action("Index", "InsuranceProvider")" class="btn btn-secondary">
                    <i class="fas fa-arrow-right"></i> بازگشت به لیست
                </a>
            </div>

            <div class="row justify-content-center">
                <div class="col-md-8">
                    <div class="insurance-form">
                        @using (Html.BeginForm("Edit", "InsuranceProvider", FormMethod.Post, new { @class = "needs-validation", novalidate = "novalidate" }))
                        {
                            @Html.AntiForgeryToken()
                            @Html.HiddenFor(m => m.InsuranceProviderId)
                            
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.Name, new { @class = "form-label" })
                                        @Html.TextBoxFor(m => m.Name, new { @class = "form-control", placeholder = "نام ارائه‌دهنده بیمه", required = "required" })
                                        @Html.ValidationMessageFor(m => m.Name, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.Code, new { @class = "form-label" })
                                        @Html.TextBoxFor(m => m.Code, new { @class = "form-control", placeholder = "کد ارائه‌دهنده بیمه", required = "required" })
                                        @Html.ValidationMessageFor(m => m.Code, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(m => m.ContactInfo, new { @class = "form-label" })
                                @Html.TextAreaFor(m => m.ContactInfo, new { @class = "form-control", rows = 3, placeholder = "اطلاعات تماس (آدرس، تلفن، ایمیل و ...)" })
                                @Html.ValidationMessageFor(m => m.ContactInfo, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group">
                                <div class="form-check">
                                    @Html.CheckBoxFor(m => m.IsActive, new { @class = "form-check-input" })
                                    @Html.LabelFor(m => m.IsActive, new { @class = "form-check-label" })
                                </div>
                            </div>

                            <div class="form-group text-center">
                                <button type="submit" class="btn btn-submit text-white me-3">
                                    <i class="fas fa-save"></i> ذخیره تغییرات
                                </button>
                                <a href="@Url.Action("Index", "InsuranceProvider")" class="btn btn-cancel text-white">
                                    <i class="fas fa-times"></i> انصراف
                                </a>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Form validation
            (function() {
                'use strict';
                window.addEventListener('load', function() {
                    var forms = document.getElementsByClassName('needs-validation');
                    var validation = Array.prototype.filter.call(forms, function(form) {
                        form.addEventListener('submit', function(event) {
                            if (form.checkValidity() === false) {
                                event.preventDefault();
                                event.stopPropagation();
                            }
                            form.classList.add('was-validated');
                        }, false);
                    });
                }, false);
            })();

            var currentId = $('#InsuranceProviderId').val();

            // Real-time validation for Code field
            $('#Code').on('blur', function() {
                var code = $(this).val();
                if (code && code.length > 0) {
                    $.ajax({
                        url: '@Url.Action("CheckCodeExists", "InsuranceProvider")',
                        type: 'POST',
                        dataType: 'json',
                        contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
                        data: {
                            code: code,
                            excludeId: currentId,
                            __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                        },
                        success: function(response) {
                            if (response.exists) {
                                $('#Code').addClass('is-invalid');
                                if (!$('#Code').next('.invalid-feedback').length) {
                                    $('#Code').after('<div class="invalid-feedback">این کد قبلاً استفاده شده است</div>');
                                }
                            } else {
                                $('#Code').removeClass('is-invalid');
                                $('#Code').next('.invalid-feedback').remove();
                            }
                        }
                    });
                }
            });

            // Real-time validation for Name field
            $('#Name').on('blur', function() {
                var name = $(this).val();
                if (name && name.length > 0) {
                    $.ajax({
                        url: '@Url.Action("CheckNameExists", "InsuranceProvider")',
                        type: 'POST',
                        dataType: 'json',
                        contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
                        data: {
                            name: name,
                            excludeId: currentId,
                            __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                        },
                        success: function(response) {
                            if (response.exists) {
                                $('#Name').addClass('is-invalid');
                                if (!$('#Name').next('.invalid-feedback').length) {
                                    $('#Name').after('<div class="invalid-feedback">این نام قبلاً استفاده شده است</div>');
                                }
                            } else {
                                $('#Name').removeClass('is-invalid');
                                $('#Name').next('.invalid-feedback').remove();
                            }
                        }
                    });
                }
            });

            // Auto-format Code field (uppercase)
            $('#Code').on('input', function() {
                $(this).val($(this).val().toUpperCase());
            });
        });
    </script>
}
