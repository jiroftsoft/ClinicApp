@model int // PatientId

@{
    var patientId = Model;
}

<div id="patientInsuranceStatusCard_@patientId" class="patient-insurance-status-card card shadow-sm mb-4">
    <div class="card-header bg-primary text-white">
        <h6 class="mb-0">
            <i class="fas fa-shield-alt"></i> وضعیت بیمه بیمار
            <button type="button" class="btn btn-sm btn-outline-light float-end" onclick="refreshInsuranceStatus(@patientId)">
                <i class="fas fa-sync-alt"></i>
            </button>
        </h6>
    </div>
    <div class="card-body">
        <!-- وضعیت بیمه پایه -->
        <div class="row mb-3">
            <div class="col-md-6">
                <div class="d-flex align-items-center">
                    <div class="insurance-status-indicator me-2" id="primaryInsuranceIndicator_@patientId">
                        <i class="fas fa-circle text-secondary"></i>
                    </div>
                    <div>
                        <strong>بیمه پایه:</strong>
                        <span id="primaryInsuranceStatus_@patientId" class="badge bg-secondary">در حال بررسی...</span>
                    </div>
                </div>
                <div id="primaryInsuranceDetails_@patientId" class="mt-2 small text-muted">
                    <div id="primaryInsuranceName_@patientId">-</div>
                    <div id="primaryInsurancePolicy_@patientId">-</div>
                    <div id="primaryInsuranceDates_@patientId">-</div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="d-flex align-items-center">
                    <div class="insurance-status-indicator me-2" id="supplementaryInsuranceIndicator_@patientId">
                        <i class="fas fa-circle text-secondary"></i>
                    </div>
                    <div>
                        <strong>بیمه تکمیلی:</strong>
                        <span id="supplementaryInsuranceStatus_@patientId" class="badge bg-secondary">در حال بررسی...</span>
                    </div>
                </div>
                <div id="supplementaryInsuranceDetails_@patientId" class="mt-2 small text-muted">
                    <div id="supplementaryInsuranceName_@patientId">-</div>
                    <div id="supplementaryInsurancePolicy_@patientId">-</div>
                    <div id="supplementaryInsuranceDates_@patientId">-</div>
                </div>
            </div>
        </div>

        <!-- اعتبارسنجی -->
        <div class="row">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <strong>اعتبارسنجی:</strong>
                        <span id="validationStatus_@patientId" class="badge bg-secondary">در حال بررسی...</span>
                    </div>
                    <div>
                        <button type="button" class="btn btn-sm btn-outline-primary" onclick="validatePatientInsurance(@patientId)">
                            <i class="fas fa-check-circle"></i> اعتبارسنجی
                        </button>
                        <button type="button" class="btn btn-sm btn-outline-info" onclick="quickValidateInsurance(@patientId)">
                            <i class="fas fa-bolt"></i> بررسی سریع
                        </button>
                    </div>
                </div>
                <div id="validationIssues_@patientId" class="mt-2" style="display: none;">
                    <!-- Issues will be populated here -->
                </div>
            </div>
        </div>

        <!-- توصیه‌ها -->
        <div id="recommendations_@patientId" class="mt-3" style="display: none;">
            <div class="alert alert-info">
                <h6><i class="fas fa-lightbulb"></i> توصیه‌ها:</h6>
                <ul id="recommendationsList_@patientId">
                    <!-- Recommendations will be populated here -->
                </ul>
            </div>
        </div>
    </div>
</div>

<style>
    .patient-insurance-status-card {
        border-left: 4px solid #007bff;
    }
    
    .insurance-status-indicator {
        width: 12px;
        height: 12px;
    }
    
    .insurance-status-indicator i {
        font-size: 12px;
    }
    
    .badge {
        font-size: 0.75em;
    }
</style>

<script>
    $(document).ready(function() {
        // بارگذاری اولیه وضعیت بیمه
        loadPatientInsuranceStatus(@patientId);
    });

    function loadPatientInsuranceStatus(patientId) {
        $.ajax({
            url: '@Url.Action("GetPatientInsuranceStatusForReception", "Reception")',
            method: 'GET',
            data: { patientId: patientId },
            success: function(response) {
                if (response.Success) {
                    updateInsuranceStatusDisplay(patientId, response.Data);
                } else {
                    showInsuranceError(patientId, response.Message);
                }
            },
            error: function(xhr, status, error) {
                showInsuranceError(patientId, 'خطا در دریافت وضعیت بیمه');
            }
        });
    }

    function updateInsuranceStatusDisplay(patientId, status) {
        // به‌روزرسانی وضعیت بیمه پایه
        if (status.HasPrimaryInsurance && status.PrimaryInsurance) {
            updateInsuranceDisplay(patientId, 'primary', status.PrimaryInsurance, true);
        } else {
            updateInsuranceDisplay(patientId, 'primary', null, false);
        }

        // به‌روزرسانی وضعیت بیمه تکمیلی
        if (status.HasSupplementaryInsurance && status.SupplementaryInsurance) {
            updateInsuranceDisplay(patientId, 'supplementary', status.SupplementaryInsurance, true);
        } else {
            updateInsuranceDisplay(patientId, 'supplementary', null, false);
        }
    }

    function updateInsuranceDisplay(patientId, type, insurance, hasInsurance) {
        const prefix = type + 'Insurance';
        const indicator = $('#' + prefix + 'Indicator_' + patientId);
        const status = $('#' + prefix + 'Status_' + patientId);
        const details = $('#' + prefix + 'Details_' + patientId);

        if (hasInsurance && insurance) {
            // بیمه موجود و فعال
            indicator.find('i').removeClass('text-secondary text-danger text-warning').addClass('text-success');
            status.removeClass('bg-secondary bg-danger bg-warning').addClass('bg-success').text('فعال');
            
            // نمایش جزئیات
            $('#' + prefix + 'Name_' + patientId).text(insurance.Name || '-');
            $('#' + prefix + 'Policy_' + patientId).text('شماره بیمه: ' + (insurance.PolicyNumber || '-'));
            
            const startDate = insurance.StartDate ? new Date(insurance.StartDate).toLocaleDateString('fa-IR') : '-';
            const endDate = insurance.EndDate ? new Date(insurance.EndDate).toLocaleDateString('fa-IR') : 'نامحدود';
            $('#' + prefix + 'Dates_' + patientId).text('از ' + startDate + ' تا ' + endDate);
        } else {
            // بیمه موجود نیست
            indicator.find('i').removeClass('text-success text-warning').addClass('text-danger');
            status.removeClass('bg-success bg-warning').addClass('bg-danger').text('ندارد');
            
            // پاک کردن جزئیات
            $('#' + prefix + 'Name_' + patientId).text('-');
            $('#' + prefix + 'Policy_' + patientId).text('-');
            $('#' + prefix + 'Dates_' + patientId).text('-');
        }
    }

    function validatePatientInsurance(patientId) {
        $('#validationStatus_' + patientId).removeClass('bg-success bg-danger').addClass('bg-secondary').text('در حال بررسی...');
        
        $.ajax({
            url: '@Url.Action("ValidatePatientInsuranceForReception", "Reception")',
            method: 'GET',
            data: { patientId: patientId },
            success: function(response) {
                if (response.Success) {
                    updateValidationDisplay(patientId, response.Data);
                } else {
                    showValidationError(patientId, response.Message);
                }
            },
            error: function(xhr, status, error) {
                showValidationError(patientId, 'خطا در اعتبارسنجی بیمه');
            }
        });
    }

    function quickValidateInsurance(patientId) {
        $('#validationStatus_' + patientId).removeClass('bg-success bg-danger').addClass('bg-secondary').text('در حال بررسی...');
        
        $.ajax({
            url: '@Url.Action("QuickValidatePatientInsurance", "Reception")',
            method: 'GET',
            data: { patientId: patientId },
            success: function(response) {
                if (response.Success && response.Data) {
                    $('#validationStatus_' + patientId).removeClass('bg-secondary bg-danger').addClass('bg-success').text('معتبر');
                    $('#validationIssues_' + patientId).hide();
                } else {
                    $('#validationStatus_' + patientId).removeClass('bg-secondary bg-success').addClass('bg-danger').text('نامعتبر');
                    showValidationError(patientId, response.Message);
                }
            },
            error: function(xhr, status, error) {
                showValidationError(patientId, 'خطا در بررسی سریع اعتبار بیمه');
            }
        });
    }

    function updateValidationDisplay(patientId, validationResult) {
        if (validationResult.IsValid) {
            $('#validationStatus_' + patientId).removeClass('bg-secondary bg-danger').addClass('bg-success').text('معتبر');
        } else {
            $('#validationStatus_' + patientId).removeClass('bg-secondary bg-success').addClass('bg-danger').text('نامعتبر');
        }

        // نمایش مسائل
        if (validationResult.Issues && validationResult.Issues.length > 0) {
            const issuesHtml = validationResult.Issues.map(issue => 
                `<div class="alert alert-${getSeverityClass(issue.Severity)} alert-sm">
                    <strong>${issue.Message}</strong>
                    ${issue.Recommendation ? '<br><small>' + issue.Recommendation + '</small>' : ''}
                </div>`
            ).join('');
            $('#validationIssues_' + patientId).html(issuesHtml).show();
        } else {
            $('#validationIssues_' + patientId).hide();
        }

        // نمایش توصیه‌ها
        if (validationResult.Recommendations && validationResult.Recommendations.length > 0) {
            const recommendationsHtml = validationResult.Recommendations.map(rec => `<li>${rec}</li>`).join('');
            $('#recommendationsList_' + patientId).html(recommendationsHtml);
            $('#recommendations_' + patientId).show();
        } else {
            $('#recommendations_' + patientId).hide();
        }
    }

    function getSeverityClass(severity) {
        switch(severity) {
            case 'Critical': return 'danger';
            case 'Warning': return 'warning';
            case 'Info': return 'info';
            default: return 'secondary';
        }
    }

    function showInsuranceError(patientId, message) {
        $('#primaryInsuranceStatus_' + patientId).removeClass('bg-success bg-secondary').addClass('bg-danger').text('خطا');
        $('#supplementaryInsuranceStatus_' + patientId).removeClass('bg-success bg-secondary').addClass('bg-danger').text('خطا');
        toastr.error('خطا در دریافت وضعیت بیمه: ' + message);
    }

    function showValidationError(patientId, message) {
        $('#validationStatus_' + patientId).removeClass('bg-success bg-secondary').addClass('bg-danger').text('خطا');
        toastr.error('خطا در اعتبارسنجی: ' + message);
    }

    function refreshInsuranceStatus(patientId) {
        loadPatientInsuranceStatus(patientId);
        toastr.info('وضعیت بیمه به‌روزرسانی شد');
    }
</script>
