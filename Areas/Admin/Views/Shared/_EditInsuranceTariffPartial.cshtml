@model ClinicApp.ViewModels.EditInsuranceTariffViewModel
@{
    ViewBag.Title = "ویرایش تعرفه بیمه";
    Layout = null;
}

<div id="tariffModal" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header bg-warning text-dark">
                <h5 class="modal-title">ویرایش تعرفه بیمه</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            @using (Html.BeginForm("EditTariff", "Insurance", FormMethod.Post, new { id = "editTariffForm" }))
            {
                @Html.AntiForgeryToken()
                @Html.HiddenFor(model => model.InsuranceTariffId)
                <div class="modal-body">
                    @Html.HiddenFor(model => model.InsuranceId)

                    @if (!ViewData.ModelState.IsValid)
                    {
                        <div class="alert alert-danger">
                            <strong>خطا در اعتبارسنجی:</strong>
                            <ul>
                                @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                                {
                                    <li>@error.ErrorMessage</li>
                                }
                            </ul>
                        </div>
                    }

                    <div class="form-row">
                        <div class="form-group col-md-12">
                            @Html.LabelFor(model => model.ServiceId, new { @class = "font-weight-bold" })
                            @Html.DropDownListFor(model => model.ServiceId, new SelectList(ViewBag.Services, "ServiceId", "Title"),
                                "انتخاب خدمت", new { @class = "form-control select2" })
                            @Html.ValidationMessageFor(model => model.ServiceId, "", new { @class = "text-danger small" })
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group col-md-6">
                            @Html.LabelFor(model => model.TariffPrice, new { @class = "font-weight-bold" })
                            <div class="input-group">
                                @Html.TextBoxFor(model => model.TariffPrice, new { @class = "form-control", type = "number", min = "0" })
                                <div class="input-group-append">
                                    <span class="input-group-text">ریال</span>
                                </div>
                            </div>
                            @Html.ValidationMessageFor(model => model.TariffPrice, "", new { @class = "text-danger small" })
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group col-md-6">
                            @Html.LabelFor(model => model.PatientShare, new { @class = "font-weight-bold" })
                            <div class="input-group">
                                @Html.TextBoxFor(model => model.PatientShare, new { @class = "form-control", type = "number", min = "0", max = "100", step = "0.01" })
                                <div class="input-group-append">
                                    <span class="input-group-text">%</span>
                                </div>
                            </div>
                            @Html.ValidationMessageFor(model => model.PatientShare, "", new { @class = "text-danger small" })
                        </div>

                        <div class="form-group col-md-6">
                            @Html.LabelFor(model => model.InsurerShare, new { @class = "font-weight-bold" })
                            <div class="input-group">
                                @Html.TextBoxFor(model => model.InsurerShare, new { @class = "form-control", type = "number", min = "0", max = "100", step = "0.01" })
                                <div class="input-group-append">
                                    <span class="input-group-text">%</span>
                                </div>
                            </div>
                            @Html.ValidationMessageFor(model => model.InsurerShare, "", new { @class = "text-danger small" })
                        </div>
                    </div>
                </div>
                <div class="modal-footer bg-light">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">انصراف</button>
                    <button type="submit" class="btn btn-warning">ذخیره تغییرات</button>
                </div>
            }
        </div>
    </div>
</div>

<script>
    $(function () {
        $('#tariffModal').modal('show');

        // Initialize select2
        $('.select2').select2({
            placeholder: "خدمت مورد نظر را انتخاب کنید",
            language: {
                noResults: function () {
                    return "خدمتی یافت نشد";
                }
            }
        });

        $('#editTariffForm').submit(function (e) {
            e.preventDefault();

            $.ajax({
                url: this.action,
                type: this.method,
                data: $(this).serialize(),
                success: function (response) {
                    if (response.success) {
                        $('#tariffModal').modal('hide');
                        Swal.fire({
                            icon: 'success',
                            title: 'موفقیت',
                            text: response.message,
                            confirmButtonText: 'باشه'
                        }).then((result) => {
                            // بارگیری مجدد لیست تعرفه‌ها
                            loadTariffs();
                        });
                    } else {
                        // نمایش خطاهای اعتبارسنجی
                        let errorHtml = '<strong>خطا:</strong><ul>';
                        if (response.message) {
                            errorHtml += `<li>${response.message}</li>`;
                        }
                        errorHtml += '</ul>';

                        $('.modal-body').prepend(`
                            <div class="alert alert-danger">
                                ${errorHtml}
                            </div>
                        `);
                    }
                },
                error: function (xhr) {
                    Swal.fire({
                        icon: 'error',
                        title: 'خطا',
                        text: 'خطای سیستمی رخ داده است. لطفاً بعداً مجدداً تلاش کنید.',
                        confirmButtonText: 'بستن'
                    });
                }
            });
        });
    });
</script>