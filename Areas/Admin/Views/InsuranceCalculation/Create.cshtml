@model ClinicApp.ViewModels.Insurance.InsuranceCalculation.InsuranceCalculationViewModel
@{
    ViewBag.Title = "ÿß€åÿ¨ÿßÿØ ŸÖÿ≠ÿßÿ≥ÿ®Ÿá ÿ®€åŸÖŸá ÿ¨ÿØ€åÿØ";
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
}

@Html.Partial("_NotificationMessages")

@section Styles {
    <!-- Select2 CSS - Local Files -->
    <link href="~/Content/plugins/select2/css/select2.min.css" rel="stylesheet" />
    <link href="~/Content/plugins/select2/css/select2-bootstrap4.min.css" rel="stylesheet" />
    
    <style>
        /* Medical Environment Color Scheme - ÿ∑ÿ®ŸÇ ŸÇÿ±ÿßÿ±ÿØÿßÿØ */
        :root {
            --medical-primary: #2c5aa0;
            --medical-secondary: #6c757d;
            --medical-success: #28a745;
            --medical-danger: #dc3545;
            --medical-warning: #ffc107;
            --medical-info: #17a2b8;
            --medical-light: #f8f9fa;
            --medical-dark: #343a40;
            --medical-border: #dee2e6;
            --medical-text: #495057;
            --medical-text-muted: #6c757d;
        }

        .form-container {
            background: #ffffff;
            border-radius: 10px;
            padding: 2rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            margin-bottom: 2rem;
            border: 1px solid var(--medical-border);
        }

        .form-card {
            background: #ffffff;
            border-radius: 8px;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
            border: 1px solid var(--medical-border);
        }

        .form-card-header {
            border-bottom: 2px solid var(--medical-primary);
            padding-bottom: 1rem;
            margin-bottom: 1.5rem;
        }

        .form-card-title {
            color: var(--medical-primary);
            font-weight: 600;
            font-size: 1.2rem;
            margin: 0;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-label {
            font-weight: 600;
            color: var(--medical-text);
            margin-bottom: 0.5rem;
        }

        .form-control {
            border: 1px solid var(--medical-border);
            border-radius: 0.375rem;
            padding: 0.75rem;
            transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
        }

        .form-control:focus {
            border-color: var(--medical-primary);
            box-shadow: 0 0 0 0.2rem rgba(44, 90, 160, 0.25);
        }

        .form-control.is-invalid {
            border-color: var(--medical-danger);
        }

        .form-control.is-valid {
            border-color: var(--medical-success);
        }

        .invalid-feedback {
            display: block;
            width: 100%;
            margin-top: 0.25rem;
            font-size: 0.875rem;
            color: var(--medical-danger);
        }

        .valid-feedback {
            display: block;
            width: 100%;
            margin-top: 0.25rem;
            font-size: 0.875rem;
            color: var(--medical-success);
        }

        .info-box {
            background-color: #e7f3ff;
            border: 1px solid #b3d9ff;
            padding: 1rem;
            border-radius: 0.5rem;
            margin-top: 0.5rem;
        }

        .info-box .info-text {
            color: #0066cc;
            font-size: 0.9rem;
            margin: 0;
        }

        .warning-box {
            background-color: #fff3cd;
            border: 1px solid #ffeaa7;
            padding: 1rem;
            border-radius: 0.5rem;
            margin-top: 0.5rem;
        }

        .warning-box .warning-text {
            color: #856404;
            font-size: 0.9rem;
            margin: 0;
        }

        .info-box {
            background-color: #d1ecf1;
            border: 1px solid #bee5eb;
            border-radius: 0.5rem;
            padding: 1rem;
            margin-top: 0.5rem;
        }

        .info-box .info-text {
            color: #0c5460;
            font-size: 0.9rem;
            margin: 0;
        }

        .calculation-preview {
            background: linear-gradient(135deg, #e3f2fd, #f3e5f5);
            padding: 2rem;
            border-radius: 0.5rem;
            margin: 2rem 0;
            border: 1px solid var(--medical-border);
            display: none;
        }

        .calculation-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1.5rem;
            margin-top: 1.5rem;
        }

        .calculation-card {
            background: white;
            padding: 1.5rem;
            border-radius: 0.5rem;
            text-align: center;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            border: 1px solid var(--medical-border);
        }

        .calculation-value {
            font-size: 1.5rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
        }

        .calculation-label {
            font-size: 0.9rem;
            color: var(--medical-text-muted);
            font-weight: 500;
        }

        .service-amount { color: var(--medical-primary); }
        .insurance-share { color: var(--medical-success); }
        .patient-share { color: var(--medical-danger); }
        .coverage-percent { color: var(--medical-info); }
        .deductible { color: var(--medical-warning); }

        .btn-primary {
            background-color: var(--medical-primary);
            border-color: var(--medical-primary);
            font-weight: 600;
            padding: 0.75rem 2rem;
        }

        .btn-primary:hover {
            background-color: #1e3a8a;
            border-color: #1a3469;
        }

        .btn-secondary {
            background-color: var(--medical-secondary);
            border-color: var(--medical-secondary);
            font-weight: 600;
            padding: 0.75rem 2rem;
        }

        .btn-secondary:hover {
            background-color: #545b62;
            border-color: #4e555b;
        }

        .btn-calculate {
            background-color: var(--medical-info);
            border-color: var(--medical-info);
            color: white;
            font-weight: 600;
        }

        .btn-calculate:hover {
            background-color: #138496;
            border-color: #117a8b;
        }

        .date-picker {
            position: relative;
        }

        .date-picker .form-control {
            padding-right: 2.5rem;
        }

        .date-picker .date-icon {
            position: absolute;
            right: 0.75rem;
            top: 50%;
            transform: translateY(-50%);
            color: var(--medical-text-muted);
            pointer-events: none;
        }

        /* üè• Select2 Custom Styling for Medical Environment */
        .select2-container--bootstrap-5 .select2-selection {
            border: 1px solid var(--medical-border);
            border-radius: 0.375rem;
            min-height: 2.5rem;
        }

        .select2-container--bootstrap-5 .select2-selection:focus {
            border-color: var(--medical-primary);
            box-shadow: 0 0 0 0.2rem rgba(44, 90, 160, 0.25);
        }

        .select2-container--bootstrap-5 .select2-dropdown {
            border: 1px solid var(--medical-border);
            border-radius: 0.375rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .select2-container--bootstrap-5 .select2-results__option {
            padding: 0.75rem;
        }

        .select2-container--bootstrap-5 .select2-results__option--highlighted {
            background-color: var(--medical-primary);
            color: white;
        }

        .select2-container--bootstrap-5 .select2-results__option--selected {
            background-color: var(--medical-light);
            color: var(--medical-text);
        }

        /* Patient Option Styling */
        .patient-option {
            padding: 0.5rem 0;
        }

        .patient-name {
            font-weight: 600;
            color: var(--medical-text);
            margin-bottom: 0.25rem;
        }

        .patient-details {
            font-size: 0.875rem;
            color: var(--medical-text-muted);
        }

        /* Loading States */
        .select2-container--bootstrap-5 .select2-selection__placeholder {
            color: var(--medical-text-muted);
        }

        .select2-container--bootstrap-5 .select2-selection__clear {
            color: var(--medical-text-muted);
        }

        .select2-container--bootstrap-5 .select2-selection__clear:hover {
            color: var(--medical-danger);
        }

        /* RTL Support */
        .select2-container--bootstrap-5 .select2-selection__arrow {
            right: 0.75rem;
            left: auto;
        }

        .select2-container--bootstrap-5 .select2-selection__rendered {
            padding-right: 2.5rem;
            padding-left: 0.75rem;
        }

        @@media (max-width: 768px) {
            .form-container {
                padding: 1rem;
            }
            
            .calculation-grid {
                grid-template-columns: 1fr;
            }
            
            .calculation-value {
                font-size: 1.3rem;
            }

            .select2-container--bootstrap-5 .select2-selection {
                min-height: 2.25rem;
            }

            .patient-option {
                padding: 0.25rem 0;
            }

            .patient-name {
                font-size: 0.9rem;
            }

            .patient-details {
                font-size: 0.8rem;
            }
        }
    </style>
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <!-- Header -->
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>
                    <i class="fas fa-plus text-primary"></i>
                    ÿß€åÿ¨ÿßÿØ ŸÖÿ≠ÿßÿ≥ÿ®Ÿá ÿ®€åŸÖŸá ÿ¨ÿØ€åÿØ
                </h2>
                <a href="@Url.Action("Index")" class="btn btn-secondary">
                    <i class="fas fa-arrow-right"></i> ÿ®ÿßÿ≤⁄Øÿ¥ÿ™
                </a>
            </div>

            <div class="form-container">
                @using (Html.BeginForm("Create", "InsuranceCalculation", FormMethod.Post, new { @class = "needs-validation", novalidate = "novalidate", id = "createForm" }))
                {
                    @Html.AntiForgeryToken()

                    <!-- Patient Information -->
                    <div class="form-card">
                        <div class="form-card-header">
                            <h4 class="form-card-title">
                                <i class="fas fa-user"></i>
                                ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿ®€åŸÖÿßÿ±
                            </h4>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(m => m.PatientId, new { @class = "form-label" })
                            <select id="PatientId" name="PatientId" class="form-control select2-patient" required>
                                <option value="">ÿ¨ÿ≥ÿ™ÿ¨Ÿà Ÿà ÿßŸÜÿ™ÿÆÿßÿ® ÿ®€åŸÖÿßÿ±...</option>
                            </select>
                            @Html.ValidationMessageFor(m => m.PatientId, "", new { @class = "invalid-feedback" })
                            <div class="info-box">
                                <p class="info-text">
                                    <i class="fas fa-info-circle"></i>
                                    ŸÜÿßŸÖÿå ŸÜÿßŸÖ ÿÆÿßŸÜŸàÿßÿØ⁄Ø€åÿå ⁄©ÿØ ŸÖŸÑ€å €åÿß ÿ¥ŸÖÿßÿ±Ÿá ÿ™ŸÑŸÅŸÜ ÿ®€åŸÖÿßÿ± ÿ±ÿß ÿ™ÿß€åŸæ ⁄©ŸÜ€åÿØ ÿ™ÿß ÿ¨ÿ≥ÿ™ÿ¨Ÿà ÿ¥ŸàÿØ.
                                </p>
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(m => m.PatientInsuranceId, new { @class = "form-label" })
                            @Html.DropDownListFor(m => m.PatientInsuranceId, Model.PatientInsuranceSelectList, "ÿßŸÜÿ™ÿÆÿßÿ® ÿ®€åŸÖŸá ÿ®€åŸÖÿßÿ±", new { @class = "form-control", required = "required" })
                            @Html.ValidationMessageFor(m => m.PatientInsuranceId, "", new { @class = "invalid-feedback" })
                            <div class="info-box">
                                <p class="info-text">
                                    <i class="fas fa-info-circle"></i>
                                    ÿ®€åŸÖŸá ŸÖŸàÿ±ÿØ ŸÜÿ∏ÿ± ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ. ÿßÿ∑ŸÑÿßÿπÿßÿ™ ŸæŸàÿ¥ÿ¥ Ÿà ŸÅÿ±ÿßŸÜÿ¥€åÿ≤ ÿ®Ÿá ÿµŸàÿ±ÿ™ ÿÆŸàÿØ⁄©ÿßÿ± ŸÜŸÖÿß€åÿ¥ ÿØÿßÿØŸá ÿÆŸàÿßŸáÿØ ÿ¥ÿØ.
                                </p>
                            </div>
                        </div>
                    </div>

                    <!-- Service Information -->
                    <div class="form-card">
                        <div class="form-card-header">
                            <h4 class="form-card-title">
                                <i class="fas fa-stethoscope"></i>
                                ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿÆÿØŸÖÿ™
                            </h4>
                        </div>

                        <!-- üè• ÿ≥ŸÑÿ≥ŸÑŸá ŸÖÿ±ÿßÿ™ÿ® ÿ≠ÿ±ŸÅŸá‚Äåÿß€å: ÿØŸæÿßÿ±ÿ™ŸÖÿßŸÜ ‚Üí ÿ≥ÿ±ŸÅÿµŸÑ ‚Üí ÿÆÿØŸÖÿ™ -->
                        <div class="form-group">
                            <label class="form-label">ÿØŸæÿßÿ±ÿ™ŸÖÿßŸÜ</label>
                            <select id="DepartmentId" name="DepartmentId" class="form-control" required>
                                <option value="">ÿßŸÜÿ™ÿÆÿßÿ® ÿØŸæÿßÿ±ÿ™ŸÖÿßŸÜ</option>
                            </select>
                            <div class="info-box">
                                <p class="info-text">
                                    <i class="fas fa-info-circle"></i>
                                    ÿßÿ®ÿ™ÿØÿß ÿØŸæÿßÿ±ÿ™ŸÖÿßŸÜ ŸÖŸàÿ±ÿØ ŸÜÿ∏ÿ± ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ
                                </p>
                            </div>
                        </div>

                        <div class="form-group">
                            <label class="form-label">ÿ≥ÿ±ŸÅÿµŸÑ ÿØÿ≥ÿ™Ÿá‚Äåÿ®ŸÜÿØ€å</label>
                            <select id="ServiceCategoryId" name="ServiceCategoryId" class="form-control" required>
                                <option value="">ÿßÿ®ÿ™ÿØÿß ÿØŸæÿßÿ±ÿ™ŸÖÿßŸÜ ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ</option>
                            </select>
                            <div class="info-box">
                                <p class="info-text">
                                    <i class="fas fa-info-circle"></i>
                                    Ÿæÿ≥ ÿßÿ≤ ÿßŸÜÿ™ÿÆÿßÿ® ÿØŸæÿßÿ±ÿ™ŸÖÿßŸÜÿå ÿ≥ÿ±ŸÅÿµŸÑ‚ÄåŸáÿß€å ÿØÿ≥ÿ™Ÿá‚Äåÿ®ŸÜÿØ€å ŸÜŸÖÿß€åÿ¥ ÿØÿßÿØŸá ŸÖ€å‚Äåÿ¥ŸàÿØ
                                </p>
                            </div>
                        </div>

                        <div class="form-group">
                            <label class="form-label">ÿÆÿØŸÖÿ™</label>
                            <select id="ServiceId" name="ServiceId" class="form-control" required>
                                <option value="">ÿßÿ®ÿ™ÿØÿß ÿ≥ÿ±ŸÅÿµŸÑ ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ</option>
                            </select>
                            <div class="info-box">
                                <p class="info-text">
                                    <i class="fas fa-info-circle"></i>
                                    Ÿæÿ≥ ÿßÿ≤ ÿßŸÜÿ™ÿÆÿßÿ® ÿ≥ÿ±ŸÅÿµŸÑÿå ÿÆÿØŸÖÿßÿ™ ŸÖÿ±ÿ®Ÿàÿ∑Ÿá ŸÜŸÖÿß€åÿ¥ ÿØÿßÿØŸá ŸÖ€å‚Äåÿ¥ŸàÿØ
                                </p>
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(m => m.ServiceAmount, new { @class = "form-label" })
                            @Html.TextBoxFor(m => m.ServiceAmount, new { @class = "form-control", type = "number", min = "0", step = "1000", placeholder = "ŸÖÿ®ŸÑÿ∫ ÿÆÿØŸÖÿ™ ÿ®Ÿá ÿ±€åÿßŸÑ", required = "required" })
                            @Html.ValidationMessageFor(m => m.ServiceAmount, "", new { @class = "invalid-feedback" })
                            <div class="warning-box">
                                <p class="warning-text">
                                    <i class="fas fa-exclamation-triangle"></i>
                                    ŸÖÿ®ŸÑÿ∫ ⁄©ŸÑ ÿÆÿØŸÖÿ™ ÿ±ÿß ÿ®Ÿá ÿ±€åÿßŸÑ Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ. ŸÖÿ≠ÿßÿ≥ÿ®Ÿá ŸæŸàÿ¥ÿ¥ ÿ®€åŸÖŸá Ÿà Ÿæÿ±ÿØÿßÿÆÿ™ ÿ®€åŸÖÿßÿ± ÿ®ÿ± ÿßÿ≥ÿßÿ≥ ÿß€åŸÜ ŸÖÿ®ŸÑÿ∫ ÿßŸÜÿ¨ÿßŸÖ ŸÖ€å‚Äåÿ¥ŸàÿØ.
                                </p>
                            </div>
                        </div>
                    </div>

                    <!-- Calculation Details -->
                    <div class="form-card">
                        <div class="form-card-header">
                            <h4 class="form-card-title">
                                <i class="fas fa-calculator"></i>
                                ÿ¨ÿ≤ÿ¶€åÿßÿ™ ŸÖÿ≠ÿßÿ≥ÿ®Ÿá
                            </h4>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.CoveragePercent, new { @class = "form-label" })
                                    @Html.TextBoxFor(m => m.CoveragePercent, new { @class = "form-control", type = "number", min = "0", max = "100", step = "0.1", placeholder = "ÿØÿ±ÿµÿØ ŸæŸàÿ¥ÿ¥" })
                                    @Html.ValidationMessageFor(m => m.CoveragePercent, "", new { @class = "invalid-feedback" })
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.Deductible, new { @class = "form-label" })
                                    @Html.TextBoxFor(m => m.Deductible, new { @class = "form-control", type = "number", min = "0", step = "1000", placeholder = "ŸÅÿ±ÿßŸÜÿ¥€åÿ≤ ÿ®Ÿá ÿ±€åÿßŸÑ" })
                                    @Html.ValidationMessageFor(m => m.Deductible, "", new { @class = "invalid-feedback" })
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.InsuranceShare, new { @class = "form-label" })
                                    @Html.TextBoxFor(m => m.InsuranceShare, new { @class = "form-control", type = "number", min = "0", step = "1000", placeholder = "ÿ≥ŸáŸÖ ÿ®€åŸÖŸá ÿ®Ÿá ÿ±€åÿßŸÑ" })
                                    @Html.ValidationMessageFor(m => m.InsuranceShare, "", new { @class = "invalid-feedback" })
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.PatientShare, new { @class = "form-label" })
                                    @Html.TextBoxFor(m => m.PatientShare, new { @class = "form-control", type = "number", min = "0", step = "1000", placeholder = "ÿ≥ŸáŸÖ ÿ®€åŸÖÿßÿ± ÿ®Ÿá ÿ±€åÿßŸÑ" })
                                    @Html.ValidationMessageFor(m => m.PatientShare, "", new { @class = "invalid-feedback" })
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.Copay, new { @class = "form-label" })
                                    @Html.TextBoxFor(m => m.Copay, new { @class = "form-control", type = "number", min = "0", step = "1000", placeholder = "⁄©ŸàŸæŸá ÿ®Ÿá ÿ±€åÿßŸÑ (ÿßÿÆÿ™€åÿßÿ±€å)" })
                                    @Html.ValidationMessageFor(m => m.Copay, "", new { @class = "invalid-feedback" })
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.CoverageOverride, new { @class = "form-label" })
                                    @Html.TextBoxFor(m => m.CoverageOverride, new { @class = "form-control", type = "number", min = "0", max = "100", step = "0.1", placeholder = "ŸæŸàÿ¥ÿ¥ ÿÆÿßÿµ (ÿßÿÆÿ™€åÿßÿ±€å)" })
                                    @Html.ValidationMessageFor(m => m.CoverageOverride, "", new { @class = "invalid-feedback" })
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Additional Information -->
                    <div class="form-card">
                        <div class="form-card-header">
                            <h4 class="form-card-title">
                                <i class="fas fa-info-circle"></i>
                                ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿ™⁄©ŸÖ€åŸÑ€å
                            </h4>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.CalculationDate, new { @class = "form-label" })
                                    <div class="date-picker">
                                        @Html.TextBoxFor(m => m.CalculationDate, new { @class = "form-control", type = "date", required = "required", @Value = DateTime.Now.ToString("yyyy-MM-dd") })
                                        <i class="fas fa-calendar-alt date-icon"></i>
                                    </div>
                                    @Html.ValidationMessageFor(m => m.CalculationDate, "", new { @class = "invalid-feedback" })
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.CalculationType, new { @class = "form-label" })
                                    @Html.DropDownListFor(m => m.CalculationType, Model.CalculationTypeSelectList, new { @class = "form-control", required = "required" })
                                    @Html.ValidationMessageFor(m => m.CalculationType, "", new { @class = "invalid-feedback" })
                                </div>
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(m => m.Notes, new { @class = "form-label" })
                            @Html.TextAreaFor(m => m.Notes, new { @class = "form-control", rows = "4", placeholder = "€åÿßÿØÿØÿßÿ¥ÿ™‚ÄåŸáÿß (ÿßÿÆÿ™€åÿßÿ±€å)" })
                            @Html.ValidationMessageFor(m => m.Notes, "", new { @class = "invalid-feedback" })
                        </div>
                    </div>

                    <!-- Calculation Preview -->
                    <div id="calculationPreview" class="calculation-preview">
                        <h4 class="form-card-title text-center">
                            <i class="fas fa-chart-pie"></i>
                            Ÿæ€åÿ¥‚ÄåŸÜŸÖÿß€åÿ¥ ŸÖÿ≠ÿßÿ≥ÿ®Ÿá
                        </h4>
                        <div class="calculation-grid">
                            <div class="calculation-card">
                                <div class="calculation-value service-amount" id="previewServiceAmount">0</div>
                                <div class="calculation-label">ŸÖÿ®ŸÑÿ∫ ÿÆÿØŸÖÿ™</div>
                            </div>
                            <div class="calculation-card">
                                <div class="calculation-value coverage-percent" id="previewCoveragePercent">0%</div>
                                <div class="calculation-label">ÿØÿ±ÿµÿØ ŸæŸàÿ¥ÿ¥</div>
                            </div>
                            <div class="calculation-card">
                                <div class="calculation-value deductible" id="previewDeductible">0</div>
                                <div class="calculation-label">ŸÅÿ±ÿßŸÜÿ¥€åÿ≤</div>
                            </div>
                            <div class="calculation-card">
                                <div class="calculation-value insurance-share" id="previewInsuranceShare">0</div>
                                <div class="calculation-label">ÿ≥ŸáŸÖ ÿ®€åŸÖŸá</div>
                            </div>
                            <div class="calculation-card">
                                <div class="calculation-value patient-share" id="previewPatientShare">0</div>
                                <div class="calculation-label">ÿ≥ŸáŸÖ ÿ®€åŸÖÿßÿ±</div>
                            </div>
                        </div>
                    </div>

                    <!-- Form Actions -->
                    <div class="text-center">
                        <button type="button" class="btn btn-calculate me-3" onclick="previewCalculation()">
                            <i class="fas fa-eye"></i> Ÿæ€åÿ¥‚ÄåŸÜŸÖÿß€åÿ¥ ŸÖÿ≠ÿßÿ≥ÿ®Ÿá
                        </button>
                        <button type="submit" class="btn btn-primary me-3">
                            <i class="fas fa-save"></i> ÿ∞ÿÆ€åÿ±Ÿá ŸÖÿ≠ÿßÿ≥ÿ®Ÿá
                        </button>
                        <button type="button" class="btn btn-secondary" onclick="resetForm()">
                            <i class="fas fa-undo"></i> Ÿæÿß⁄© ⁄©ÿ±ÿØŸÜ ŸÅÿ±ŸÖ
                        </button>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- Select2 JS - Local File -->
    <script src="~/Content/plugins/select2/js/select2.min.js"></script>
    
    <script>
        // üè• Client-side Logging for Medical Environment
        function logClient(message, type = 'info', data = null) {
            const timestamp = new Date().toLocaleString('fa-IR');
            const logMessage = `[${timestamp}] üè• ${message}`;
            
            if (data) {
                console.log(logMessage, data);
            } else {
                console.log(logMessage);
            }
            
            // Send to server for medical audit trail (optional)
            if (type === 'error' || type === 'warning') {
                $.ajax({
                    url: '@Url.Action("LogClientError", "InsuranceCalculation")',
                    type: 'POST',
                    data: {
                        message: message,
                        type: type,
                        data: JSON.stringify(data),
                        url: window.location.href,
                        userAgent: navigator.userAgent
                    },
                    success: function(response) {
                        console.log('Client log sent to server successfully');
                    },
                    error: function(xhr, status, error) {
                        console.error('Failed to send client log to server:', error);
                    }
                });
            }
        }

        $(document).ready(function() {
            logClient('Insurance Calculation Create page loaded', 'info');
            // üè• Initialize Select2 for Patient Search (Server-Side Processing)
            logClient('Initializing Select2 for patient search', 'info');
            $('#PatientId').select2({
                theme: 'bootstrap4', // Changed to bootstrap4 to match local CSS
                placeholder: 'ÿ¨ÿ≥ÿ™ÿ¨Ÿà Ÿà ÿßŸÜÿ™ÿÆÿßÿ® ÿ®€åŸÖÿßÿ±...',
                allowClear: true,
                minimumInputLength: 2, // ÿ≠ÿØÿßŸÇŸÑ 2 ⁄©ÿßÿ±ÿß⁄©ÿ™ÿ± ÿ®ÿ±ÿß€å ÿ¨ÿ≥ÿ™ÿ¨Ÿà
                ajax: {
                    url: '@Url.Action("SearchPatientsForSelect2", "InsuranceCalculation")',
                    type: 'POST',
                    dataType: 'json',
                    delay: 300, // ÿ™ÿßÿÆ€åÿ± 300 ŸÖ€åŸÑ€å‚Äåÿ´ÿßŸÜ€åŸá ÿ®ÿ±ÿß€å ⁄©ÿßŸáÿ¥ ÿØÿ±ÿÆŸàÿßÿ≥ÿ™‚ÄåŸáÿß
                    data: function (params) {
                        logClient(`Patient search request: ${params.term}`, 'info', { term: params.term, page: params.page });
                        return {
                            q: params.term, // ÿπÿ®ÿßÿ±ÿ™ ÿ¨ÿ≥ÿ™ÿ¨Ÿà
                            page: params.page || 1,
                            pageSize: 20
                        };
                    },
                    processResults: function (data, params) {
                        params.page = params.page || 1;
                        logClient(`Patient search results: ${data.results.length} patients found`, 'info', { count: data.results.length });
                        
                        return {
                            results: data.results,
                            pagination: {
                                more: data.pagination.more
                            }
                        };
                    },
                    cache: true, // ⁄©ÿ¥ ⁄©ÿ±ÿØŸÜ ŸÜÿ™ÿß€åÿ¨
                    error: function(xhr, status, error) {
                        logClient('Error in patient search', 'error', { xhr: xhr, status: status, error: error });
                        console.error('ÿÆÿ∑ÿß ÿØÿ± ÿ¨ÿ≥ÿ™ÿ¨Ÿà€å ÿ®€åŸÖÿßÿ±ÿßŸÜ:', error);
                        showNotification('ÿÆÿ∑ÿß ÿØÿ± ÿ¨ÿ≥ÿ™ÿ¨Ÿà€å ÿ®€åŸÖÿßÿ±ÿßŸÜ', 'error');
                    }
                },
                language: {
                    inputTooShort: function () {
                        return 'ÿ≠ÿØÿßŸÇŸÑ 2 ⁄©ÿßÿ±ÿß⁄©ÿ™ÿ± Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ';
                    },
                    noResults: function () {
                        return 'ÿ®€åŸÖÿßÿ±€å €åÿßŸÅÿ™ ŸÜÿ¥ÿØ';
                    },
                    searching: function () {
                        return 'ÿØÿ± ÿ≠ÿßŸÑ ÿ¨ÿ≥ÿ™ÿ¨Ÿà...';
                    },
                    loadingMore: function () {
                        return 'ÿØÿ± ÿ≠ÿßŸÑ ÿ®ÿßÿ±⁄Øÿ∞ÿßÿ±€å...';
                    }
                },
                templateResult: function(patient) {
                    if (patient.loading) {
                        return patient.text;
                    }
                    
                    var $result = $(
                        '<div class="patient-option">' +
                            '<div class="patient-name">' + patient.text + '</div>' +
                            '<div class="patient-details">' +
                                '<small class="text-muted">⁄©ÿØ ŸÖŸÑ€å: ' + patient.nationalCode + '</small>' +
                                (patient.phoneNumber ? '<br><small class="text-muted">ÿ™ŸÑŸÅŸÜ: ' + patient.phoneNumber + '</small>' : '') +
                            '</div>' +
                        '</div>'
                    );
                    
                    return $result;
                },
                templateSelection: function(patient) {
                    return patient.text || patient.firstName + ' ' + patient.lastName;
                }
            });

            // üè• Load patient insurances when patient is selected
            $('#PatientId').on('select2:select', function (e) {
                var patientId = e.params.data.id;
                if (patientId) {
                    loadPatientInsurances(patientId);
                }
            });

            // üè• Load insurance details when patient insurance is selected
            $('#PatientInsuranceId').on('change', function() {
                var patientInsuranceId = $(this).val();
                if (patientInsuranceId) {
                    loadPatientInsuranceDetails(patientInsuranceId);
                } else {
                    // Ÿæÿß⁄© ⁄©ÿ±ÿØŸÜ ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿ®€åŸÖŸá
                    $('#CoveragePercent').val('');
                    $('#Deductible').val('');
                    $('#calculationPreview').hide();
                }
            });

            // üè• Clear patient insurances when patient is cleared
            $('#PatientId').on('select2:clear', function (e) {
                $('#PatientInsuranceId').empty().append('<option value="">ÿßÿ®ÿ™ÿØÿß ÿ®€åŸÖÿßÿ± ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ</option>');
            });

            // üè• Load services when service category is selected
            $('#ServiceCategoryId').on('change', function() {
                var categoryId = $(this).val();
                if (categoryId) {
                    loadServicesByCategory(categoryId);
                } else {
                    $('#ServiceId').empty().append('<option value="">ÿßÿ®ÿ™ÿØÿß ÿØÿ≥ÿ™Ÿá‚Äåÿ®ŸÜÿØ€å ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ</option>');
                }
            });

            // Form validation
            (function() {
                'use strict';
                window.addEventListener('load', function() {
                    var forms = document.getElementsByClassName('needs-validation');
                    var validation = Array.prototype.filter.call(forms, function(form) {
                        form.addEventListener('submit', function(event) {
                            if (form.checkValidity() === false) {
                                event.preventDefault();
                                event.stopPropagation();
                            }
                            form.classList.add('was-validated');
                        }, false);
                    });
                }, false);
            })();

            // Set default calculation date to today
            var today = new Date().toISOString().split('T')[0];
            $('#CalculationDate').val(today);

            // Real-time validation
            $('.form-control').on('input', function() {
                validateField($(this));
            });

            // Auto-calculate when service amount changes
            $('#ServiceAmount, #CoveragePercent, #Deductible').on('input', function() {
                autoCalculate();
            });
        });

        // üè• Load patient insurances via AJAX
        function loadPatientInsurances(patientId) {
            logClient(`Loading patient insurances for patient ID: ${patientId}`, 'info');
            $.ajax({
                url: '@Url.Action("GetPatientInsurancesForCreate", "InsuranceCalculation")',
                type: 'POST',
                dataType: 'json',
                data: { patientId: patientId },
                success: function(response) {
                    logClient('Patient insurances response received', 'info', { response: response });
                    
                    // Parse response if it's a string
                    if (typeof response === 'string') {
                        try {
                            response = JSON.parse(response);
                            logClient('Patient insurances response parsed successfully', 'info', { parsedResponse: response });
                        } catch (e) {
                            logClient('Error parsing patient insurances response', 'error', { error: e.message, response: response });
                            showNotification('ÿÆÿ∑ÿß ÿØÿ± Ÿæÿ±ÿØÿßÿ≤ÿ¥ Ÿæÿßÿ≥ÿÆ ÿ≥ÿ±Ÿàÿ±', 'error');
                            return;
                        }
                    }
                    
                    if (response.success) {
                        var $select = $('#PatientInsuranceId');
                        $select.empty();
                        $select.append('<option value="">ÿßŸÜÿ™ÿÆÿßÿ® ÿ®€åŸÖŸá ÿ®€åŸÖÿßÿ±</option>');
                        
                        $.each(response.data, function(index, item) {
                            logClient(`Adding patient insurance option: ${item.Value} - ${item.Text}`, 'info');
                            $select.append('<option value="' + item.Value + '">' + item.Text + '</option>');
                        });
                        
                        logClient(`Patient insurances loaded successfully: ${response.data.length} insurances`, 'info', { count: response.data.length });
                        showNotification('ÿ®€åŸÖŸá‚ÄåŸáÿß€å ÿ®€åŸÖÿßÿ± ÿ®ÿßÿ±⁄Øÿ∞ÿßÿ±€å ÿ¥ÿØ', 'success');
                    } else {
                        logClient('Failed to load patient insurances', 'error', { error: response.error || 'Unknown error' });
                        showNotification('ÿÆÿ∑ÿß ÿØÿ± ÿ®ÿßÿ±⁄Øÿ∞ÿßÿ±€å ÿ®€åŸÖŸá‚ÄåŸáÿß€å ÿ®€åŸÖÿßÿ±: ' + (response.error || 'ÿÆÿ∑ÿß€å ŸÜÿßŸÖÿ¥ÿÆÿµ'), 'error');
                    }
                },
                error: function(xhr, status, error) {
                    logClient('Error loading patient insurances', 'error', { xhr: xhr, status: status, error: error });
                    console.error('ÿÆÿ∑ÿß ÿØÿ± ÿ®ÿßÿ±⁄Øÿ∞ÿßÿ±€å ÿ®€åŸÖŸá‚ÄåŸáÿß€å ÿ®€åŸÖÿßÿ±:', error);
                    showNotification('ÿÆÿ∑ÿß ÿØÿ± ÿ®ÿßÿ±⁄Øÿ∞ÿßÿ±€å ÿ®€åŸÖŸá‚ÄåŸáÿß€å ÿ®€åŸÖÿßÿ±', 'error');
                }
            });
        }

            // üè• Load departments for hierarchy
            function loadDepartments() {
                logClient('Loading departments for hierarchy', 'info');
                $.ajax({
                    url: '@Url.Action("GetDepartmentsForHierarchy", "InsuranceCalculation")',
                    type: 'POST',
                    dataType: 'json',
                    success: function(response) {
                        logClient('Departments response received', 'info', { response: response });
                        
                        // Parse response if it's a string
                        if (typeof response === 'string') {
                            try {
                                response = JSON.parse(response);
                                logClient('Response parsed successfully', 'info', { parsedResponse: response });
                            } catch (e) {
                                logClient('Error parsing response', 'error', { error: e.message, response: response });
                                showNotification('ÿÆÿ∑ÿß ÿØÿ± Ÿæÿ±ÿØÿßÿ≤ÿ¥ Ÿæÿßÿ≥ÿÆ ÿ≥ÿ±Ÿàÿ±', 'error');
                                return;
                            }
                        }
                        
                        if (response.success) {
                            var $select = $('#DepartmentId');
                            $select.empty();
                            $select.append('<option value="">ÿßŸÜÿ™ÿÆÿßÿ® ÿØŸæÿßÿ±ÿ™ŸÖÿßŸÜ</option>');
                            
                            $.each(response.data, function(index, item) {
                                logClient(`Adding department option: ${item.Value} - ${item.Text}`, 'info');
                                $select.append('<option value="' + item.Value + '">' + item.Text + '</option>');
                            });
                            
                            logClient(`Departments loaded successfully: ${response.data.length} departments`, 'info', { count: response.data.length });
                        } else {
                            logClient('Failed to load departments', 'error', { error: response.error || 'Unknown error' });
                            showNotification('ÿÆÿ∑ÿß ÿØÿ± ÿ®ÿßÿ±⁄Øÿ∞ÿßÿ±€å ÿØŸæÿßÿ±ÿ™ŸÖÿßŸÜ‚ÄåŸáÿß: ' + (response.error || 'ÿÆÿ∑ÿß€å ŸÜÿßŸÖÿ¥ÿÆÿµ'), 'error');
                        }
                    },
                    error: function(xhr, status, error) {
                        logClient('Error loading departments', 'error', { xhr: xhr, status: status, error: error });
                        console.error('ÿÆÿ∑ÿß ÿØÿ± ÿ®ÿßÿ±⁄Øÿ∞ÿßÿ±€å ÿØŸæÿßÿ±ÿ™ŸÖÿßŸÜ‚ÄåŸáÿß:', error);
                        showNotification('ÿÆÿ∑ÿß ÿØÿ± ÿ®ÿßÿ±⁄Øÿ∞ÿßÿ±€å ÿØŸæÿßÿ±ÿ™ŸÖÿßŸÜ‚ÄåŸáÿß', 'error');
                    }
                });
            }

            // üè• Load service categories by department
            function loadServiceCategoriesByDepartment(departmentId) {
                logClient(`Loading service categories for department ID: ${departmentId}`, 'info');
                $.ajax({
                    url: '@Url.Action("GetServiceCategoriesByDepartment", "InsuranceCalculation")',
                    type: 'POST',
                    dataType: 'json',
                    data: { departmentId: departmentId },
                    success: function(response) {
                        // Parse response if it's a string
                        if (typeof response === 'string') {
                            try {
                                response = JSON.parse(response);
                            } catch (e) {
                                logClient('Error parsing service categories response', 'error', { error: e.message, response: response });
                                showNotification('ÿÆÿ∑ÿß ÿØÿ± Ÿæÿ±ÿØÿßÿ≤ÿ¥ Ÿæÿßÿ≥ÿÆ ÿ≥ÿ±Ÿàÿ±', 'error');
                                return;
                            }
                        }
                        
                        if (response.success) {
                            var $select = $('#ServiceCategoryId');
                            $select.empty();
                            $select.append('<option value="">ÿßŸÜÿ™ÿÆÿßÿ® ÿ≥ÿ±ŸÅÿµŸÑ ÿØÿ≥ÿ™Ÿá‚Äåÿ®ŸÜÿØ€å</option>');
                            
                            $.each(response.data, function(index, item) {
                                $select.append('<option value="' + item.Value + '">' + item.Text + '</option>');
                            });
                            
                            // Ÿæÿß⁄© ⁄©ÿ±ÿØŸÜ ÿÆÿØŸÖÿßÿ™ ŸÇÿ®ŸÑ€å
                            $('#ServiceId').empty().append('<option value="">ÿßÿ®ÿ™ÿØÿß ÿ≥ÿ±ŸÅÿµŸÑ ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ</option>');
                            
                            logClient(`Service categories loaded successfully: ${response.data.length} categories`, 'info', { count: response.data.length });
                            showNotification('ÿ≥ÿ±ŸÅÿµŸÑ‚ÄåŸáÿß€å ÿØÿ≥ÿ™Ÿá‚Äåÿ®ŸÜÿØ€å ÿ®ÿßÿ±⁄Øÿ∞ÿßÿ±€å ÿ¥ÿØ', 'success');
                        } else {
                            logClient('Failed to load service categories', 'error', { error: response.error });
                            showNotification('ÿÆÿ∑ÿß ÿØÿ± ÿ®ÿßÿ±⁄Øÿ∞ÿßÿ±€å ÿ≥ÿ±ŸÅÿµŸÑ‚ÄåŸáÿß: ' + response.error, 'error');
                        }
                    },
                    error: function(xhr, status, error) {
                        logClient('Error loading service categories', 'error', { xhr: xhr, status: status, error: error });
                        console.error('ÿÆÿ∑ÿß ÿØÿ± ÿ®ÿßÿ±⁄Øÿ∞ÿßÿ±€å ÿ≥ÿ±ŸÅÿµŸÑ‚ÄåŸáÿß:', error);
                        showNotification('ÿÆÿ∑ÿß ÿØÿ± ÿ®ÿßÿ±⁄Øÿ∞ÿßÿ±€å ÿ≥ÿ±ŸÅÿµŸÑ‚ÄåŸáÿß', 'error');
                    }
                });
            }

            // üè• Load services by category via AJAX
            function loadServicesByCategory(categoryId) {
                logClient(`Loading services for category ID: ${categoryId}`, 'info');
                $.ajax({
                    url: '@Url.Action("GetServicesByCategory", "InsuranceCalculation")',
                    type: 'POST',
                    dataType: 'json',
                    data: { categoryId: categoryId },
                    success: function(response) {
                        // Parse response if it's a string
                        if (typeof response === 'string') {
                            try {
                                response = JSON.parse(response);
                            } catch (e) {
                                logClient('Error parsing services response', 'error', { error: e.message, response: response });
                                showNotification('ÿÆÿ∑ÿß ÿØÿ± Ÿæÿ±ÿØÿßÿ≤ÿ¥ Ÿæÿßÿ≥ÿÆ ÿ≥ÿ±Ÿàÿ±', 'error');
                                return;
                            }
                        }
                        
                        if (response.success) {
                            var $select = $('#ServiceId');
                            $select.empty();
                            $select.append('<option value="">ÿßŸÜÿ™ÿÆÿßÿ® ÿÆÿØŸÖÿ™</option>');
                            
                            $.each(response.data, function(index, item) {
                                $select.append('<option value="' + item.Value + '">' + item.Text + '</option>');
                            });
                            
                            logClient(`Services loaded successfully: ${response.data.length} services`, 'info', { count: response.data.length });
                            showNotification('ÿÆÿØŸÖÿßÿ™ ÿØÿ≥ÿ™Ÿá‚Äåÿ®ŸÜÿØ€å ÿ®ÿßÿ±⁄Øÿ∞ÿßÿ±€å ÿ¥ÿØ', 'success');
                        } else {
                            logClient('Failed to load services', 'error', { error: response.error });
                            showNotification('ÿÆÿ∑ÿß ÿØÿ± ÿ®ÿßÿ±⁄Øÿ∞ÿßÿ±€å ÿÆÿØŸÖÿßÿ™: ' + response.error, 'error');
                        }
                    },
                    error: function(xhr, status, error) {
                        logClient('Error loading services', 'error', { xhr: xhr, status: status, error: error });
                        console.error('ÿÆÿ∑ÿß ÿØÿ± ÿ®ÿßÿ±⁄Øÿ∞ÿßÿ±€å ÿÆÿØŸÖÿßÿ™:', error);
                        showNotification('ÿÆÿ∑ÿß ÿØÿ± ÿ®ÿßÿ±⁄Øÿ∞ÿßÿ±€å ÿÆÿØŸÖÿßÿ™', 'error');
                    }
                });
            }

            // üè• Load patient insurance details when insurance is selected
            function loadPatientInsuranceDetails(patientInsuranceId) {
                logClient(`Loading patient insurance details for insurance ID: ${patientInsuranceId}`, 'info');
                $.ajax({
                    url: '@Url.Action("GetPatientInsuranceDetails", "InsuranceCalculation")',
                    type: 'POST',
                    dataType: 'json',
                    data: { patientInsuranceId: patientInsuranceId },
                    success: function(response) {
                        // Parse response if it's a string
                        if (typeof response === 'string') {
                            try {
                                response = JSON.parse(response);
                            } catch (e) {
                                logClient('Error parsing insurance details response', 'error', { error: e.message, response: response });
                                showNotification('ÿÆÿ∑ÿß ÿØÿ± Ÿæÿ±ÿØÿßÿ≤ÿ¥ Ÿæÿßÿ≥ÿÆ ÿ≥ÿ±Ÿàÿ±', 'error');
                                return;
                            }
                        }
                        
                        if (response.success && response.data) {
                            // ÿ™ŸÜÿ∏€åŸÖ ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿ®€åŸÖŸá ÿØÿ± ŸÅÿ±ŸÖ
                            $('#CoveragePercent').val(response.data.coveragePercent);
                            $('#Deductible').val(response.data.deductible);
                            
                            logClient(`Insurance details loaded - Coverage: ${response.data.coveragePercent}%, Deductible: ${response.data.deductible}`, 'info');
                            
                            // ÿß⁄Øÿ± ŸÖÿ®ŸÑÿ∫ ÿÆÿØŸÖÿ™ ŸÖŸàÿ¨ŸàÿØ ÿßÿ≥ÿ™ÿå ŸÖÿ≠ÿßÿ≥ÿ®Ÿá ÿ±ÿß ÿßŸÜÿ¨ÿßŸÖ ÿ®ÿØŸá
                            var serviceAmount = parseFloat($('#ServiceAmount').val()) || 0;
                            if (serviceAmount > 0) {
                                previewCalculation();
                            }
                            
                            showNotification('ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿ®€åŸÖŸá ÿ®ÿßÿ±⁄Øÿ∞ÿßÿ±€å ÿ¥ÿØ', 'success');
                        } else {
                            logClient('No insurance details found', 'warning', { patientInsuranceId: patientInsuranceId });
                            showNotification('ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿ®€åŸÖŸá €åÿßŸÅÿ™ ŸÜÿ¥ÿØ', 'warning');
                        }
                    },
                    error: function(xhr, status, error) {
                        logClient('Error loading insurance details', 'error', { xhr: xhr, status: status, error: error });
                        console.error('ÿÆÿ∑ÿß ÿØÿ± ÿ®ÿßÿ±⁄Øÿ∞ÿßÿ±€å ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿ®€åŸÖŸá:', error);
                        showNotification('ÿÆÿ∑ÿß ÿØÿ± ÿ®ÿßÿ±⁄Øÿ∞ÿßÿ±€å ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿ®€åŸÖŸá', 'error');
                    }
                });
            }

            // üè• Load service details (amount, etc.) when service is selected
            function loadServiceDetails(serviceId) {
                logClient(`Loading service details for service ID: ${serviceId}`, 'info');
                $.ajax({
                    url: '@Url.Action("GetServiceDetails", "InsuranceCalculation")',
                    type: 'POST',
                    dataType: 'json',
                    data: { serviceId: serviceId },
                    success: function(response) {
                        // Parse response if it's a string
                        if (typeof response === 'string') {
                            try {
                                response = JSON.parse(response);
                            } catch (e) {
                                logClient('Error parsing service details response', 'error', { error: e.message, response: response });
                                showNotification('ÿÆÿ∑ÿß ÿØÿ± Ÿæÿ±ÿØÿßÿ≤ÿ¥ Ÿæÿßÿ≥ÿÆ ÿ≥ÿ±Ÿàÿ±', 'error');
                                return;
                            }
                        }
                        
                        if (response.success && response.data) {
                            // ÿ™ŸÜÿ∏€åŸÖ ŸÖÿ®ŸÑÿ∫ ÿÆÿØŸÖÿ™
                            if (response.data.amount) {
                                $('#ServiceAmount').val(response.data.amount);
                                logClient(`Service amount set to: ${response.data.amount}`, 'info');
                                
                                // ŸÖÿ≠ÿßÿ≥ÿ®Ÿá ÿÆŸàÿØ⁄©ÿßÿ±
                                previewCalculation();
                            }
                            
                            showNotification('ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿÆÿØŸÖÿ™ ÿ®ÿßÿ±⁄Øÿ∞ÿßÿ±€å ÿ¥ÿØ', 'success');
                        } else {
                            logClient('No service details found', 'warning', { serviceId: serviceId });
                            showNotification('ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿÆÿØŸÖÿ™ €åÿßŸÅÿ™ ŸÜÿ¥ÿØ', 'warning');
                        }
                    },
                    error: function(xhr, status, error) {
                        logClient('Error loading service details', 'error', { xhr: xhr, status: status, error: error });
                        console.error('ÿÆÿ∑ÿß ÿØÿ± ÿ®ÿßÿ±⁄Øÿ∞ÿßÿ±€å ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿÆÿØŸÖÿ™:', error);
                        showNotification('ÿÆÿ∑ÿß ÿØÿ± ÿ®ÿßÿ±⁄Øÿ∞ÿßÿ±€å ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿÆÿØŸÖÿ™', 'error');
                    }
                });
            }

        // üè• Show notification
        function showNotification(message, type) {
            // Simple notification - can be enhanced with toast library
            var alertClass = type === 'error' ? 'alert-danger' : 'alert-success';
            var $notification = $('<div class="alert ' + alertClass + ' alert-dismissible fade show" role="alert">' +
                message +
                '<button type="button" class="btn-close" data-bs-dismiss="alert"></button>' +
                '</div>');
            
            $('.form-container').prepend($notification);
            
            // Auto-hide after 5 seconds
            setTimeout(function() {
                $notification.alert('close');
            }, 5000);
        }

        function validateField(field) {
            var value = field.val();
            var isValid = true;

            if (field.attr('required') && (!value || value.trim() === '')) {
                isValid = false;
            }

            if (field.attr('type') === 'number') {
                var numValue = parseFloat(value);
                if (value && (isNaN(numValue) || numValue < 0)) {
                    isValid = false;
                }
            }

            if (isValid) {
                field.removeClass('is-invalid').addClass('is-valid');
            } else {
                field.removeClass('is-valid').addClass('is-invalid');
            }
        }

        function autoCalculate() {
            var serviceAmount = parseFloat($('#ServiceAmount').val()) || 0;
            var coveragePercent = parseFloat($('#CoveragePercent').val()) || 0;
            var deductible = parseFloat($('#Deductible').val()) || 0;

            if (serviceAmount > 0 && coveragePercent > 0) {
                var coverableAmount = Math.max(0, serviceAmount - deductible);
                var insuranceShare = (coverableAmount * coveragePercent) / 100;
                var patientShare = serviceAmount - insuranceShare;

                $('#InsuranceShare').val(Math.round(insuranceShare));
                $('#PatientShare').val(Math.round(patientShare));
            }
        }

        function previewCalculation() {
            logClient('üè• Starting calculation preview', 'info');
            
            var serviceAmount = parseFloat($('#ServiceAmount').val()) || 0;
            var coveragePercent = parseFloat($('#CoveragePercent').val()) || 0;
            var deductible = parseFloat($('#Deductible').val()) || 0;
            var copay = parseFloat($('#Copay').val()) || 0;
            var coverageOverride = parseFloat($('#CoverageOverride').val()) || 0;

            logClient('Calculation inputs', 'info', { 
                serviceAmount: serviceAmount, 
                coveragePercent: coveragePercent, 
                deductible: deductible, 
                copay: copay, 
                coverageOverride: coverageOverride 
            });

            if (serviceAmount > 0) {
                // ŸÖÿ≠ÿßÿ≥ÿ®Ÿá ŸæŸàÿ¥ÿ¥ ÿ®€åŸÖŸá
                var effectiveCoveragePercent = coverageOverride > 0 ? coverageOverride : coveragePercent;
                
                // ŸÖÿ≠ÿßÿ≥ÿ®Ÿá ÿ≥ŸáŸÖ ÿ®€åŸÖŸá
                var insuranceShare = Math.round((serviceAmount * effectiveCoveragePercent / 100));
                
                // ŸÖÿ≠ÿßÿ≥ÿ®Ÿá ÿ≥ŸáŸÖ ÿ®€åŸÖÿßÿ± (ÿ®ÿπÿØ ÿßÿ≤ ⁄©ÿ≥ÿ± ŸÅÿ±ÿßŸÜÿ¥€åÿ≤ Ÿà ⁄©ŸàŸæŸá)
                var patientShare = serviceAmount - insuranceShare;
                
                // ÿßÿπŸÖÿßŸÑ ŸÅÿ±ÿßŸÜÿ¥€åÿ≤
                if (deductible > 0) {
                    patientShare = Math.max(patientShare, deductible);
                }
                
                // ÿßÿπŸÖÿßŸÑ ⁄©ŸàŸæŸá
                if (copay > 0) {
                    patientShare = Math.max(patientShare, copay);
                }
                
                // ÿßÿ∑ŸÖ€åŸÜÿßŸÜ ÿßÿ≤ ÿß€åŸÜ⁄©Ÿá ŸÖÿ¨ŸÖŸàÿπ ÿ≥ŸáŸÖ‚ÄåŸáÿß ÿ®ÿ±ÿßÿ®ÿ± ŸÖÿ®ŸÑÿ∫ ⁄©ŸÑ ÿ®ÿßÿ¥ÿØ
                insuranceShare = serviceAmount - patientShare;

                logClient('Calculation results', 'info', { 
                    insuranceShare: insuranceShare, 
                    patientShare: patientShare, 
                    effectiveCoveragePercent: effectiveCoveragePercent 
                });

                // ŸÜŸÖÿß€åÿ¥ ŸÜÿ™ÿß€åÿ¨
                $('#previewServiceAmount').text(serviceAmount.toLocaleString('fa-IR') + ' ÿ±€åÿßŸÑ');
                $('#previewCoveragePercent').text(effectiveCoveragePercent.toFixed(1) + '%');
                $('#previewDeductible').text(deductible.toLocaleString('fa-IR') + ' ÿ±€åÿßŸÑ');
                $('#previewInsuranceShare').text(insuranceShare.toLocaleString('fa-IR') + ' ÿ±€åÿßŸÑ');
                $('#previewPatientShare').text(patientShare.toLocaleString('fa-IR') + ' ÿ±€åÿßŸÑ');

                // ÿ®Ÿá‚Äåÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å ŸÅ€åŸÑÿØŸáÿß€å ŸÅÿ±ŸÖ
                $('#InsuranceShare').val(insuranceShare);
                $('#PatientShare').val(patientShare);

                $('#calculationPreview').show();
                
                logClient('‚úÖ Calculation preview completed successfully', 'info');
                showNotification('ŸÖÿ≠ÿßÿ≥ÿ®Ÿá ÿ®ÿß ŸÖŸàŸÅŸÇ€åÿ™ ÿßŸÜÿ¨ÿßŸÖ ÿ¥ÿØ', 'success');
            } else {
                logClient('‚ùå Service amount is zero or invalid', 'warning');
                showNotification('ŸÑÿ∑ŸÅÿßŸã ÿßÿ®ÿ™ÿØÿß ŸÖÿ®ŸÑÿ∫ ÿÆÿØŸÖÿ™ ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ', 'warning');
            }
        }

        function resetForm() {
            if (confirm('ÿ¢€åÿß ŸÖÿ∑ŸÖÿ¶ŸÜ Ÿáÿ≥ÿ™€åÿØ ⁄©Ÿá ŸÖ€å‚ÄåÿÆŸàÿßŸá€åÿØ ŸÅÿ±ŸÖ ÿ±ÿß Ÿæÿß⁄© ⁄©ŸÜ€åÿØÿü')) {
                $('#createForm')[0].reset();
                $('#calculationPreview').hide();
                $('.form-control').removeClass('is-valid is-invalid');
                $('.form-control').removeClass('was-validated');
            }
        }

        // üè• Event handlers for dynamic loading
        $('#PatientId').on('change', function() {
            var patientId = $(this).val();
            if (patientId) {
                loadPatientInsurances(patientId);
            } else {
                $('#PatientInsuranceId').empty().append('<option value="">ÿßŸÜÿ™ÿÆÿßÿ® ÿ®€åŸÖŸá ÿ®€åŸÖÿßÿ±</option>');
            }
        });

        // üè• Auto-calculation when service amount or coverage changes
        $('#ServiceAmount, #CoveragePercent, #Deductible, #Copay, #CoverageOverride').on('input change', function() {
            logClient('üè• Auto-calculation triggered by field change', 'info', { field: this.id, value: $(this).val() });
            var serviceAmount = parseFloat($('#ServiceAmount').val()) || 0;
            if (serviceAmount > 0) {
                previewCalculation();
            }
        });

        // üè• ÿ≥ŸÑÿ≥ŸÑŸá ŸÖÿ±ÿßÿ™ÿ®: ÿØŸæÿßÿ±ÿ™ŸÖÿßŸÜ ‚Üí ÿ≥ÿ±ŸÅÿµŸÑ ‚Üí ÿÆÿØŸÖÿ™
        $('#DepartmentId').on('change', function() {
            var departmentId = $(this).val();
            if (departmentId) {
                loadServiceCategoriesByDepartment(departmentId);
            } else {
                $('#ServiceCategoryId').empty().append('<option value="">ÿßÿ®ÿ™ÿØÿß ÿØŸæÿßÿ±ÿ™ŸÖÿßŸÜ ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ</option>');
                $('#ServiceId').empty().append('<option value="">ÿßÿ®ÿ™ÿØÿß ÿ≥ÿ±ŸÅÿµŸÑ ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ</option>');
            }
        });

        // üè• ÿ®ÿßÿ±⁄Øÿ∞ÿßÿ±€å ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿÆÿØŸÖÿ™ ŸáŸÜ⁄ØÿßŸÖ ÿßŸÜÿ™ÿÆÿßÿ®
        $('#ServiceId').on('change', function() {
            var serviceId = $(this).val();
            if (serviceId) {
                loadServiceDetails(serviceId);
            } else {
                // Ÿæÿß⁄© ⁄©ÿ±ÿØŸÜ ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿÆÿØŸÖÿ™
                $('#ServiceAmount').val('');
                $('#calculationPreview').hide();
            }
        });

        $('#ServiceCategoryId').on('change', function() {
            var categoryId = $(this).val();
            if (categoryId) {
                loadServicesByCategory(categoryId);
            } else {
                $('#ServiceId').empty().append('<option value="">ÿßÿ®ÿ™ÿØÿß ÿ≥ÿ±ŸÅÿµŸÑ ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ</option>');
            }
        });

        // üè• Load departments on page load
        loadDepartments();
    </script>
}
