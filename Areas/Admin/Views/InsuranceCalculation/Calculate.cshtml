@model ClinicApp.ViewModels.Insurance.InsuranceCalculation.InsuranceCalculationViewModel
@{
    ViewBag.Title = "محاسبه بیمه";
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
}

<div class="container-fluid">
    <!-- 🛡️ نمایش پیام‌های خطا و موفقیت -->
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="fas fa-exclamation-triangle"></i>
            <strong>خطا:</strong> @TempData["ErrorMessage"]
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
    }

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="fas fa-check-circle"></i>
            <strong>موفقیت:</strong> @TempData["SuccessMessage"]
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
    }

    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">
                        <i class="fas fa-calculator"></i>
                        محاسبه بیمه
                    </h3>
                    <div class="card-tools">
                        <span class="badge badge-info">
                            <i class="fas fa-shield-alt"></i>
                            سیستم ضد گلوله
                        </span>
                    </div>
                </div>
                <div class="card-body">
                    @using (Html.BeginForm("CalculatePatientShare", "InsuranceCalculation", FormMethod.Post, new { @class = "form-horizontal", role = "form", id = "calculationForm" }))
                    {
                        @Html.AntiForgeryToken()
                        
                        <!-- 🛡️ نمایش خطاهای اعتبارسنجی -->
                        @Html.ValidationSummary(true, "", new { @class = "alert alert-danger" })
                        
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.PatientId, new { @class = "control-label" })
                                    @Html.DropDownListFor(m => m.PatientId, Model.PatientSelectList, "انتخاب بیمار", new { @class = "form-control", required = "required" })
                                    @Html.ValidationMessageFor(m => m.PatientId, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.ServiceId, new { @class = "control-label" })
                                    @Html.DropDownListFor(m => m.ServiceId, Model.ServiceSelectList, "انتخاب خدمت", new { @class = "form-control", required = "required" })
                                    @Html.ValidationMessageFor(m => m.ServiceId, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.PatientInsuranceId, new { @class = "control-label" })
                                    @Html.DropDownListFor(m => m.PatientInsuranceId, Model.PatientInsuranceSelectList, "انتخاب بیمه بیمار", new { @class = "form-control", required = "required" })
                                    @Html.ValidationMessageFor(m => m.PatientInsuranceId, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.CalculationDate, new { @class = "control-label" })
                                    @Html.TextBoxFor(m => m.CalculationDate, "{0:yyyy/MM/dd}", new { @class = "form-control persian-datepicker", required = "required" })
                                    @Html.ValidationMessageFor(m => m.CalculationDate, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.ServiceAmount, new { @class = "control-label" })
                                    @Html.TextBoxFor(m => m.ServiceAmount, new { @class = "form-control", type = "number", step = "0.01", required = "required" })
                                    @Html.ValidationMessageFor(m => m.ServiceAmount, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.CalculationType, new { @class = "control-label" })
                                    @Html.TextBoxFor(m => m.CalculationType, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(m => m.CalculationType, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-12">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.Notes, new { @class = "control-label" })
                                    @Html.TextAreaFor(m => m.Notes, new { @class = "form-control", rows = 3 })
                                    @Html.ValidationMessageFor(m => m.Notes, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-10">
                                <button type="submit" class="btn btn-primary">
                                    <i class="fas fa-calculator"></i>
                                    محاسبه سهم بیمار
                                </button>
                                <a href="@Url.Action("Index")" class="btn btn-secondary">
                                    <i class="fas fa-list"></i>
                                    بازگشت به لیست
                                </a>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // 🛡️ Initialize Persian DatePicker with error handling
            try {
                $('.persian-datepicker').persianDatepicker({
                    format: 'YYYY/MM/DD',
                    autoClose: true,
                    initialValue: false,
                    calendar: {
                        persian: {
                            locale: 'fa',
                            showHint: true,
                            leapYearMode: 'algorithmic'
                        }
                    },
                    onSelect: function(persianDate) {
                        // 🛡️ Validate selected date
                        validateCalculationDate(persianDate);
                    }
                });
            } catch (error) {
                console.error('خطا در راه‌اندازی تقویم فارسی:', error);
                showAlert('خطا در راه‌اندازی تقویم فارسی', 'error');
            }

            // 🛡️ Load patient insurances when patient changes with error handling
            $('#PatientId').change(function() {
                var patientId = $(this).val();
                if (patientId && patientId > 0) {
                    loadPatientInsurances(patientId);
                } else {
                    $('#PatientInsuranceId').empty().append('<option value="">انتخاب بیمه بیمار</option>');
                }
            });

            // 🛡️ Form validation before submit
            $('#calculationForm').submit(function(e) {
                if (!validateForm()) {
                    e.preventDefault();
                    return false;
                }
                
                // 🛡️ Show loading state
                showLoadingState();
            });

            // 🛡️ Real-time validation
            $('#ServiceAmount').on('input', function() {
                validateServiceAmount($(this).val());
            });

            function loadPatientInsurances(patientId) {
                // 🛡️ Validate patient ID
                if (!patientId || patientId <= 0) {
                    console.error('شناسه بیمار نامعتبر');
                    return;
                }

                // 🛡️ Show loading indicator
                var select = $('#PatientInsuranceId');
                select.prop('disabled', true);
                select.html('<option value="">در حال بارگذاری...</option>');

                $.ajax({
                    url: '@Url.Action("GetPatientInsurances", "InsuranceCalculation")',
                    type: 'POST',
                    data: { 
                        patientId: patientId,
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    },
                    timeout: 10000, // 10 seconds timeout
                    success: function(data) {
                        try {
                            select.empty().append('<option value="">انتخاب بیمه بیمار</option>');
                            
                            if (data && data.success && data.data) {
                                $.each(data.data, function(index, item) {
                                    select.append('<option value="' + item.value + '">' + item.text + '</option>');
                                });
                            } else {
                                select.append('<option value="">بیمه‌ای یافت نشد</option>');
                            }
                        } catch (error) {
                            console.error('خطا در پردازش داده‌های بیمه:', error);
                            select.html('<option value="">خطا در بارگذاری</option>');
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error('خطا در بارگذاری بیمه‌های بیمار:', error);
                        select.html('<option value="">خطا در بارگذاری</option>');
                        showAlert('خطا در بارگذاری بیمه‌های بیمار', 'error');
                    },
                    complete: function() {
                        select.prop('disabled', false);
                    }
                });
            }

            function validateForm() {
                var isValid = true;
                var errors = [];

                // 🛡️ Validate patient selection
                var patientId = $('#PatientId').val();
                if (!patientId || patientId <= 0) {
                    errors.push('بیمار باید انتخاب شود');
                    isValid = false;
                }

                // 🛡️ Validate service selection
                var serviceId = $('#ServiceId').val();
                if (!serviceId || serviceId <= 0) {
                    errors.push('خدمت باید انتخاب شود');
                    isValid = false;
                }

                // 🛡️ Validate service amount
                var serviceAmount = parseFloat($('#ServiceAmount').val());
                if (!serviceAmount || serviceAmount <= 0) {
                    errors.push('مبلغ خدمت باید بیشتر از صفر باشد');
                    isValid = false;
                }

                if (serviceAmount > 1000000000) { // 1 billion
                    errors.push('مبلغ خدمت بیش از حد مجاز است');
                    isValid = false;
                }

                // 🛡️ Validate calculation date
                var calculationDate = $('#CalculationDate').val();
                if (!calculationDate) {
                    errors.push('تاریخ محاسبه باید انتخاب شود');
                    isValid = false;
                }

                if (errors.length > 0) {
                    showAlert('خطاهای اعتبارسنجی: ' + errors.join(', '), 'error');
                }

                return isValid;
            }

            function validateServiceAmount(amount) {
                var amountValue = parseFloat(amount);
                var amountField = $('#ServiceAmount');
                
                if (amountValue < 0) {
                    amountField.addClass('is-invalid');
                    showFieldError(amountField, 'مبلغ نمی‌تواند منفی باشد');
                } else if (amountValue > 1000000000) {
                    amountField.addClass('is-invalid');
                    showFieldError(amountField, 'مبلغ بیش از حد مجاز است');
                } else if (amountValue > 0) {
                    amountField.removeClass('is-invalid').addClass('is-valid');
                    clearFieldError(amountField);
                }
            }

            function validateCalculationDate(persianDate) {
                // 🛡️ Validate date is not too far in future or past
                var now = new Date();
                var selectedDate = new Date(persianDate);
                var diffDays = Math.abs((selectedDate - now) / (1000 * 60 * 60 * 24));
                
                if (diffDays > 365 * 2) { // More than 2 years
                    showAlert('تاریخ محاسبه خارج از محدوده مجاز است', 'warning');
                }
            }

            function showFieldError(field, message) {
                field.siblings('.invalid-feedback').remove();
                field.after('<div class="invalid-feedback">' + message + '</div>');
            }

            function clearFieldError(field) {
                field.siblings('.invalid-feedback').remove();
            }

            function showAlert(message, type) {
                var alertClass = type === 'error' ? 'alert-danger' : 
                                type === 'warning' ? 'alert-warning' : 'alert-info';
                
                var alertHtml = '<div class="alert ' + alertClass + ' alert-dismissible fade show" role="alert">' +
                    '<i class="fas fa-exclamation-triangle"></i> ' + message +
                    '<button type="button" class="close" data-dismiss="alert" aria-label="Close">' +
                    '<span aria-hidden="true">&times;</span></button></div>';
                
                $('.container-fluid').prepend(alertHtml);
                
                // Auto dismiss after 5 seconds
                setTimeout(function() {
                    $('.alert').fadeOut();
                }, 5000);
            }

            function showLoadingState() {
                var submitBtn = $('button[type="submit"]');
                submitBtn.prop('disabled', true);
                submitBtn.html('<i class="fas fa-spinner fa-spin"></i> در حال محاسبه...');
            }
        });
    </script>
}
