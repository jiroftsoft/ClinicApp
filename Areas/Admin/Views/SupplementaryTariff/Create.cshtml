@model ClinicApp.ViewModels.Insurance.Supplementary.SupplementaryTariffCreateEditViewModel
@{
    ViewBag.Title = "ایجاد تعرفه بیمه تکمیلی جدید - محیط درمانی";
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
}

@section Styles {
    <link href="~/Content/css/medical-environment-styles.css" rel="stylesheet" />
    <link href="~/Content/css/insurance/supplementary-tariff-views.css" rel="stylesheet" />
    <style>
        .medical-form {
            background: white;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            padding: 30px;
            margin-bottom: 30px;
        }

        .form-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px;
            border-radius: 15px 15px 0 0;
            margin: -30px -30px 30px -30px;
        }

        .form-header h2 {
            margin: 0;
            font-weight: 600;
        }

        .form-group {
            margin-bottom: 25px;
        }

        .form-group label {
            font-weight: 600;
            color: #333;
            margin-bottom: 8px;
            display: block;
        }

        .form-control {
            border-radius: 10px;
            border: 2px solid #e9ecef;
            padding: 12px 15px;
            transition: all 0.3s ease;
            font-size: 14px;
        }

        .form-control:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
        }
        
        .form-control.is-invalid {
            border-color: #dc3545;
            box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25);
        }
        
        .form-control.is-valid {
            border-color: #28a745;
            box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.25);
        }
        
        .required-field::after {
            content: " *";
            color: #dc3545;
            font-weight: bold;
        }
        
        .form-help {
            font-size: 12px;
            color: #6c757d;
            margin-top: 5px;
        }
        
        .calculation-preview {
            background: #ffffff;
            border: 2px solid #2c3e50;
            border-radius: 10px;
            padding: 20px;
            margin: 20px 0;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        
        .calculation-preview h5 {
            color: #2c3e50;
            font-weight: bold;
            margin-bottom: 15px;
            text-align: center;
            border-bottom: 2px solid #3498db;
            padding-bottom: 10px;
        }
        
        .calculation-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px 0;
            border-bottom: 1px solid #ecf0f1;
            font-size: 14px;
        }
        
        .calculation-item:last-child {
            border-bottom: none;
            font-weight: bold;
            background: #ecf0f1;
            padding: 15px;
            border-radius: 5px;
            margin-top: 10px;
        }
        
        .calculation-item span:first-child {
            color: #2c3e50;
            font-weight: 600;
        }
        
        .calculation-item span:last-child {
            color: #e74c3c;
            font-weight: bold;
            font-size: 16px;
        }
        
        .calculation-item:last-child span:last-child {
            color: #27ae60;
            font-size: 18px;
        }
        
        /* بهبود نمایش اعداد */
        .calculation-item span:last-child {
            font-family: 'Courier New', monospace;
            direction: ltr;
            text-align: left;
            min-width: 120px;
        }
        
        /* نمایش بهتر برای اعداد بزرگ */
        #previewServiceAmount,
        #previewPrimaryCoverage,
        #previewPatientShareFromPrimary,
        #previewFinalPatientShare {
            font-weight: bold;
            letter-spacing: 0.5px;
        }

        .form-control.is-invalid {
            border-color: #dc3545;
        }

        .form-control.is-valid {
            border-color: #28a745;
        }

        .invalid-feedback {
            display: block;
            color: #dc3545;
            font-size: 12px;
            margin-top: 5px;
        }

        .btn-medical {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border: none;
            border-radius: 25px;
            color: white;
            padding: 12px 30px;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .btn-medical:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
            color: white;
        }

        .btn-secondary {
            background: #6c757d;
            border: none;
            border-radius: 25px;
            color: white;
            padding: 12px 30px;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .btn-secondary:hover {
            background: #5a6268;
            color: white;
        }

        /* CSS تکراری حذف شد - استفاده از نسخه بهبود یافته بالا */

        .required-field {
            color: #dc3545;
        }

        .form-help {
            font-size: 12px;
            color: #6c757d;
            margin-top: 5px;
        }
    </style>
}

<div class="container-fluid">
    <!-- Header Section -->
    <div class="row">
        <div class="col-12">
            <div class="medical-form">
                <div class="form-header">
                    <h2>
                        <i class="fas fa-plus-circle me-2"></i>
                        ایجاد تعرفه بیمه تکمیلی جدید
                    </h2>
                    <p class="mb-0 mt-2 opacity-75">
                        فرم استاندارد ایجاد تعرفه بیمه تکمیلی برای محیط درمانی
                    </p>
                </div>

                @using (Html.BeginForm("Create", "SupplementaryTariff", FormMethod.Post, new { @class = "medical-tariff-form", @id = "createTariffForm" }))
                {
                    @Html.AntiForgeryToken()
                    
                    <!-- بخش انتخاب بیمه پایه -->
                    <div class="row mb-4">
                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(m => m.PrimaryInsurancePlanId, "بیمه پایه *", new { @class = "required-field" })
                                @if (Model.PrimaryInsurancePlans != null && Model.PrimaryInsurancePlans.Any())
                                {
                                    @Html.DropDownListFor(m => m.PrimaryInsurancePlanId, new SelectList(Model.PrimaryInsurancePlans, "Value", "Text"), "انتخاب بیمه پایه", new { @class = "form-control", @required = "required", @id = "primaryInsurancePlanId" })
                                }
                                else
                                {
                                    <select id="primaryInsurancePlanId" name="PrimaryInsurancePlanId" class="form-control" required>
                                        <option value="">در حال بارگذاری...</option>
                                    </select>
                                }
                                @Html.ValidationMessageFor(m => m.PrimaryInsurancePlanId, "", new { @class = "invalid-feedback" })
                                <div class="form-help">بیمه پایه بیمار (تامین، نیروهای مسلح، و...)</div>
                                
                                <!-- نمایش اطلاعات بیمه پایه انتخاب شده -->
                                <div id="primaryInsuranceInfo" class="alert alert-info mt-2" style="display: none;">
                                    <div class="row">
                                        <div class="col-md-6">
                                            <strong>درصد پوشش:</strong> <span id="primaryCoveragePercent">-</span>%
                                        </div>
                                        <div class="col-md-6">
                                            <strong>فرانشیز:</strong> <span id="primaryDeductible">-</span> تومان
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(m => m.InsurancePlanId, "طرح بیمه تکمیلی *", new { @class = "required-field" })
                                @if (Model.InsurancePlans != null && Model.InsurancePlans.Any())
                                {
                                    @Html.DropDownListFor(m => m.InsurancePlanId, new SelectList(Model.InsurancePlans, "Value", "Text"), "انتخاب طرح بیمه تکمیلی", new { @class = "form-control", @required = "required", @id = "InsurancePlanId" })
                                }
                                else
                                {
                                    <select id="InsurancePlanId" name="InsurancePlanId" class="form-control" required>
                                        <option value="">در حال بارگذاری...</option>
                                    </select>
                                }
                                @Html.ValidationMessageFor(m => m.InsurancePlanId, "", new { @class = "invalid-feedback" })
                                <div class="form-help">طرح بیمه تکمیلی (VIP ملت، دانا، پارسیان تکمیلی)</div>
                                
                                <!-- نمایش اطلاعات بیمه تکمیلی انتخاب شده -->
                                <div id="supplementaryInsuranceInfo" class="alert alert-warning mt-2" style="display: none;">
                                    <div class="row">
                                        <div class="col-md-6">
                                            <strong>درصد پوشش:</strong> <span id="supplementaryCoveragePercent">-</span>%
                                        </div>
                                        <div class="col-md-6">
                                            <strong>فرانشیز:</strong> <span id="supplementaryDeductible">-</span> تومان
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- بخش انتخاب دپارتمان و خدمت -->
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(m => m.DepartmentId, "دپارتمان *", new { @class = "required-field" })
                                @if (Model.Departments != null && Model.Departments.Any())
                                {
                                    @Html.DropDownListFor(m => m.DepartmentId, new SelectList(Model.Departments, "Value", "Text"), "انتخاب دپارتمان", new { @class = "form-control", @required = "required", @id = "departmentId" })
                                }
                                else
                                {
                                    <select id="departmentId" name="DepartmentId" class="form-control" required>
                                        <option value="">در حال بارگذاری...</option>
                                    </select>
                                }
                                @Html.ValidationMessageFor(m => m.DepartmentId, "", new { @class = "invalid-feedback" })
                                <div class="form-help">انتخاب دپارتمان</div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(m => m.ServiceId, "خدمت *", new { @class = "required-field" })
                                <select id="serviceId" name="ServiceId" class="form-control" required>
                                    <option value="">ابتدا دپارتمان را انتخاب کنید</option>
                                </select>
                                @Html.ValidationMessageFor(m => m.ServiceId, "", new { @class = "invalid-feedback" })
                                <div class="form-help">انتخاب خدمت</div>
                            </div>
                        </div>
                    </div>



                    <div class="row">
                        <div class="col-md-4">
                            <div class="form-group">
                                @Html.LabelFor(m => m.TariffPrice, "قیمت تعرفه (تومان) *", new { @class = "required-field", @id = "tariffPriceLabel" })
                                @Html.TextBoxFor(m => m.TariffPrice, new { @class = "form-control currency-input", @type = "number", @step = "0.01", @min = "0", @required = "required", @placeholder = "0.00", @id = "TariffPrice" })
                                @Html.ValidationMessageFor(m => m.TariffPrice, "", new { @class = "invalid-feedback" })
                                <div class="form-help">قیمت کل خدمت به تومان (خودکار پر می‌شود)</div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                @Html.LabelFor(m => m.PatientShare, "سهم بیمار (تومان) *", new { @class = "required-field", @id = "patientShareLabel" })
                                @Html.TextBoxFor(m => m.PatientShare, new { @class = "form-control currency-input", @type = "number", @step = "0.01", @min = "0", @required = "required", @placeholder = "0.00", @id = "PatientShare" })
                                @Html.ValidationMessageFor(m => m.PatientShare, "", new { @class = "invalid-feedback" })
                                <div class="form-help">مبلغی که بیمار باید پرداخت کند</div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                @Html.LabelFor(m => m.InsurerShare, "سهم بیمه (تومان) *", new { @class = "required-field", @id = "insurerShareLabel" })
                                @Html.TextBoxFor(m => m.InsurerShare, new { @class = "form-control currency-input", @type = "number", @step = "0.01", @min = "0", @required = "required", @placeholder = "0.00", @id = "InsurerShare" })
                                @Html.ValidationMessageFor(m => m.InsurerShare, "", new { @class = "invalid-feedback" })
                                <div class="form-help">مبلغی که بیمه پایه پرداخت می‌کند (70% از قیمت کل)</div>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(m => m.SupplementaryCoveragePercent, "درصد پوشش تکمیلی *", new { @class = "required-field" })
                                @Html.TextBoxFor(m => m.SupplementaryCoveragePercent, new { @class = "form-control percentage-input", @type = "number", @step = "0.01", @min = "0", @max = "100", @required = "required", @placeholder = "90.00" })
                                @Html.ValidationMessageFor(m => m.SupplementaryCoveragePercent, "", new { @class = "invalid-feedback" })
                                <div class="form-help">درصد پوشش بیمه تکمیلی (0-100)</div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(m => m.Priority, "اولویت")
                                @Html.TextBoxFor(m => m.Priority, new { @class = "form-control", @type = "number", @min = "1", @max = "10", @placeholder = "5" })
                                @Html.ValidationMessageFor(m => m.Priority, "", new { @class = "invalid-feedback" })
                                <div class="form-help">اولویت تعرفه (1-10، 1 بالاترین اولویت)</div>
                            </div>
                        </div>
                    </div>

                    <!-- Calculation Preview -->
                    <div class="calculation-preview">
                        <h5><i class="fas fa-calculator me-2" style="color: #3498db;"></i>پیش‌نمایش محاسبات</h5>
                        <div class="calculation-item">
                            <span>قیمت کل خدمت:</span>
                            <span id="previewServiceAmount">0 تومان</span>
                        </div>
                        <div class="calculation-item">
                            <span>سهم بیمه پایه:</span>
                            <span id="previewPrimaryCoverage">0 تومان</span>
                        </div>
                        <div class="calculation-item">
                            <span>سهم بیمار از بیمه اصلی:</span>
                            <span id="previewPatientShareFromPrimary">0 ریال</span>
                        </div>
                        <div class="calculation-item">
                            <span>درصد پوشش تکمیلی:</span>
                            <span id="previewSupplementaryPercent">0%</span>
                        </div>
                        <div class="calculation-item">
                            <span>سهم نهایی بیمار:</span>
                            <span id="previewFinalPatientShare">0 تومان</span>
                        </div>
                    </div>

                    <!-- Form Actions -->
                    <div class="row mt-4">
                        <div class="col-12 text-end">
                            <a href="/Admin/SupplementaryTariff/Index" class="btn btn-secondary me-2">
                                <i class="fas fa-arrow-right me-2"></i>
                                بازگشت
                            </a>
                            <a href="@Url.Action("CreateBulk", "SupplementaryTariff")" class="btn btn-warning me-2">
                                <i class="fas fa-layer-group me-2"></i>
                                تعرفه گروهی
                            </a>
                            <button type="submit" class="btn btn-medical" id="submitBtn">
                                <i class="fas fa-save me-2"></i>
                                ایجاد تعرفه
                            </button>
                        </div>
                    </div>
                    
                    <!-- Loading Overlay -->
                    <div id="loadingOverlay" class="position-fixed top-0 start-0 w-100 h-100 d-none" 
                         style="background-color: rgba(0,0,0,0.5); z-index: 9999;">
                        <div class="d-flex justify-content-center align-items-center h-100">
                            <div class="text-center text-white">
                                <div class="spinner-border spinner-border-lg mb-3" role="status">
                                    <span class="visually-hidden">در حال پردازش...</span>
                                </div>
                                <h5>در حال ایجاد تعرفه...</h5>
                                <p class="mb-0">لطفاً منتظر بمانید</p>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/Scripts/app/modules/medical-config.js"></script>
    <script src="~/Scripts/app/modules/medical-ui.js"></script>
    <script src="~/Scripts/app/modules/medical-validation.js"></script>
    
    <style>
        
        /* CSS moved to main styles section */
        
        .calculation-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 8px 0;
            border-bottom: 1px solid rgba(255, 255, 255, 0.2);
        }
        
        .calculation-item:last-child {
            border-bottom: none;
        }
        
        .currency-format {
            font-weight: bold;
            font-family: 'Courier New', monospace;
        }
    </style>
    <script>
        $(document).ready(function() {
            console.log('🏥 MEDICAL: Initializing Create Tariff Form');
            
            // Initialize form validation
            initializeFormValidation();
            
            // Initialize real-time calculation
            initializeRealTimeCalculation();
            
            // Initialize currency formatting
            initializeCurrencyFormatting();
            
            // Initialize cascade dropdown
            initializeCascadeDropdown();
            
            // Initialize smart form
            SmartForm.init();
            
            // FIX: بارگذاری داده‌های dropdown در صورت عدم وجود
            loadMissingDropdownData();
            
            // Initialize insurance plan info display
            initializeInsurancePlanInfo();
            
            // Set default values
            $('#TariffPrice').val('0');
            $('#PatientShare').val('0');
            $('#InsurerShare').val('0');
            $('#SupplementaryCoveragePercent').val('90');
            $('#Priority').val('5');
            
            // Initial calculation
            updateCalculationPreview();
            
            // Form submission handler
            $('#createTariffForm').on('submit', function(e) {
                if (!validateForm()) {
                    e.preventDefault();
                    return false;
                }
                
                // Show loading state
                $('#submitBtn').prop('disabled', true).html('<i class="fas fa-spinner fa-spin me-2"></i>در حال ایجاد...');
            });
        });

        function initializeFormValidation() {
            // Real-time validation
            $('.form-control').on('blur', function() {
                validateField($(this));
            });
            
            // Form submission validation
            $('#createTariffForm').on('submit', function(e) {
                if (!validateForm()) {
                    e.preventDefault();
                    return false;
                }
            });
        }

        function initializeRealTimeCalculation() {
            // این تابع حالا در SmartForm.initializeSmartCalculation مدیریت می‌شود
            // برای جلوگیری از تداخل، این تابع خالی است
        }

        // اضافه کردن داده‌های بیمه پایه به JavaScript
        window.primaryInsurancePlans = @Html.Raw(Json.Encode(ViewBag.PrimaryInsurancePlans ?? new List<object>()));

        function initializeInsurancePlanInfo() {
            // نمایش اطلاعات بیمه پایه
            $('#primaryInsurancePlanId').on('change', function() {
                var selectedOption = $(this).find('option:selected');
                var planId = $(this).val();
                
                if (planId && planId !== '') {
                    // دریافت اطلاعات از ViewBag
                    var primaryPlans = window.primaryInsurancePlans || [];
                    var selectedPlan = primaryPlans.find(function(plan) {
                        return plan.InsurancePlanId == planId;
                    });
                    
                    if (selectedPlan) {
                        $('#primaryCoveragePercent').text(selectedPlan.CoveragePercent || '0');
                        $('#primaryDeductible').text((selectedPlan.Deductible || 0).toLocaleString());
                        $('#primaryInsuranceInfo').show();
                        
                        console.log('🏥 MEDICAL: بیمه پایه انتخاب شد - CoveragePercent:', selectedPlan.CoveragePercent, 'Deductible:', selectedPlan.Deductible);
                        
                        // به‌روزرسانی محاسبات
                        updateCalculationPreview();
                    }
                } else {
                    $('#primaryInsuranceInfo').hide();
                }
            });
            
            // نمایش اطلاعات بیمه تکمیلی
            $('#InsurancePlanId').on('change', function() {
                var selectedOption = $(this).find('option:selected');
                var planId = $(this).val();
                
                if (planId && planId !== '') {
                    // دریافت اطلاعات از ViewBag
                    var supplementaryPlans = @Html.Raw(Json.Encode(ViewBag.InsurancePlans ?? new List<object>()));
                    var selectedPlan = supplementaryPlans.find(function(plan) {
                        return plan.InsurancePlanId == planId;
                    });
                    
                    if (selectedPlan) {
                        $('#supplementaryCoveragePercent').text(selectedPlan.CoveragePercent || '0');
                        $('#supplementaryDeductible').text((selectedPlan.Deductible || 0).toLocaleString());
                        $('#supplementaryInsuranceInfo').show();
                        
                        console.log('🏥 MEDICAL: بیمه تکمیلی انتخاب شد - CoveragePercent:', selectedPlan.CoveragePercent, 'Deductible:', selectedPlan.Deductible);
                    }
                } else {
                    $('#supplementaryInsuranceInfo').hide();
                }
            });
        }

        function initializeCurrencyFormatting() {
            $('.currency-input').on('input', function() {
                let value = $(this).val().replace(/[^\d]/g, '');
                if (value) {
                    $(this).val(parseFloat(value).toFixed(2));
                }
            });
        }

        function updateCalculationPreview() {
            try {
                const serviceAmount = parseFloat($('#TariffPrice').val()) || 0;
                const supplementaryPercent = parseFloat($('#SupplementaryCoveragePercent').val()) || 0;
                
                console.log('🏥 MEDICAL: محاسبه پیش‌نمایش - ServiceAmount:', serviceAmount, 'SupplementaryPercent:', supplementaryPercent);
                
                // دریافت اطلاعات بیمه پایه انتخاب شده
                var primaryPlans = @Html.Raw(Json.Encode(ViewBag.PrimaryInsurancePlans ?? new List<object>()));
                var selectedPrimaryPlanId = $('#primaryInsurancePlanId').val();
                var selectedPrimaryPlan = null;
                
                if (primaryPlans && Array.isArray(primaryPlans)) {
                    selectedPrimaryPlan = primaryPlans.find(function(plan) {
                        return plan.InsurancePlanId == selectedPrimaryPlanId;
                    });
                }
            
            // محاسبه فرانشیز
            let primaryDeductible = 0;
            if (selectedPrimaryPlan) {
                primaryDeductible = selectedPrimaryPlan.Deductible || 0;
            }
            
            // محاسبه مبلغ قابل پوشش (بعد از کسر فرانشیز)
            const coverableAmount = Math.max(0, serviceAmount - primaryDeductible);
            
            // محاسبه بیمه پایه
            let primaryCoverage = 0;
            if (selectedPrimaryPlan) {
                // استفاده از درصد پوشش واقعی بیمه پایه
                primaryCoverage = coverableAmount * (selectedPrimaryPlan.CoveragePercent || 70) / 100;
            } else {
                // fallback به 70% در صورت عدم انتخاب
                primaryCoverage = coverableAmount * 0.7;
            }
            
            // 🔧 CRITICAL FIX: محاسبه صحیح سهم بیمار از بیمه اصلی
            const patientShareFromPrimary = Math.max(0, serviceAmount - primaryCoverage);
            
            // 🔧 CRITICAL FIX: محاسبه بیمه تکمیلی (درصدی از سهم بیمار)
            const supplementaryCoverage = patientShareFromPrimary * (supplementaryPercent / 100);
            
            // 🔧 CRITICAL FIX: سهم نهایی بیمار = سهم بیمار - پوشش تکمیلی
            const finalPatientShare = Math.max(0, patientShareFromPrimary - supplementaryCoverage);
            
            // به‌روزرسانی فیلدهای فرم
            $('#InsurerShare').val(primaryCoverage.toFixed(2));
            $('#PatientShare').val(finalPatientShare.toFixed(2));
            
            console.log('🏥 MEDICAL: محاسبات - ServiceAmount:', serviceAmount, 'PrimaryDeductible:', primaryDeductible, 'CoverableAmount:', coverableAmount, 'PrimaryCoverage:', primaryCoverage, 'PatientShareFromPrimary:', patientShareFromPrimary, 'SupplementaryCoverage:', supplementaryCoverage, 'FinalPatientShare:', finalPatientShare);
            
                // 🔧 CRITICAL FIX: به‌روزرسانی پیش‌نمایش با منطق صحیح
                $('#previewServiceAmount').text(serviceAmount.toLocaleString() + ' ریال');
                $('#previewPrimaryCoverage').text(primaryCoverage.toLocaleString() + ' ریال');
                $('#previewPatientShareFromPrimary').text(patientShareFromPrimary.toLocaleString() + ' ریال');
                $('#previewSupplementaryPercent').text(supplementaryPercent + '%');
                $('#previewFinalPatientShare').text(finalPatientShare.toLocaleString() + ' ریال');
            } catch (error) {
                console.error('🏥 MEDICAL: خطا در محاسبه پیش‌نمایش:', error);
                // نمایش پیام خطا به کاربر
                $('#calculationError').html('<div class="alert alert-danger">خطا در محاسبه: ' + error.message + '</div>').show();
            }
        }

        function validateField(field) {
            const value = field.val();
            const fieldName = field.attr('name');
            
            // Remove existing validation classes
            field.removeClass('is-valid is-invalid');
            
            // Validate based on field type
            switch (fieldName) {
                case 'TariffPrice':
                case 'PatientShare':
                case 'InsurerShare':
                    if (value && (isNaN(value) || parseFloat(value) < 0)) {
                        field.addClass('is-invalid');
                        return false;
                    }
                    break;
                case 'SupplementaryCoveragePercent':
                    if (value && (isNaN(value) || parseFloat(value) < 0 || parseFloat(value) > 100)) {
                        field.addClass('is-invalid');
                        return false;
                    }
                    break;
            }
            
            if (value) {
                field.addClass('is-valid');
            }
            
            return true;
        }

        function validateForm() {
            let isValid = true;
            let errorMessages = [];
            
            // Validate all required fields
            $('.form-control[required]').each(function() {
                if (!validateField($(this))) {
                    isValid = false;
                    let fieldName = $(this).attr('name');
                    let label = $('label[for="' + fieldName + '"]').text() || fieldName;
                    errorMessages.push(label + ' الزامی است');
                }
            });
            
            // Validate business rules
            const tariffPrice = parseFloat($('#TariffPrice').val()) || 0;
            const patientShare = parseFloat($('#PatientShare').val()) || 0;
            const insurerShare = parseFloat($('#InsurerShare').val()) || 0;
            const coveragePercent = parseFloat($('#SupplementaryCoveragePercent').val()) || 0;
            
            if (tariffPrice <= 0) {
                errorMessages.push('قیمت تعرفه باید بیشتر از صفر باشد');
                isValid = false;
            }
            
            if (coveragePercent < 0 || coveragePercent > 100) {
                errorMessages.push('درصد پوشش باید بین 0 تا 100 باشد');
                isValid = false;
            }
            
            // اعتبارسنجی منطق کسب‌وکار - فرانشیز باید از قیمت کل کسر شود
            if (patientShare + insurerShare > tariffPrice) {
                errorMessages.push('مجموع سهم بیمار و بیمه نمی‌تواند بیشتر از قیمت تعرفه باشد');
                isValid = false;
            }
            
            // اعتبارسنجی منطق فرانشیز - سهم بیمار باید حداقل برابر فرانشیز باشد
            if (patientShare < 0) {
                errorMessages.push('سهم بیمار نمی‌تواند منفی باشد');
                isValid = false;
            }
            
            // Show error messages
            if (!isValid) {
                showValidationErrors(errorMessages);
            }
            
            return isValid;
        }
        
        function showValidationErrors(errors) {
            let errorHtml = '<div class="alert alert-danger"><ul class="mb-0">';
            errors.forEach(function(error) {
                errorHtml += '<li>' + error + '</li>';
            });
            errorHtml += '</ul></div>';
            
            // Remove existing error messages
            $('.alert-danger').remove();
            
            // Add new error messages
            $('#createTariffForm').prepend(errorHtml);
        }
        
        function loadMissingDropdownData() {
            console.log('🏥 MEDICAL: بررسی و بارگذاری داده‌های dropdown');
            
            // بررسی دپارتمان‌ها
            if ($('#departmentId option').length <= 1) {
                console.log('🏥 MEDICAL: بارگذاری دپارتمان‌ها');
                loadDepartments();
            }
            
            // بررسی بیمه‌های پایه
            if ($('#primaryInsurancePlanId option').length <= 1) {
                console.log('🏥 MEDICAL: بارگذاری بیمه‌های پایه');
                loadPrimaryInsurancePlans();
            }
            
            // بررسی بیمه‌های تکمیلی
            if ($('#InsurancePlanId option').length <= 1) {
                console.log('🏥 MEDICAL: بارگذاری بیمه‌های تکمیلی');
                loadSupplementaryInsurancePlans();
            }
        }
        
        function loadDepartments() {
            $.ajax({
                url: '@Url.Action("GetDepartments", "SupplementaryTariff", new { area = "Admin" })',
                type: 'GET',
                dataType: 'json',
                success: function(data) {
                    console.log('🏥 MEDICAL: دپارتمان‌ها بارگذاری شد - Count:', data ? data.length : 0);
                    if (data && data.length > 0) {
                        var dropdown = $('#departmentId');
                        dropdown.empty().append('<option value="">انتخاب دپارتمان</option>');
                        data.forEach(function(dept) {
                            dropdown.append('<option value="' + dept.DepartmentId + '">' + dept.Name + '</option>');
                        });
                    }
                },
                error: function(xhr, status, error) {
                    console.error('🏥 MEDICAL: خطا در بارگذاری دپارتمان‌ها:', error);
                }
            });
        }
        
        function loadPrimaryInsurancePlans() {
            $.ajax({
                url: '@Url.Action("GetPrimaryInsurancePlans", "SupplementaryTariff", new { area = "Admin" })',
                type: 'GET',
                dataType: 'json',
                success: function(data) {
                    console.log('🏥 MEDICAL: بیمه‌های پایه بارگذاری شد - Count:', data ? data.length : 0);
                    if (data && data.length > 0) {
                        var dropdown = $('#primaryInsurancePlanId');
                        dropdown.empty().append('<option value="">انتخاب بیمه پایه</option>');
                        data.forEach(function(plan) {
                            dropdown.append('<option value="' + plan.InsurancePlanId + '">' + plan.Name + '</option>');
                        });
                    }
                },
                error: function(xhr, status, error) {
                    console.error('🏥 MEDICAL: خطا در بارگذاری بیمه‌های پایه:', error);
                }
            });
        }
        
        function loadSupplementaryInsurancePlans() {
            $.ajax({
                url: '@Url.Action("GetSupplementaryInsurancePlans", "SupplementaryTariff", new { area = "Admin" })',
                type: 'GET',
                dataType: 'json',
                success: function(data) {
                    console.log('🏥 MEDICAL: بیمه‌های تکمیلی بارگذاری شد - Count:', data ? data.length : 0);
                    if (data && data.length > 0) {
                        var dropdown = $('#InsurancePlanId');
                        dropdown.empty().append('<option value="">انتخاب طرح بیمه تکمیلی</option>');
                        data.forEach(function(plan) {
                            dropdown.append('<option value="' + plan.InsurancePlanId + '">' + plan.Name + '</option>');
                        });
                    }
                },
                error: function(xhr, status, error) {
                    console.error('🏥 MEDICAL: خطا در بارگذاری بیمه‌های تکمیلی:', error);
                }
            });
        }

        function initializeCascadeDropdown() {
            // Cascade Dropdown Logic: Department -> Services
            $('#departmentId').on('change', function() {
                var departmentId = $(this).val();
                var serviceDropdown = $('#serviceId');
                
                // Clear and disable service dropdown
                serviceDropdown.empty().append('<option value="">در حال بارگذاری...</option>').prop('disabled', true);
                
                if (departmentId) {
                    // Load services for selected department
                    $.ajax({
                        url: '@Url.Action("GetServicesByDepartment", "SupplementaryTariff", new { area = "Admin" })',
                        type: 'GET',
                        data: { departmentId: departmentId },
                        dataType: 'json',
                        cache: false,
                        success: function(data) {
                            console.log('🏥 MEDICAL: دریافت خدمات دپارتمان - Data:', data);
                            
                            serviceDropdown.empty().prop('disabled', false);
                            
                            try {
                                console.log('🏥 MEDICAL: بررسی داده‌ها - Type:', typeof data, 'IsArray:', Array.isArray(data), 'Length:', data ? data.length : 'null');
                                
                                // بررسی و تبدیل داده‌ها
                                var services = data;
                                
                                // اگر داده string است، آن را parse کنیم
                                if (typeof data === 'string') {
                                    try {
                                        services = JSON.parse(data);
                                        console.log('🏥 MEDICAL: داده‌ها از string به object تبدیل شد - Type:', typeof services, 'IsArray:', Array.isArray(services));
                                    } catch (parseError) {
                                        console.error('🏥 MEDICAL: خطا در parse کردن JSON:', parseError);
                                        serviceDropdown.append('<option value="">خطا در پردازش داده‌ها</option>');
                                        return;
                                    }
                                }
                                
                                // بررسی صحیح آرایه بودن services
                                if (services && Array.isArray(services) && services.length > 0) {
                                    serviceDropdown.append('<option value="">انتخاب خدمت</option>');
                                    
                                    // استفاده از for loop به جای $.each برای اطمینان
                                    for (var i = 0; i < services.length; i++) {
                                        var service = services[i];
                                        if (service && service.ServiceId && service.Title) {
                                            serviceDropdown.append('<option value="' + service.ServiceId + '">' + service.Title + '</option>');
                                        }
                                    }
                                    
                                    console.log('🏥 MEDICAL: خدمات با موفقیت بارگذاری شد - تعداد: ' + services.length);
                                } else {
                                    serviceDropdown.append('<option value="">خدمتی یافت نشد</option>');
                                    console.log('🏥 MEDICAL: هیچ خدمتی یافت نشد');
                                }
                            } catch (error) {
                                console.error('🏥 MEDICAL: خطا در پردازش خدمات:', error);
                                serviceDropdown.append('<option value="">خطا در پردازش خدمات</option>');
                            }
                        },
                        error: function(xhr, status, error) {
                            console.error('🏥 MEDICAL: خطا در AJAX - Status:', status, 'Error:', error, 'Response:', xhr.responseText);
                            serviceDropdown.empty().append('<option value="">خطا در بارگذاری خدمات</option>').prop('disabled', false);
                        }
                    });
                } else {
                    serviceDropdown.empty().append('<option value="">ابتدا دپارتمان را انتخاب کنید</option>').prop('disabled', true);
                }
            });
        }

        // فرم هوشمند ایجاد تعرفه بیمه تکمیلی
        var SmartForm = {
            // تنظیمات
            config: {
                apiBaseUrl: '@Url.Action("", "SupplementaryTariff")',
                logPrefix: '🏥 MEDICAL SMART FORM:'
            },

            // راه‌اندازی فرم هوشمند
            init: function() {
                console.log(this.config.logPrefix + ' راه‌اندازی فرم هوشمند');
                this.initializeSmartCalculation();
                this.initializeFormValidation();
            },

            // راه‌اندازی محاسبه هوشمند
            initializeSmartCalculation: function() {
                var self = this;
                
                // تغییر خدمت یا طرح بیمه
                $('#serviceId, #InsurancePlanId').on('change', function() {
                    var serviceId = $('#serviceId').val();
                    var planId = $('#InsurancePlanId').val();
                    
                    if (serviceId && planId) {
                        self.loadSmartData(serviceId, planId);
                    } else {
                        self.clearFormData();
                    }
                    
                    // Trigger محاسبه بعد از تغییر
                    setTimeout(function() {
                        updateCalculationPreview();
                    }, 1000);
                });
                
                // تغییر فیلدهای قیمت
                $('.currency-input, .percentage-input').on('input', function() {
                    updateCalculationPreview();
                });
            },

            // بارگذاری داده‌های هوشمند
            loadSmartData: function(serviceId, planId) {
                var self = this;
                console.log(self.config.logPrefix + ' بارگذاری داده‌های هوشمند - ServiceId: ' + serviceId + ', PlanId: ' + planId);
                
                // نمایش loading
                this.showLoading();
                
                $.ajax({
                    url: '@Url.Action("GetSmartFormData", "SupplementaryTariff")',
                    type: 'GET',
                    data: { serviceId: serviceId, insurancePlanId: planId },
                    dataType: 'json',
                    cache: false,
                    success: function(response) {
                        console.log(self.config.logPrefix + ' پاسخ دریافت شد:', response);
                        
                        if (response.success && response.data) {
                            self.populateFormData(response.data);
                            self.showCalculationResults(response.data.calculation);
                            $('#smartFormInfo').show();
                        } else {
                            self.showError('خطا در دریافت اطلاعات: ' + (response.message || 'خطای نامشخص'));
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error(self.config.logPrefix + ' خطای AJAX:', error);
                        self.showError('خطا در ارتباط با سرور: ' + error);
                    },
                    complete: function() {
                        self.hideLoading();
                    }
                });
            },

            // پر کردن فرم با داده‌های هوشمند
            populateFormData: function(data) {
                console.log(this.config.logPrefix + ' پر کردن فرم با داده‌های هوشمند:', data);
                
                // پر کردن فیلدهای قیمت
                if (data.service && data.service.price) {
                    $('#TariffPrice').val(data.service.price);
                }
                
                // پر کردن فیلدهای محاسبه شده
                if (data.calculation) {
                    $('#PatientShare').val(data.calculation.patientPayment);
                    $('#InsurerShare').val(data.calculation.insuranceCoverage);
                    $('#SupplementaryCoveragePercent').val(data.calculation.coveragePercent);
                }
                
                // نمایش اطلاعات خدمت
                this.showServiceInfo(data.service);
                this.showPlanInfo(data.plan);
                
                // Trigger محاسبه برای به‌روزرسانی پیش‌نمایش
                updateCalculationPreview();
            },

            // نمایش اطلاعات خدمت
            showServiceInfo: function(service) {
                if (service) {
                    var infoHtml = '<div class="alert alert-info">' +
                        '<strong>خدمت انتخاب شده:</strong> ' + service.title + '<br>' +
                        '<strong>کد خدمت:</strong> ' + service.code + '<br>' +
                        '<strong>قیمت پایه:</strong> ' + this.formatCurrency(service.price) + ' تومان' +
                        '</div>';
                    $('#serviceInfo').html(infoHtml);
                }
            },

            // نمایش اطلاعات طرح بیمه
            showPlanInfo: function(plan) {
                if (plan) {
                    var infoHtml = '<div class="alert alert-success">' +
                        '<strong>طرح بیمه:</strong> ' + plan.name + '<br>' +
                        '<strong>درصد پوشش:</strong> ' + plan.coveragePercent + '%<br>' +
                        '<strong>فرانشیز:</strong> ' + this.formatCurrency(plan.deductible) + ' تومان' +
                        '</div>';
                    $('#planInfo').html(infoHtml);
                }
            },

            // نمایش نتایج محاسبه
            showCalculationResults: function(calculation) {
                if (calculation) {
                    var resultsHtml = '<div class="alert alert-warning">' +
                        '<h5><i class="fa fa-calculator"></i> نتایج محاسبه خودکار:</h5>' +
                        '<div class="row">' +
                        '<div class="col-md-6">' +
                        '<strong>مبلغ کل:</strong> ' + this.formatCurrency(calculation.totalAmount) + ' تومان<br>' +
                        '<strong>فرانشیز:</strong> ' + this.formatCurrency(calculation.deductibleAmount) + ' تومان<br>' +
                        '<strong>قابل پوشش:</strong> ' + this.formatCurrency(calculation.coverableAmount) + ' تومان' +
                        '</div>' +
                        '<div class="col-md-6">' +
                        '<strong>درصد پوشش:</strong> ' + calculation.coveragePercent + '%<br>' +
                        '<strong>سهم بیمه:</strong> ' + this.formatCurrency(calculation.insuranceCoverage) + ' تومان<br>' +
                        '<strong>سهم بیمار:</strong> ' + this.formatCurrency(calculation.patientPayment) + ' تومان' +
                        '</div>' +
                        '</div>' +
                        '</div>';
                    $('#calculationResults').html(resultsHtml);
                }
            },

            // پاک کردن داده‌های فرم
            clearFormData: function() {
                $('#TariffPrice, #PatientShare, #InsurerShare, #SupplementaryCoveragePercent').val('');
                $('#serviceInfo, #planInfo, #calculationResults').html('');
                $('#smartFormInfo').hide();
            },

            // نمایش loading
            showLoading: function() {
                $('#loadingIndicator').show();
            },

            // مخفی کردن loading
            hideLoading: function() {
                $('#loadingIndicator').hide();
            },

            // نمایش خطا
            showError: function(message) {
                var errorHtml = '<div class="alert alert-danger">' +
                    '<i class="fa fa-exclamation-triangle"></i> ' + message +
                    '</div>';
                $('#errorMessages').html(errorHtml);
            },

            // فرمت ارز
            formatCurrency: function(amount) {
                return new Intl.NumberFormat('fa-IR').format(amount);
            },

            // راه‌اندازی اعتبارسنجی فرم
            initializeFormValidation: function() {
                $('#createTariffForm').on('submit', function(e) {
                    var isValid = true;
                    var errors = [];

                    // اعتبارسنجی فیلدهای اجباری
                    if (!$('#departmentId').val()) {
                        errors.push('انتخاب دپارتمان الزامی است');
                        isValid = false;
                    }
                    if (!$('#serviceId').val()) {
                        errors.push('انتخاب خدمت الزامی است');
                        isValid = false;
                    }
                    if (!$('#InsurancePlanId').val()) {
                        errors.push('انتخاب طرح بیمه الزامی است');
                        isValid = false;
                    }

                    if (!isValid) {
                        e.preventDefault();
                        alert('لطفاً تمام فیلدهای اجباری را پر کنید:\n' + errors.join('\n'));
                    }
                });
            }
        };

        // راه‌اندازی فرم هوشمند - MOVED TO MAIN DOCUMENT READY
        
    </script>
    
    <!-- Real-time Validation Scripts -->
    <script src="~/Scripts/app/modules/medical-realtime-validation.js"></script>
    <script src="~/Scripts/app/modules/medical-message-manager.js"></script>
    <script src="~/Scripts/app/modules/medical-ux-enhancer.js"></script>
    <script src="~/Scripts/app/supplementary-tariff.js"></script>
}
