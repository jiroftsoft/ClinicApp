@model ClinicApp.ViewModels.Insurance.Supplementary.SupplementaryTariffFilterViewModel

<div class="professional-filters-card">
    <div class="filters-header">
        <div class="filters-title">
            <i class="fas fa-filter"></i>
            <span>فیلترها و جستجو</span>
        </div>
        <div class="filters-actions">
            <button type="button" class="btn btn-sm btn-outline-secondary" onclick="toggleFilters()">
                <i class="fas fa-chevron-up" id="filtersToggleIcon"></i>
            </button>
        </div>
    </div>
    <div class="filters-content" id="filtersContent">
        <form id="filterForm" method="get">
            @Html.AntiForgeryToken()
            <div class="filters-grid">
                <!-- Service Filter -->
                <div class="filter-group">
                    <label for="serviceId" class="filter-label">خدمت</label>
                    <select class="professional-select" id="serviceId" name="serviceId" aria-label="انتخاب خدمت برای فیلتر کردن">
                        <option value="">همه خدمات</option>
                        @foreach (var service in Model.Services)
                        {
                            <option value="@service.ServiceId" @(Model.ServiceId == service.ServiceId ? "selected" : "")>
                                @service.ServiceTitle
                            </option>
                        }
                    </select>
                </div>

                <!-- Insurance Plan Filter -->
                <div class="filter-group">
                    <label for="insurancePlanId" class="filter-label">طرح بیمه</label>
                    <select class="professional-select" id="insurancePlanId" name="insurancePlanId" aria-label="انتخاب طرح بیمه برای فیلتر کردن">
                        <option value="">همه طرح‌ها</option>
                        @foreach (var plan in Model.InsurancePlans)
                        {
                            <option value="@plan.InsurancePlanId" @(Model.InsurancePlanId == plan.InsurancePlanId ? "selected" : "")>
                                @plan.InsurancePlanName
                            </option>
                        }
                    </select>
                </div>

                <!-- Status Filter -->
                <div class="filter-group">
                    <label for="isActive" class="filter-label">وضعیت</label>
                    <select class="professional-select" id="isActive" name="isActive" aria-label="انتخاب وضعیت فعال/غیرفعال">
                        <option value="">همه وضعیت‌ها</option>
                        <option value="true" @(ViewBag.SelectedIsActive == true ? "selected" : "")>فعال</option>
                        <option value="false" @(ViewBag.SelectedIsActive == false ? "selected" : "")>غیرفعال</option>
                    </select>
                </div>

                <!-- Department Filter -->
                <div class="filter-group">
                    <label for="departmentId" class="filter-label">بخش</label>
                    <select class="professional-select" id="departmentId" name="departmentId" aria-label="انتخاب بخش برای فیلتر کردن">
                        <option value="">همه بخش‌ها</option>
                        @foreach (var dept in Model.Departments)
                        {
                            <option value="@dept.DepartmentId" @(Model.DepartmentId == dept.DepartmentId ? "selected" : "")>
                                @dept.Name
                            </option>
                        }
                    </select>
                </div>
            </div>

            <div class="filters-grid">
                <!-- Date Range Filter -->
                <div class="filter-group">
                    <label for="startDate" class="filter-label">تاریخ شروع از</label>
                    <input type="text" class="professional-input persian-datepicker" id="startDate" name="startDate" 
                           value="@ViewBag.SelectedStartDate" placeholder="تاریخ شروع" aria-label="تاریخ شروع برای فیلتر کردن">
                </div>

                <div class="filter-group">
                    <label for="endDate" class="filter-label">تاریخ شروع تا</label>
                    <input type="text" class="professional-input persian-datepicker" id="endDate" name="endDate" 
                           value="@ViewBag.SelectedEndDate" placeholder="تاریخ پایان" aria-label="تاریخ پایان برای فیلتر کردن">
                </div>

                <!-- Amount Range Filter -->
                <div class="filter-group">
                    <label for="minAmount" class="filter-label">حداقل مبلغ</label>
                    <input type="number" class="professional-input" id="minAmount" name="minAmount" 
                           value="@ViewBag.SelectedMinAmount" placeholder="حداقل مبلغ" aria-label="حداقل مبلغ برای فیلتر کردن">
                </div>

                <div class="filter-group">
                    <label for="maxAmount" class="filter-label">حداکثر مبلغ</label>
                    <input type="number" class="professional-input" id="maxAmount" name="maxAmount" 
                           value="@ViewBag.SelectedMaxAmount" placeholder="حداکثر مبلغ" aria-label="حداکثر مبلغ برای فیلتر کردن">
                </div>
            </div>

            <div class="filters-search-section">
                <!-- Search Term -->
                <div class="search-group">
                    <label for="searchTerm" class="filter-label">جستجو</label>
                    <div class="search-input-group">
                        <input type="text" class="professional-input" id="searchTerm" name="searchTerm" 
                               value="@ViewBag.SearchTerm" placeholder="جستجو در نام خدمت، طرح بیمه، کد خدمت..." aria-label="جستجو در نام خدمت، طرح بیمه، کد خدمت">
                        <button type="button" class="search-btn" onclick="performSearch()">
                            <i class="fas fa-search"></i>
                        </button>
                    </div>
                </div>

                <!-- Action Buttons -->
                <div class="filters-actions">
                    <button type="button" class="btn btn-professional-outline" onclick="clearFilters()">
                        <i class="fas fa-times me-2"></i>
                        پاک کردن
                    </button>
                    <button type="button" class="btn btn-professional-primary" onclick="applyFilters()">
                        <i class="fas fa-filter me-2"></i>
                        اعمال فیلتر
                    </button>
                </div>
            </div>
        </form>
    </div>
</div>

<style>
    /* Professional Filters Card */
    .professional-filters-card {
        background: #ffffff;
        border: 1px solid #e1e5e9;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        margin-bottom: 24px;
        overflow: hidden;
    }

    .filters-header {
        background: #f8f9fa;
        border-bottom: 1px solid #e1e5e9;
        padding: 16px 20px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .filters-title {
        display: flex;
        align-items: center;
        font-weight: 600;
        color: #495057;
        font-size: 16px;
    }

    .filters-title i {
        margin-left: 8px;
        color: #6c757d;
    }

    .filters-content {
        padding: 24px;
    }

    .filters-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 20px;
        margin-bottom: 24px;
    }

    .filter-group {
        display: flex;
        flex-direction: column;
    }

    .filter-label {
        font-weight: 500;
        color: #495057;
        margin-bottom: 8px;
        font-size: 14px;
    }

    .professional-select,
    .professional-input {
        border: 1px solid #d1d5db;
        border-radius: 6px;
        padding: 10px 12px;
        font-size: 14px;
        transition: all 0.2s ease;
        background: #ffffff;
    }

    .professional-select:focus,
    .professional-input:focus {
        outline: none;
        border-color: #3b82f6;
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
    }

    .filters-search-section {
        display: flex;
        justify-content: space-between;
        align-items: end;
        gap: 20px;
        padding-top: 20px;
        border-top: 1px solid #e1e5e9;
    }

    .search-group {
        flex: 1;
        max-width: 400px;
    }

    .search-input-group {
        position: relative;
        display: flex;
    }

    .search-input-group .professional-input {
        flex: 1;
        padding-right: 45px;
    }

    .search-btn {
        position: absolute;
        right: 8px;
        top: 50%;
        transform: translateY(-50%);
        background: #3b82f6;
        border: none;
        color: white;
        width: 32px;
        height: 32px;
        border-radius: 4px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: background-color 0.2s ease;
    }

    .search-btn:hover {
        background: #2563eb;
    }

    .filters-actions {
        display: flex;
        gap: 12px;
    }

    /* Professional Buttons */
    .btn-professional-primary {
        background: #3b82f6;
        border: 1px solid #3b82f6;
        color: white;
        padding: 10px 20px;
        border-radius: 6px;
        font-weight: 500;
        font-size: 14px;
        transition: all 0.2s ease;
        cursor: pointer;
    }

    .btn-professional-primary:hover {
        background: #2563eb;
        border-color: #2563eb;
        color: white;
    }

    .btn-professional-outline {
        background: transparent;
        border: 1px solid #d1d5db;
        color: #6b7280;
        padding: 10px 20px;
        border-radius: 6px;
        font-weight: 500;
        font-size: 14px;
        transition: all 0.2s ease;
        cursor: pointer;
    }

    .btn-professional-outline:hover {
        background: #f9fafb;
        border-color: #9ca3af;
        color: #374151;
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .filters-grid {
            grid-template-columns: 1fr;
        }
        
        .filters-search-section {
            flex-direction: column;
            align-items: stretch;
        }
        
        .filters-actions {
            justify-content: stretch;
        }
        
        .filters-actions .btn {
            flex: 1;
        }
    }
</style>

<script>
    // Professional Filters JavaScript
    function initializeProfessionalFilters() {
        if (typeof jQuery !== 'undefined' && typeof $ !== 'undefined') {
            $(document).ready(function() {
                // Initialize Persian date picker
                $('.persian-datepicker').persianDatepicker({
                    format: 'YYYY/MM/DD',
                    autoClose: true,
                    initialValue: false,
                    observer: true
                });

                // Auto-apply filters with debounce
                let filterTimeout;
                $('.professional-select, .professional-input').on('change input', function() {
                    clearTimeout(filterTimeout);
                    filterTimeout = setTimeout(() => {
                        applyFiltersProfessionally();
                    }, 500);
                });

                // Toggle filters visibility
                window.toggleFilters = function() {
                    const content = $('#filtersContent');
                    const icon = $('#filtersToggleIcon');
                    
                    if (content.is(':visible')) {
                        content.slideUp(300);
                        icon.removeClass('fa-chevron-up').addClass('fa-chevron-down');
                    } else {
                        content.slideDown(300);
                        icon.removeClass('fa-chevron-down').addClass('fa-chevron-up');
                    }
                };

                // Clear filters function
                window.clearFilters = function() {
                    $('#filterForm')[0].reset();
                    applyFiltersProfessionally();
                    
                    if (typeof window.MedicalUI !== 'undefined') {
                        window.MedicalUI.showSuccess('فیلترها پاک شدند');
                    }
                };

                // Apply filters professionally
                window.applyFiltersProfessionally = function() {
                    console.log('🏥 PROFESSIONAL: Applying filters');
                    
                    try {
                        // Show loading state
                        showLoadingState();
                        
                        // Get form data
                        const formData = $('#filterForm').serialize();
                        
                        // Make AJAX request with professional error handling
                        $.ajax({
                            url: '/Admin/SupplementaryTariff/GetTariffsTable',
                            type: 'GET',
                            data: formData,
                            timeout: 10000,
                            success: function(response) {
                                console.log('🏥 PROFESSIONAL: Filters applied successfully');
                                
                                // Update table content with animation
                                $('#tableHost').fadeOut(200, function() {
                                    $(this).html(response).fadeIn(300);
                                });
                                
                                hideLoadingState();
                                showSuccessMessage('فیلترها با موفقیت اعمال شد');
                            },
                            error: function(xhr, status, error) {
                                console.error('🏥 PROFESSIONAL: Error applying filters:', error);
                                
                                hideLoadingState();
                                showErrorMessage('خطا در اعمال فیلترها: ' + error);
                            }
                        });
                        
                    } catch (error) {
                        console.error('🏥 PROFESSIONAL: Error in applyFiltersProfessionally:', error);
                        hideLoadingState();
                        showErrorMessage('خطا در اعمال فیلترها: ' + error.message);
                    }
                };

                // Perform search
                window.performSearch = function() {
                    applyFiltersProfessionally();
                };

                // Apply filters
                window.applyFilters = function() {
                    applyFiltersProfessionally();
                };

                // Export results function
                window.exportResults = function() {
                    const form = $('#filterForm');
                    $('<input>').attr({
                        type: 'hidden',
                        name: 'export',
                        value: 'true'
                    }).appendTo(form);
                    
                    form.submit();
                };

                // Loading state functions
                function showLoadingState() {
                    $('#tableHost').attr('aria-busy', 'true');
                    $('#tableSkeleton').removeClass('d-none');
                }

                function hideLoadingState() {
                    $('#tableHost').attr('aria-busy', 'false');
                    $('#tableSkeleton').addClass('d-none');
                }

                function showSuccessMessage(message) {
                    if (typeof window.MedicalUI !== 'undefined' && window.MedicalUI.showSuccess) {
                        window.MedicalUI.showSuccess(message);
                    } else {
                        console.log('Success:', message);
                    }
                }

                function showErrorMessage(message) {
                    if (typeof window.MedicalUI !== 'undefined' && window.MedicalUI.showError) {
                        window.MedicalUI.showError(message);
                    } else {
                        console.error('Error:', message);
                    }
                }
            });
        } else {
            // Retry after a short delay
            setTimeout(initializeProfessionalFilters, 100);
        }
    }
    
    // Start initialization
    initializeProfessionalFilters();
</script>
