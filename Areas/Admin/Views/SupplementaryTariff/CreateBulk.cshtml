@model ClinicApp.ViewModels.Insurance.Supplementary.BulkSupplementaryTariffViewModel
@{
    ViewBag.Title = "ایجاد تعرفه گروهی بیمه تکمیلی";
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
}

<div class="container-fluid">
    <!-- Header Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card border-0 shadow-sm">
                <div class="card-header bg-primary text-white">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h4 class="mb-0">
                                <i class="fas fa-layer-group me-2"></i>
                                ایجاد تعرفه گروهی بیمه تکمیلی
                            </h4>
                            <p class="mb-0 mt-1">ایجاد تعرفه برای خدمات انتخاب شده به صورت گروهی</p>
                        </div>
                        <div>
                            <a href="@Url.Action("Index", "SupplementaryTariff")" class="btn btn-outline-light">
                                <i class="fas fa-arrow-right me-1"></i>
                                بازگشت به لیست
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Form -->
    <div class="row">
        <div class="col-12">
            <form id="bulkTariffForm" method="post" action="@Url.Action("CreateBulk", "SupplementaryTariff")" novalidate>
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true, "", new { @class = "alert alert-danger", @id = "validationSummary" })
                
                <!-- Progress Bar -->
                <div class="card mb-4">
                    <div class="card-body">
                        <div class="progress" style="height: 25px;">
                            <div class="progress-bar progress-bar-striped progress-bar-animated" 
                                 role="progressbar" 
                                 style="width: 0%" 
                                 aria-valuenow="0" 
                                 aria-valuemin="0" 
                                 aria-valuemax="100"
                                 id="progressBar">
                                آماده برای شروع
                            </div>
                        </div>
                        <div class="mt-2">
                            <small class="text-muted">
                                <i class="fas fa-info-circle me-1"></i>
                                پیشرفت: <span id="progressText">0%</span> - <span id="currentStep">آماده</span>
                            </small>
                        </div>
                    </div>
                </div>

                <!-- Step 1: Insurance Selection -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="fas fa-shield-alt me-2"></i>
                            مرحله 1: انتخاب بیمه‌ها
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="PrimaryInsurancePlanId" class="form-label">
                                        <i class="fas fa-hospital me-1"></i>
                                        بیمه پایه *
                                    </label>
                                    @Html.DropDownListFor(m => m.PrimaryInsurancePlanId, 
                                        new SelectList(Model.PrimaryInsurancePlans, "InsurancePlanId", "Name"), 
                                        "انتخاب بیمه پایه", 
                                        new { @class = "form-select", @required = "required", @id = "PrimaryInsurancePlanId" })
                                    @Html.ValidationMessageFor(m => m.PrimaryInsurancePlanId, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="InsurancePlanId" class="form-label">
                                        <i class="fas fa-plus-circle me-1"></i>
                                        طرح بیمه تکمیلی *
                                    </label>
                                    @Html.DropDownListFor(m => m.InsurancePlanId, 
                                        new SelectList(Model.SupplementaryInsurancePlans, "InsurancePlanId", "Name"), 
                                        "انتخاب طرح بیمه تکمیلی", 
                                        new { @class = "form-select", @required = "required", @id = "InsurancePlanId" })
                                    @Html.ValidationMessageFor(m => m.InsurancePlanId, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Note: Steps 2 and 3 (Department and Category Selection) have been replaced by Cascade Selection below -->

                <!-- Step 4: Coverage Settings -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="fas fa-percentage me-2"></i>
                            مرحله 4: تنظیمات پوشش
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="SupplementaryCoveragePercent" class="form-label">
                                        <i class="fas fa-percentage me-1"></i>
                                        درصد پوشش بیمه تکمیلی *
                                    </label>
                                    @Html.TextBoxFor(m => m.SupplementaryCoveragePercent, 
                                        new { @class = "form-control", @type = "number", @step = "0.01", @min = "0", @max = "100", @required = "required", @id = "SupplementaryCoveragePercent", @placeholder = "مثال: 90.50" })
                                    @Html.ValidationMessageFor(m => m.SupplementaryCoveragePercent, "", new { @class = "text-danger" })
                                    <div class="form-text">درصد پوشش بیمه تکمیلی (0-100)</div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="Priority" class="form-label">
                                        <i class="fas fa-sort-numeric-up me-1"></i>
                                        اولویت تعرفه *
                                    </label>
                                    @Html.TextBoxFor(m => m.Priority, 
                                        new { @class = "form-control", @type = "number", @min = "1", @max = "10", @required = "required", @id = "Priority" })
                                    @Html.ValidationMessageFor(m => m.Priority, "", new { @class = "text-danger" })
                                    <div class="form-text">اولویت تعرفه (1-10، 1 بالاترین اولویت)</div>
                                        </div>
                                    </div>
                        </div>
                    </div>
                </div>

                <!-- Insurance Information Display -->
                <div id="insuranceInfoDisplay" class="mb-4">
                    <!-- Insurance plan information will be displayed here -->
                </div>

                <!-- Cascade Selection Section -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="fas fa-sitemap me-2"></i>
                            انتخاب خدمات (Cascade Selection)
                        </h5>
                    </div>
                    <div class="card-body">
                        <!-- Step 1: Department Selection -->
                        <div class="row mb-4">
                            <div class="col-12">
                                <h6 class="text-primary mb-3">
                                    <i class="fas fa-building me-2"></i>
                                    مرحله 1: انتخاب دپارتمان
                                </h6>
                                <div class="row" id="departmentSelection">
                                    <!-- Departments will be loaded here -->
                                </div>
                            </div>
                        </div>

                        <!-- Step 2: Category Selection -->
                        <div class="row mb-4" id="categorySelectionSection" style="display: none;">
                            <div class="col-12">
                                <h6 class="text-success mb-3">
                                    <i class="fas fa-tags me-2"></i>
                                    مرحله 2: انتخاب سرفصل‌های خدمات
                                </h6>
                                <div class="row" id="categorySelection">
                                    <div class="col-12">
                                        <div class="alert alert-info">
                                            <i class="fas fa-info-circle me-2"></i>
                                            ابتدا دپارتمان را انتخاب کنید تا سرفصل‌های آن نمایش داده شوند
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Step 3: Services Preview -->
                        <div class="row mb-4" id="servicesPreviewSection" style="display: none;">
                            <div class="col-12">
                                <h6 class="text-warning mb-3">
                                    <i class="fas fa-list me-2"></i>
                                    مرحله 3: پیش‌نمایش خدمات
                                </h6>
                                <div class="row mb-3">
                                    <div class="col-md-6">
                                        <div class="alert alert-success">
                                            <i class="fas fa-check-circle me-2"></i>
                                            <strong>تعداد کل خدمات:</strong> <span id="totalServicesCount">0</span>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="alert alert-warning">
                                            <i class="fas fa-exclamation-triangle me-2"></i>
                                            <strong>توجه:</strong> تمام خدمات انتخاب شده برای ایجاد تعرفه استفاده خواهند شد
                                        </div>
                                    </div>
                                </div>
                                
                                <div id="servicesList" class="table-responsive">
                                    <!-- Services will be loaded here -->
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Preview Section -->
                <div class="card mb-4" id="previewSection" style="display: none;">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="fas fa-eye me-2"></i>
                            پیش‌نمایش تعرفه‌ها
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-3">
                                <div class="text-center">
                                    <div class="h4 text-primary" id="previewTotalServices">0</div>
                                    <small class="text-muted">تعداد خدمات</small>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="text-center">
                                    <div class="h4 text-success" id="previewEstimatedTariffs">0</div>
                                    <small class="text-muted">تعرفه‌های تخمینی</small>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="text-center">
                                    <div class="h4 text-info" id="previewCoveragePercent">0%</div>
                                    <small class="text-muted">درصد پوشش</small>
                        </div>
                                </div>
                            <div class="col-md-3">
                                <div class="text-center">
                                    <div class="h4 text-warning" id="previewEstimatedTime">0 ثانیه</div>
                                    <small class="text-muted">زمان تخمینی</small>
                            </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Submit Section -->
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <button type="submit" class="btn btn-primary btn-lg" id="submitBtn">
                                    <i class="fas fa-layer-group me-2"></i>
                                    ایجاد تعرفه گروهی
                                </button>
                                <button type="button" class="btn btn-outline-secondary btn-lg ms-2" id="previewBtn">
                                    <i class="fas fa-eye me-2"></i>
                                    پیش‌نمایش
                                </button>
                            </div>
                            <div>
                                <small class="text-muted">
                                    <i class="fas fa-info-circle me-1"></i>
                                    تمامی محاسبات بر اساس قیمت خدمات انجام می‌شود
                                </small>
                            </div>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Loading Overlay -->
<div id="loadingOverlay" class="d-none position-fixed top-0 start-0 w-100 h-100 d-flex align-items-center justify-content-center" style="background-color: rgba(0,0,0,0.5); z-index: 9999;">
    <div class="card">
        <div class="card-body text-center">
                <div class="spinner-border text-primary mb-3" role="status">
                    <span class="visually-hidden">در حال پردازش...</span>
                </div>
            <h5>در حال ایجاد تعرفه‌ها...</h5>
                <p class="text-muted">لطفاً صبر کنید</p>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Initialize form
            initializeBulkForm();
            
            // Event handlers
            setupEventHandlers();
            
            // Initialize insurance info display
            updateInsuranceInfo();
            
            // Form validation
            setupFormValidation();
        });

        function initializeBulkForm() {
            console.log('🏥 MEDICAL: Initializing bulk form');
            
            // Set default values
            $('#SupplementaryCoveragePercent').val('90');
            $('#Priority').val('5');
            
            // Update progress
            updateProgress(0, 'آماده برای شروع');
        }

        function setupEventHandlers() {
            // Department selection
            $('#selectAllDepartments').on('click', function() {
                $('.department-checkbox').prop('checked', true);
                updatePreview();
            });

            $('#deselectAllDepartments').on('click', function() {
                $('.department-checkbox').prop('checked', false);
                updatePreview();
            });

            // Category selection
            $('#selectAllCategories').on('click', function() {
                $('.category-checkbox').prop('checked', true);
                updatePreview();
            });

            $('#deselectAllCategories').on('click', function() {
                $('.category-checkbox').prop('checked', false);
                updatePreview();
            });

            // Form changes
            $('.department-checkbox, .category-checkbox, #SupplementaryCoveragePercent, #Priority').on('change', function() {
                updatePreview();
            });

            // Preview button
            $('#previewBtn').on('click', function() {
                updatePreview();
                $('#previewSection').show();
            });

            // Form submission
            $('#bulkTariffForm').on('submit', function(e) {
                e.preventDefault();
                submitBulkForm();
            });
        }

        // 🔧 MEDICAL: Update insurance information and auto-fill coverage percent
        function updateInsuranceInfo() {
            const primaryPlanId = $('#PrimaryInsurancePlanId').val();
            const supplementaryPlanId = $('#InsurancePlanId').val();
            
            // Auto-fill supplementary coverage percent to 100% when supplementary insurance is selected
            if (supplementaryPlanId && supplementaryPlanId !== '') {
                $('#SupplementaryCoveragePercent').val('100');
                $('#SupplementaryCoveragePercent').addClass('is-valid');
            }
            
            // Display insurance plan information
            displayInsurancePlanInfo(primaryPlanId, supplementaryPlanId);
        }
        
        // 🔧 MEDICAL: Display insurance plan information
        function displayInsurancePlanInfo(primaryPlanId, supplementaryPlanId) {
            // Clear previous info
            $('#insuranceInfoDisplay').empty();
            
            if (primaryPlanId && primaryPlanId !== '') {
                // Find primary plan info
                const primaryPlan = window.primaryInsurancePlans?.find(p => p.InsurancePlanId == primaryPlanId);
                if (primaryPlan) {
                    const primaryInfo = `
                        <div class="alert alert-info mb-3">
                            <h6><i class="fas fa-shield-alt me-2"></i>بیمه پایه: ${primaryPlan.InsurancePlanName}</h6>
                            <div class="row">
                                <div class="col-md-6">
                                    <small><strong>درصد پوشش:</strong> ${primaryPlan.CoveragePercent || 70}%</small>
                                </div>
                                <div class="col-md-6">
                                    <small><strong>فرانشیز:</strong> ${(primaryPlan.Deductible || 0).toLocaleString()} ریال</small>
                                </div>
                            </div>
                        </div>
                    `;
                    $('#insuranceInfoDisplay').append(primaryInfo);
                }
            }
            
            if (supplementaryPlanId && supplementaryPlanId !== '') {
                // Find supplementary plan info
                const supplementaryPlan = window.supplementaryInsurancePlans?.find(p => p.InsurancePlanId == supplementaryPlanId);
                if (supplementaryPlan) {
                    const supplementaryInfo = `
                        <div class="alert alert-success mb-3">
                            <h6><i class="fas fa-plus-circle me-2"></i>بیمه تکمیلی: ${supplementaryPlan.InsurancePlanName}</h6>
                            <div class="row">
                                <div class="col-md-6">
                                    <small><strong>درصد پوشش پیش‌فرض:</strong> 100%</small>
                                </div>
                                <div class="col-md-6">
                                    <small><strong>قابل تنظیم:</strong> بله</small>
                                </div>
                            </div>
                        </div>
                    `;
                    $('#insuranceInfoDisplay').append(supplementaryInfo);
                }
            }
        }

        function setupFormValidation() {
            // Real-time validation
            $('#PrimaryInsurancePlanId, #InsurancePlanId').on('change', function() {
                validateForm();
                updateInsuranceInfo();
            });
            
            $('#SupplementaryCoveragePercent').on('input', function() {
                const value = parseFloat($(this).val());
                const valueStr = $(this).val().toString();
                
                // Remove previous validation classes
                $(this).removeClass('is-invalid is-valid');
                
                if (isNaN(value)) {
                    $(this).addClass('is-invalid');
                } else if (value < 0 || value > 100) {
                    $(this).addClass('is-invalid');
                } else {
                    // Check decimal places
                    const decimalIndex = valueStr.indexOf('.');
                    if (decimalIndex !== -1 && valueStr.length - decimalIndex - 1 > 2) {
                        $(this).addClass('is-invalid');
                    } else {
                        $(this).addClass('is-valid');
                    }
                }
                updatePreview();
            });

            // 🔧 MEDICAL: Cascade selection event handlers
            $(document).on('change', '.department-checkbox', function() {
                console.log('🏥 MEDICAL: Department selection changed');
                const selectedDepartments = $('.department-checkbox:checked');
                
                if (selectedDepartments.length > 0) {
                    // Load categories for first selected department
                    const firstDeptId = selectedDepartments.first().val();
                    loadCategories(firstDeptId);
                } else {
                    // Hide categories and services sections
                    $('#categorySelectionSection').hide();
                    $('#servicesPreviewSection').hide();
                }
            });

            $(document).on('change', '.category-checkbox', function() {
                console.log('🏥 MEDICAL: Category selection changed');
                loadServices();
            });

            // 🔧 MEDICAL: Load departments on form initialization
            console.log('🏥 MEDICAL: Form ready, loading departments');
            setTimeout(loadDepartments, 1000); // Delay to ensure form is fully loaded
        }

        function validateForm() {
            const errors = [];
            
            // 🔒 CRITICAL: Required fields validation
            if (!$('#PrimaryInsurancePlanId').val()) {
                errors.push('انتخاب بیمه پایه الزامی است');
            }
            
            if (!$('#InsurancePlanId').val()) {
                errors.push('انتخاب طرح بیمه تکمیلی الزامی است');
            }
            
            // 🔒 CRITICAL: Department selection validation
            const selectedDepartments = $('.department-checkbox:checked').length;
            if (selectedDepartments === 0) {
                errors.push('انتخاب حداقل یک دپارتمان الزامی است');
            }
            else if (selectedDepartments > 10) {
                errors.push('حداکثر 10 دپارتمان قابل انتخاب است');
            }
            
            // 🔒 CRITICAL: Category selection validation
            const selectedCategories = $('.category-checkbox:checked').length;
            if (selectedCategories === 0) {
                errors.push('انتخاب حداقل یک سرفصل الزامی است');
            }
            else if (selectedCategories > 20) {
                errors.push('حداکثر 20 سرفصل قابل انتخاب است');
            }
            
            // 🔒 CRITICAL: Coverage percent validation
            const coveragePercent = parseFloat($('#SupplementaryCoveragePercent').val());
            if (isNaN(coveragePercent)) {
                errors.push('درصد پوشش باید عدد باشد');
            }
            else if (coveragePercent < 0 || coveragePercent > 100) {
                errors.push('درصد پوشش باید بین 0 تا 100 باشد');
            }
            else {
                // Check decimal places using string method
                const coverageStr = $('#SupplementaryCoveragePercent').val().toString();
                const decimalIndex = coverageStr.indexOf('.');
                if (decimalIndex !== -1 && coverageStr.length - decimalIndex - 1 > 2) {
                    errors.push('درصد پوشش باید حداکثر 2 رقم اعشار داشته باشد');
                }
            }
            
            // 🔒 CRITICAL: Priority validation
            const priority = parseInt($('#Priority').val());
            if (isNaN(priority)) {
                errors.push('اولویت باید عدد باشد');
            }
            else if (priority < 1 || priority > 10) {
                errors.push('اولویت باید بین 1 تا 10 باشد');
            }
            
            // 🔒 CRITICAL: Business logic validation
            if (selectedDepartments > 0 && selectedCategories > 0) {
                const estimatedServices = selectedDepartments * selectedCategories * 10; // Rough estimate
                if (estimatedServices > 1000) {
                    errors.push(`تعداد خدمات تخمینی (${estimatedServices}) از حد مجاز (1000) بیشتر است. لطفاً انتخاب‌های خود را محدود کنید.`);
                }
            }
            
            return errors;
        }

        function updatePreview() {
            const selectedDepartments = $('.department-checkbox:checked').length;
            const selectedCategories = $('.category-checkbox:checked').length;
            const coveragePercent = $('#SupplementaryCoveragePercent').val() || 90;
            
            // Estimate services count (simplified calculation)
            const estimatedServices = selectedDepartments * selectedCategories * 10; // Rough estimate
            
            // Update preview
            $('#previewTotalServices').text(estimatedServices);
            $('#previewEstimatedTariffs').text(estimatedServices);
            $('#previewCoveragePercent').text(coveragePercent + '%');
            $('#previewEstimatedTime').text(Math.ceil(estimatedServices / 10) + ' ثانیه');
            
            // Update progress
            updateProgress(75, 'آماده برای ارسال');
        }

        function updateProgress(percentage, status) {
            $('#progressBar').css('width', percentage + '%').attr('aria-valuenow', percentage);
            $('#progressText').text(percentage + '%');
            $('#currentStep').text(status);
        }

        async function submitBulkForm() {
            try {
                console.log('🏥 MEDICAL: Starting bulk form submission');
                
                // 🔧 DEBUG: Test basic functionality
                console.log('🏥 MEDICAL: Testing basic functionality');
                console.log('🏥 MEDICAL: PrimaryInsurancePlanId:', $('#PrimaryInsurancePlanId').val());
                console.log('🏥 MEDICAL: InsurancePlanId:', $('#InsurancePlanId').val());
                console.log('🏥 MEDICAL: SelectedDepartments:', $('.department-checkbox:checked').length);
                console.log('🏥 MEDICAL: SelectedCategories:', $('.category-checkbox:checked').length);
                
                // Validate form
                const errors = validateForm();
                if (errors.length > 0) {
                    console.log('🏥 MEDICAL: Validation errors:', errors);
                    showErrors(errors);
                    return;
                }
                
                // Show loading
            $('#loadingOverlay').removeClass('d-none');
                $('#submitBtn').prop('disabled', true).html('<i class="fas fa-spinner fa-spin me-2"></i>در حال پردازش...');
                
                // Update progress
                updateProgress(25, 'ارسال درخواست');
                
                // Get form data
                const formData = getFormData();
                console.log('🏥 MEDICAL: Form data:', formData);
                
                // Submit form
                console.log('🏥 MEDICAL: Submitting to /Admin/SupplementaryTariff/CreateBulkPost');
                const response = await fetch('/Admin/SupplementaryTariff/CreateBulkPost', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify(formData)
                });
                
                updateProgress(50, 'پردازش درخواست');
                
                console.log('🏥 MEDICAL: Response status:', response.status);
                console.log('🏥 MEDICAL: Response ok:', response.ok);
                
                if (response.ok) {
                    const result = await response.json();
                    console.log('🏥 MEDICAL: Response data:', result);
                    updateProgress(100, 'تکمیل موفق');
                    
                    if (result.success) {
                        showSuccess(result.message);
                        setTimeout(() => {
                            window.location.href = '/Admin/SupplementaryTariff/Index';
                        }, 2000);
                    } else {
                        showErrors([result.message]);
                    }
                } else {
                    const errorText = await response.text();
                    console.error('🏥 MEDICAL: Response error:', errorText);
                    throw new Error('خطا در ارسال درخواست: ' + response.status);
                }
                
            } catch (error) {
                console.error('🏥 MEDICAL: Bulk form submission error', error);
                showErrors(['خطا در ارسال درخواست: ' + error.message]);
            } finally {
                // Hide loading
                $('#loadingOverlay').addClass('d-none');
                $('#submitBtn').prop('disabled', false).html('<i class="fas fa-layer-group me-2"></i>ایجاد تعرفه گروهی');
            }
        }

        function getFormData() {
            // 🔧 MEDICAL: Get selected departments and categories from cascade selection
            const selectedDepartments = $('.department-checkbox:checked').map(function() { 
                return parseInt($(this).val()); 
            }).get();
            
            const selectedCategories = $('.category-checkbox:checked').map(function() { 
                return parseInt($(this).val()); 
            }).get();
            
            console.log('🏥 MEDICAL: Form data - Departments:', selectedDepartments, 'Categories:', selectedCategories);
            
            return {
                PrimaryInsurancePlanId: parseInt($('#PrimaryInsurancePlanId').val()),
                InsurancePlanId: parseInt($('#InsurancePlanId').val()),
                SelectedDepartmentIds: selectedDepartments,
                SelectedServiceCategoryIds: selectedCategories,
                SupplementaryCoveragePercent: parseFloat($('#SupplementaryCoveragePercent').val()),
                Priority: parseInt($('#Priority').val()),
                IsActive: true
            };
        }

        function showErrors(errors) {
            // Clear previous messages
            $('#validationSummary').empty().hide();
            
            // Show each error with toastr
            errors.forEach((error, index) => {
                setTimeout(() => {
                    toastr.error(error, 'خطا در اعتبارسنجی', {
                        timeOut: 5000,
                        positionClass: 'toast-top-right',
                        preventDuplicates: true,
                        progressBar: true,
                        closeButton: true
                    });
                }, index * 100); // Stagger the toasts
            });
            
            // Also show in validation summary for reference
            const errorHtml = '<div class="alert alert-danger"><ul class="mb-0">' + 
                errors.map(error => '<li>' + error + '</li>').join('') + 
                '</ul></div>';
            $('#validationSummary').html(errorHtml).show();
        }

        function showSuccess(message) {
            // Clear previous messages
            $('#validationSummary').empty().hide();
            
            // Show success with toastr
            toastr.success(message, 'عملیات موفق', {
                timeOut: 3000,
                positionClass: 'toast-top-right',
                preventDuplicates: true,
                progressBar: true,
                closeButton: true
            });
            
            // Also show in validation summary
            const successHtml = '<div class="alert alert-success"><i class="fas fa-check-circle me-2"></i>' + message + '</div>';
            $('#validationSummary').html(successHtml).show();
        }

        // 🔧 MEDICAL: Load departments for cascade selection
        async function loadDepartments() {
            try {
                console.log('🏥 MEDICAL: Loading departments');
                
                const response = await fetch('/Admin/SupplementaryTariff/GetDepartments', {
                    method: 'GET',
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                });
                
                if (response.ok) {
                    const departments = await response.json();
                    console.log('🏥 MEDICAL: Departments result:', departments);
                    
                    if (departments && departments.length > 0) {
                        displayDepartments(departments);
                    } else {
                        $('#departmentSelection').html('<div class="alert alert-warning"><i class="fas fa-exclamation-triangle me-2"></i>هیچ دپارتمانی یافت نشد.</div>');
                    }
                } else {
                    throw new Error('خطا در بارگذاری دپارتمان‌ها');
                }
                
            } catch (error) {
                console.error('🏥 MEDICAL: Error loading departments:', error);
                $('#departmentSelection').html('<div class="alert alert-danger"><i class="fas fa-exclamation-circle me-2"></i>خطا در بارگذاری دپارتمان‌ها: ' + error.message + '</div>');
            }
        }

        // 🔧 MEDICAL: Load categories for selected department
        async function loadCategories(departmentId) {
            try {
                console.log('🏥 MEDICAL: Loading categories for department:', departmentId);
                
                const response = await fetch('/Admin/SupplementaryTariff/GetCategories?departmentId=' + departmentId, {
                    method: 'GET',
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                });
                
                if (response.ok) {
                    const result = await response.json();
                    console.log('🏥 MEDICAL: Categories result:', result);
                    
                    if (result.success && result.data && result.data.categories) {
                        displayCategories(result.data.categories);
                        $('#categorySelectionSection').show();
                    } else {
                        $('#categorySelection').html('<div class="alert alert-warning"><i class="fas fa-exclamation-triangle me-2"></i>هیچ سرفصلی برای این دپارتمان یافت نشد.</div>');
                        $('#categorySelectionSection').show();
                    }
                } else {
                    throw new Error('خطا در بارگذاری سرفصل‌ها');
                }
                
            } catch (error) {
                console.error('🏥 MEDICAL: Error loading categories:', error);
                $('#categorySelection').html('<div class="alert alert-danger"><i class="fas fa-exclamation-circle me-2"></i>خطا در بارگذاری سرفصل‌ها: ' + error.message + '</div>');
                $('#categorySelectionSection').show();
            }
        }

        // 🔧 MEDICAL: Load services for selected categories
        async function loadServices() {
            try {
                console.log('🏥 MEDICAL: Loading services for selected categories');
                
                const selectedDepartments = $('.department-checkbox:checked').map(function() { 
                    return parseInt($(this).val()); 
                }).get();
                
                const selectedCategories = $('.category-checkbox:checked').map(function() { 
                    return parseInt($(this).val()); 
                }).get();
                
                if (selectedDepartments.length === 0 || selectedCategories.length === 0) {
                    $('#servicesPreviewSection').hide();
                    return;
                }
                
                // Show loading
                $('#servicesPreviewSection').show();
                $('#servicesList').html('<div class="text-center"><i class="fas fa-spinner fa-spin me-2"></i>در حال بارگذاری خدمات...</div>');
                
                const formData = {
                    SelectedDepartmentIds: selectedDepartments,
                    SelectedServiceCategoryIds: selectedCategories,
                    PrimaryInsurancePlanId: parseInt($('#PrimaryInsurancePlanId').val()),
                    InsurancePlanId: parseInt($('#InsurancePlanId').val()),
                    SupplementaryCoveragePercent: parseFloat($('#SupplementaryCoveragePercent').val()),
                    Priority: parseInt($('#Priority').val()),
                    IsActive: true
                };
                
                // Call server to get services
                const response = await fetch('/Admin/SupplementaryTariff/GetServicesPreview', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify(formData)
                });
                
                if (response.ok) {
                    const result = await response.json();
                    console.log('🏥 MEDICAL: Services preview result:', result);
                    
                    if (result.success && result.data && result.data.services && result.data.services.length > 0) {
                        displayServicesPreview(result.data.services);
                        $('#totalServicesCount').text(result.data.services.length);
                        $('#previewTotalServices').text(result.data.services.length);
                        updatePreview();
                    } else {
                        $('#servicesList').html('<div class="alert alert-warning"><i class="fas fa-exclamation-triangle me-2"></i>هیچ خدمتی یافت نشد. لطفاً سرفصل‌های بیشتری انتخاب کنید.</div>');
                        $('#totalServicesCount').text('0');
                        $('#previewTotalServices').text('0');
                    }
                } else {
                    throw new Error('خطا در بارگذاری خدمات');
                }
                
            } catch (error) {
                console.error('🏥 MEDICAL: Error loading services:', error);
                $('#servicesList').html('<div class="alert alert-danger"><i class="fas fa-exclamation-circle me-2"></i>خطا در بارگذاری خدمات: ' + error.message + '</div>');
            }
        }

        // 🔧 MEDICAL: Display services preview
        function displayServicesPreview(services) {
            let html = '<table class="table table-striped table-hover">';
            html += '<thead class="table-dark">';
            html += '<tr><th>کد خدمت</th><th>نام خدمت</th><th>دپارتمان</th><th>سرفصل</th><th>قیمت (ریال)</th></tr>';
            html += '</thead><tbody>';
            
            services.forEach(service => {
                html += '<tr>';
                html += '<td><code>' + service.serviceCode + '</code></td>';
                html += '<td>' + service.title + '</td>';
                html += '<td>' + service.departmentName + '</td>';
                html += '<td>' + service.categoryName + '</td>';
                html += '<td class="text-end">' + formatCurrency(service.price) + '</td>';
                html += '</tr>';
            });
            
            html += '</tbody></table>';
            $('#servicesList').html(html);
        }

        // 🔧 MEDICAL: Display departments
        function displayDepartments(departments) {
            let html = '';
            departments.forEach(dept => {
                html += `
                    <div class="col-md-4 mb-3">
                        <div class="card h-100">
                            <div class="card-body">
                                <div class="form-check">
                                    <input class="form-check-input department-checkbox" type="checkbox" 
                                           value="${dept.DepartmentId}" id="dept_${dept.DepartmentId}">
                                    <label class="form-check-label" for="dept_${dept.DepartmentId}">
                                        <strong>${dept.Name}</strong>
                                        <br><small class="text-muted">دپارتمان درمانی</small>
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            });
            $('#departmentSelection').html(html);
        }

        // 🔧 MEDICAL: Display categories
        function displayCategories(categories) {
            let html = '';
            categories.forEach(cat => {
                html += `
                    <div class="col-md-6 mb-3">
                        <div class="card h-100">
                            <div class="card-body">
                                <div class="form-check">
                                    <input class="form-check-input category-checkbox" type="checkbox" 
                                           value="${cat.serviceCategoryId}" id="cat_${cat.serviceCategoryId}">
                                    <label class="form-check-label" for="cat_${cat.serviceCategoryId}">
                                        <strong>${cat.title}</strong>
                                        <br><small class="text-muted">${cat.description || ''}</small>
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            });
            $('#categorySelection').html(html);
        }

        // 🔧 MEDICAL: Format currency
        function formatCurrency(amount) {
            return new Intl.NumberFormat('fa-IR').format(amount) + ' ریال';
        }
    </script>
}