@model ClinicApp.ViewModels.Insurance.Supplementary.SupplementaryTariffCreateEditViewModel
@{
    ViewBag.Title = "ویرایش تعرفه بیمه تکمیلی - محیط درمانی (ClinicApp)";
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
}

@section Styles {
    <link href="~/Content/css/medical-environment-styles.css" rel="stylesheet" />
    <link href="~/Content/css/insurance/supplementary-tariff-views.css" rel="stylesheet" />
    <style>
        .medical-form {
            background: white;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            padding: 30px;
            margin-bottom: 30px;
        }

        .form-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px;
            border-radius: 15px 15px 0 0;
            margin: -30px -30px 30px -30px;
        }

        .form-header h2 {
            margin: 0;
            font-weight: 600;
        }

        .form-group {
            margin-bottom: 25px;
        }

        .form-group label {
            font-weight: 600;
            color: #333;
            margin-bottom: 8px;
            display: block;
        }

        .form-control {
            border-radius: 10px;
            border: 2px solid #e9ecef;
            padding: 12px 15px;
            transition: all 0.3s ease;
            font-size: 14px;
        }

            .form-control:focus {
                border-color: #667eea;
            box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
            }

            .form-control.is-invalid {
                border-color: #dc3545;
            box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25);
            }

            .form-control.is-valid {
                border-color: #28a745;
            box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.25);
        }
        
        .required-field::after {
            content: " *";
            color: #dc3545;
            font-weight: bold;
        }
        
        .form-help {
            font-size: 12px;
            color: #6c757d;
            margin-top: 5px;
        }

        .calculation-preview {
            background: #ffffff;
            border: 2px solid #2c3e50;
            border-radius: 10px;
            padding: 20px;
            margin: 20px 0;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        
        .calculation-preview h5 {
            color: #2c3e50;
            font-weight: bold;
            margin-bottom: 15px;
            text-align: center;
            border-bottom: 2px solid #3498db;
            padding-bottom: 10px;
        }
        
        .calculation-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px 0;
            border-bottom: 1px solid #ecf0f1;
            font-size: 14px;
        }
        
        .calculation-item:last-child {
            border-bottom: none;
            font-weight: bold;
            background: #ecf0f1;
            padding: 15px;
            border-radius: 5px;
            margin-top: 10px;
        }
        
        .calculation-item span:first-child {
            color: #2c3e50;
                font-weight: 600;
        }
        
        .calculation-item span:last-child {
            color: #e74c3c;
            font-weight: bold;
            font-size: 16px;
        }
        
        .calculation-item:last-child span:last-child {
            color: #27ae60;
            font-size: 18px;
        }
        
        .calculation-item span:last-child {
            font-family: 'Courier New', monospace;
            direction: ltr;
                text-align: left;
            min-width: 120px;
        }
        
        .btn-medical {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border: none;
            border-radius: 25px;
            color: white;
            padding: 12px 30px;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .btn-medical:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
            color: white;
        }

        .btn-secondary {
            background: #6c757d;
            border: none;
            border-radius: 25px;
            color: white;
            padding: 12px 30px;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .btn-secondary:hover {
            background: #5a6268;
            color: white;
        }

        .required-field {
            color: #dc3545;
        }

        .form-help {
            font-size: 12px;
            color: #6c757d;
            margin-top: 5px;
        }
    </style>
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="medical-form">
                <div class="form-header">
                    <h2>
                        <i class="fas fa-edit me-2"></i>
                        ویرایش تعرفه بیمه تکمیلی
                        <small class="badge bg-light text-dark ms-2" id="fieldCounter" aria-live="polite">0 از 12 فیلد تکمیل شده</small>
                    </h2>
                    <p class="mb-0 mt-2 opacity-75">
                        فرم حرفه‌ای ویرایش تعرفه بیمه تکمیلی برای محیط درمانی
                    </p>
                    
                    @Html.ValidationSummary(false, "", new { @class = "alert alert-danger", @role = "alert" })
                    <div class="alert alert-info mt-3">
                        <h6><i class="fas fa-info-circle me-2"></i>نحوه محاسبه بیمه تکمیلی:</h6>
                        <p class="mb-2">بیمه تکمیلی روی <strong>سهم باقی‌مانده بیمار</strong> پس از بیمه پایه اعمال می‌شود:</p>
                        <ul class="mb-0">
                            <li><strong>مثال:</strong> خدمت 1,000,000 ریال، بیمه پایه <span id="examplePrimaryPercent">70%</span> → سهم بیمار <span id="examplePatientShare">300,000 ریال</span></li>
                            <li><strong>بیمه تکمیلی <span id="exampleSupplementaryPercent">100%</span></strong> → پوشش کامل <span id="exampleSupplementaryCoverage">300,000 ریال</span> → پرداختی بیمار = <span id="exampleFinalShare">0 ریال</span></li>
                            <li><strong>بیمه تکمیلی 50%</strong> → پوشش 150,000 ریال → پرداختی بیمار = 150,000 ریال</li>
                        </ul>
                    </div>
                </div>

                @using (Html.BeginForm("Edit", "SupplementaryTariff", FormMethod.Post, new { @class = "medical-tariff-form", @id = "editTariffForm" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(m => m.InsuranceTariffId)
                    @Html.HiddenFor(m => m.ServiceId)

                    <!-- بخش انتخاب بیمه پایه - READ-ONLY در ویرایش -->
                    <div class="row mb-4">
                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(m => m.PrimaryInsurancePlanId, "بیمه پایه", new { @class = "form-label" })
                                <div class="form-control-plaintext bg-light p-3 rounded" style="border: 2px solid #e9ecef;">
                                    <div class="d-flex align-items-center">
                                        <i class="fas fa-lock text-muted me-2"></i>
                                        <div>
                                            <strong>@(Model?.PrimaryInsurancePlanName ?? "—")</strong>
                                            <small class="text-muted d-block">در ویرایش قابل تغییر نیست</small>
                                        </div>
                                    </div>
                                </div>
                                @Html.HiddenFor(m => m.PrimaryInsurancePlanId)
                                <div class="form-help" id="primaryInsuranceHelp">بیمه پایه بیمار (در ویرایش قابل تغییر نیست)</div>
                                
                                <!-- نمایش اطلاعات بیمه پایه انتخاب شده -->
                                <div id="primaryInsuranceInfo" class="alert alert-info mt-2" style="display: none;">
                                    <div class="row">
                                        <div class="col-md-6">
                                            <strong>درصد پوشش:</strong> <span id="primaryCoveragePercent">-</span>%
                            </div>
                                        <div class="col-md-6">
                                            <strong>فرانشیز:</strong> <span id="primaryDeductible">-</span> ریال
                            </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(m => m.InsurancePlanId, "طرح بیمه تکمیلی", new { @class = "form-label" })
                                <div class="form-control-plaintext bg-light p-3 rounded" style="border: 2px solid #e9ecef;">
                                    <div class="d-flex align-items-center">
                                        <i class="fas fa-lock text-muted me-2"></i>
                                        <div>
                                            <strong>@(Model?.InsurancePlanName ?? "—")</strong>
                                            <small class="text-muted d-block">در ویرایش قابل تغییر نیست</small>
                                        </div>
                                    </div>
                                </div>
                                @Html.HiddenFor(m => m.InsurancePlanId)
                                <div class="form-help">طرح بیمه تکمیلی (در ویرایش قابل تغییر نیست)</div>
                                
                                <!-- نمایش اطلاعات بیمه تکمیلی انتخاب شده -->
                                <div id="supplementaryInsuranceInfo" class="alert alert-warning mt-2" style="display: none;">
                            <div class="row">
                                        <div class="col-md-6">
                                            <strong>درصد پوشش:</strong> <span id="supplementaryCoveragePercent">-</span>%
                                </div>
                                        <div class="col-md-6">
                                            <strong>فرانشیز:</strong> <span id="supplementaryDeductible">-</span> ریال
                                        </div>
                                    </div>
                                </div>
                            </div>
                                </div>
                            </div>

                    <!-- بخش انتخاب دپارتمان و خدمت -->
                            <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(m => m.DepartmentId, "دپارتمان *", new { @class = "required-field" })
                                @if (Model.Departments != null && Model.Departments.Any())
                                {
                                    @Html.DropDownListFor(m => m.DepartmentId, new SelectList(Model.Departments, "Value", "Text"), "انتخاب دپارتمان", new { @class = "form-control", @id = "departmentId", @disabled = "disabled", @aria_readonly = "true" })
                                    @Html.HiddenFor(m => m.DepartmentId)
                                }
                                else
                                {
                                    <input type="text" class="form-control" value="—" readonly aria-readonly="true" />
                                    @Html.HiddenFor(m => m.DepartmentId)
                                }
                                @Html.ValidationMessageFor(m => m.DepartmentId, "", new { @class = "invalid-feedback" })
                                <div class="form-help">انتخاب دپارتمان</div>
                                </div>
                                </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(m => m.ServiceId, "خدمت *", new { @class = "required-field" })
                                <div class="form-control-plaintext" aria-readonly="true">
                                    <strong>@(Model?.ServiceName ?? "—")</strong>
                                    <small class="text-muted d-block">کد: @(Model?.ServiceCode ?? "—")</small>
                                </div>
                                @Html.ValidationMessageFor(m => m.ServiceId, "", new { @class = "invalid-feedback" })
                                <div class="form-help">خدمت انتخاب شده (غیرقابل تغییر در حالت ویرایش)</div>
                            </div>
                                </div>
                            </div>

                            <div class="row">
                        <div class="col-md-4">
                            <div class="form-group">
                                @Html.LabelFor(m => m.TariffPrice, "قیمت تعرفه (ریال) *", new { @class = "required-field", @id = "tariffPriceLabel" })
                                @Html.TextBoxFor(m => m.TariffPrice, new { @class = "form-control currency-input", @type = "number", @step = "1", @required = "required", @placeholder = "0", @id = "TariffPrice", @inputmode = "numeric", @aria_describedby = "tariffPriceHelp", @data_mask = "currency" })
                                @Html.ValidationMessageFor(m => m.TariffPrice, "", new { @class = "invalid-feedback" })
                                <div class="form-help" id="tariffPriceHelp">قیمت کل خدمت به ریال</div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                @Html.LabelFor(m => m.PatientShare, "سهم بیمار پس از بیمه پایه (قبل از تکمیلی) *", new { @class = "required-field", @id = "patientShareLabel" })
                                @Html.TextBoxFor(m => m.PatientShare, new { @class = "form-control currency-input", @type = "number", @step = "1", @required = "required", @placeholder = "0", @id = "PatientShare", @inputmode = "numeric", @data_mask = "currency" })
                                @Html.ValidationMessageFor(m => m.PatientShare, "", new { @class = "invalid-feedback" })
                                <div class="form-help">مبلغی که بیمار باید پرداخت کند</div>
                                </div>
                                </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                    <label class="form-label">سهم بیمه پایه (نمایشی)</label>
                                    <input id="InsurerShare_View" class="form-control" type="text" readonly value="0" aria-readonly="true" />
                                    @Html.HiddenFor(m => m.InsurerShare, new { id = "InsurerShare" })
                                <div class="form-help">این مقدار در تعرفه تکمیلی ذخیره نمی‌شود</div>
                            </div>
                                </div>
                            </div>

                            <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(m => m.SupplementaryCoveragePercent, "درصد پوشش تکمیلی *", new { @class = "required-field" })
                                @Html.TextBoxFor(m => m.SupplementaryCoveragePercent, new { @class = "form-control percentage-input", @type = "number", @step = "0.01", @min = "0", @max = "100", @required = "required", @placeholder = "90.00" })
                                @Html.ValidationMessageFor(m => m.SupplementaryCoveragePercent, "", new { @class = "invalid-feedback" })
                                <div class="form-help">درصد پوشش بیمه تکمیلی روی سهم باقی‌مانده بیمار پس از بیمه پایه (0-100)</div>
                                </div>
                                </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(m => m.Priority, "اولویت")
                                @Html.TextBoxFor(m => m.Priority, new { @class = "form-control", @type = "number", @min = "1", @max = "10", @placeholder = "5" })
                                @Html.ValidationMessageFor(m => m.Priority, "", new { @class = "invalid-feedback" })
                                <div class="form-help">اولویت تعرفه (1-10، 1 بالاترین اولویت)</div>
                                </div>
                                </div>
                            </div>

                    <!-- فیلدهای اضافی بیمه تکمیلی -->
                            <div class="row">
                        <div class="col-md-4">
                            <div class="form-group">
                                @Html.LabelFor(m => m.SupplementaryMaxPayment, "سقف پرداخت تکمیلی (ریال)")
                                @Html.TextBoxFor(m => m.SupplementaryMaxPayment, new { @class = "form-control currency-input", @type = "text", @placeholder = "اختیاری", @id = "SupplementaryMaxPayment" })
                                @Html.ValidationMessageFor(m => m.SupplementaryMaxPayment, "", new { @class = "invalid-feedback" })
                                <div class="form-help">حداکثر مبلغ پرداخت بیمه تکمیلی</div>
                                </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                @Html.LabelFor(m => m.SupplementaryDeductible, "فرانشیز تکمیلی (ریال)")
                                @Html.TextBoxFor(m => m.SupplementaryDeductible, new { @class = "form-control currency-input", @type = "text", @placeholder = "اختیاری", @id = "SupplementaryDeductible" })
                                @Html.ValidationMessageFor(m => m.SupplementaryDeductible, "", new { @class = "invalid-feedback" })
                                <div class="form-help">فرانشیز بیمه تکمیلی</div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                @Html.LabelFor(m => m.MinPatientCopay, "حداقل پرداخت بیمار (ریال)")
                                @Html.TextBoxFor(m => m.MinPatientCopay, new { @class = "form-control currency-input", @type = "text", @placeholder = "اختیاری", @id = "MinPatientCopay" })
                                @Html.ValidationMessageFor(m => m.MinPatientCopay, "", new { @class = "invalid-feedback" })
                                <div class="form-help">حداقل مبلغ پرداخت بیمار</div>
                            </div>
                        </div>
                    </div>

                    <!-- وضعیت فعال -->
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                    <div class="form-check">
                                    @Html.CheckBoxFor(m => m.IsActive, new { @class = "form-check-input", @id = "IsActive" })
                                    @Html.LabelFor(m => m.IsActive, "تعرفه فعال", new { @class = "form-check-label ms-2" })
                                </div>
                                <div class="form-help">آیا این تعرفه فعال است؟</div>
                                    </div>
                                </div>
                            </div>

                    <!-- Calculation Preview -->
                    <div class="calculation-preview">
                        <h5><i class="fas fa-calculator me-2" style="color: #3498db;"></i>پیش‌نمایش محاسبات هوشمند</h5>
                        <div id="calculationError" class="mt-2"></div>
                            <div class="row">
                            <div class="col-md-6">
                                <h6 class="text-primary">📊 اطلاعات کلی</h6>
                                <div class="calculation-item">
                                    <span>قیمت کل خدمت:</span>
                                    <span id="previewServiceAmount" dir="ltr">0 ریال</span>
                                </div>
                                <div class="calculation-item">
                                    <span>فرانشیز بیمه پایه:</span>
                                    <span id="previewPrimaryDeductible" dir="ltr">0 ریال</span>
                                </div>
                                <div class="calculation-item">
                                    <span>قابل پوشش پایه:</span>
                                    <span id="previewPrimaryCoverableAmount" dir="ltr">0 ریال</span>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <h6 class="text-success">🏥 بیمه پایه</h6>
                                <div class="calculation-item">
                                    <span>درصد پوشش پایه:</span>
                                    <span id="previewPrimaryCoveragePercent">0%</span>
                                </div>
                                <div class="calculation-item">
                                    <span>سهم بیمه پایه:</span>
                                    <span id="previewPrimaryCoverage" dir="ltr">0 ریال</span>
                                </div>
                                <div class="calculation-item">
                                    <span>سهم باقی‌مانده بیمار:</span>
                                    <span id="previewPatientShareFromPrimary" dir="ltr">0 ریال</span>
                                </div>
                            </div>
                        </div>
                        <div class="row mt-3">
                            <div class="col-md-6">
                                <h6 class="text-warning">🛡️ بیمه تکمیلی</h6>
                                <div class="calculation-item">
                                    <span>درصد پوشش تکمیلی:</span>
                                    <span id="previewSupplementaryPercent">0%</span>
                                </div>
                                <div class="calculation-item">
                                    <span>سهم بیمه تکمیلی:</span>
                                    <span id="previewSupplementaryCoverage" dir="ltr">0 ریال</span>
                                </div>
                                    </div>
                            <div class="col-md-6">
                                <h6 class="text-danger">💰 نتیجه نهایی</h6>
                                <div class="calculation-item" style="font-weight: bold; font-size: 16px; color: #dc3545;">
                                    <span>سهم نهایی بیمار:</span>
                                    <span id="previewFinalPatientShare" dir="ltr">0 ریال</span>
                                </div>
                            </div>
                        </div>
                        <div class="mt-3 p-2 bg-light rounded">
                            <small class="text-muted">💡 <strong>منطق محاسبه:</strong> بیمه تکمیلی روی سهم باقی‌مانده بیمار پس از بیمه پایه اعمال می‌شود</small>
                            </div>
                        </div>

                    <!-- Form Actions -->
                    <div class="row mt-4">
                        <div class="col-12 text-end">
                            <a href="@Url.Action("Index")" class="btn btn-secondary me-2">
                                <i class="fas fa-arrow-right me-2"></i>
                                بازگشت
                            </a>
                            <button type="submit" class="btn btn-medical" id="submitBtn">
                                <i class="fas fa-save me-2"></i>
                                ذخیره تغییرات
                                </button>
                            </div>
                        </div>

                    <!-- Loading Overlay -->
                    <div id="loadingOverlay" class="position-fixed top-0 start-0 w-100 h-100 d-none" 
                         style="background-color: rgba(0,0,0,0.5); z-index: 9999;">
                        <div class="d-flex justify-content-center align-items-center h-100">
                            <div class="text-center text-white">
                                <div class="spinner-border spinner-border-lg mb-3" role="status">
                                    <span class="visually-hidden">در حال پردازش...</span>
                                </div>
                                <h5>در حال ذخیره تغییرات...</h5>
                                <p class="mb-0">لطفاً منتظر بمانید</p>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/Scripts/app/modules/medical-config.js"></script>
    <script src="~/Scripts/app/modules/medical-ui.js"></script>
    <script src="~/Scripts/app/modules/medical-validation.js"></script>
    
    <script>
        $(document).ready(function() {
            try {
                console.log('🏥 MEDICAL: Initializing Edit Tariff Form');
                
                // Initialize form validation
                initializeFormValidation();
                
                // Initialize real-time calculation
                initializeRealTimeCalculation();
                
                // Edit mode: no cascade dropdown
                
                // Initialize smart form
                try {
                    if (typeof SmartForm !== 'undefined' && SmartForm.init) {
                        SmartForm.init();
                    } else {
                        console.warn('SmartForm object not found, skipping initialization');
                    }
                } catch (error) {
                    console.warn('خطا در مقداردهی اولیه SmartForm:', error);
                }
            
                // Load missing dropdown data
                loadMissingDropdownData();
                
                // Initialize insurance plan info display
                initializeInsurancePlanInfo();
                
                // Hide loading messages after complete loading
                setTimeout(function() {
                    hideAllLoadingMessages();
                }, 2000);
            
                // Initial calculation
                updateCalculationPreview();
                updateFieldCounter();
                
                // 🔧 DEBUG: Log initial form values
                console.log('🏥 MEDICAL EDIT: Initial form values:');
                console.log('TariffPrice:', $('#TariffPrice').val(), 'Type:', typeof $('#TariffPrice').val());
                console.log('PatientShare:', $('#PatientShare').val(), 'Type:', typeof $('#PatientShare').val());
                console.log('SupplementaryCoveragePercent:', $('#SupplementaryCoveragePercent').val(), 'Type:', typeof $('#SupplementaryCoveragePercent').val());
                console.log('InsuranceTariffId:', $('#InsuranceTariffId').val());
                console.log('ServiceId:', $('#ServiceId').val());
                
                // 🔧 DEBUG: Test decimal parsing
                const testValue = '100.00';
                console.log('🏥 MEDICAL DEBUG: Test decimal parsing:');
                console.log('parseFloat("100.00"):', parseFloat(testValue));
                console.log('Number("100.00"):', Number(testValue));
                console.log('parseFloat("100,00"):', parseFloat('100,00'));
                console.log('Current culture decimal separator:', (1.1).toLocaleString().charAt(1));

                // 🔧 TEMPORARY FIX: Disable prefill formatting to test model binding
                console.log('🏥 MEDICAL EDIT: Prefill formatting disabled for debugging');
                
                // Prefill: format existing model values (DB=Rial → UI=Rial) without overwriting user inputs
                (function prefillMonetaryFields(){
                    try{
                        console.log('🏥 MEDICAL EDIT: Prefill values - TariffPrice:', $('#TariffPrice').val(), 'PatientShare:', $('#PatientShare').val());
                        // Keep original values for debugging
                        // function formatRialStr(r){ var n = Number(r||0); if(!isFinite(n)||n===0) return ''; return (n).toLocaleString('fa-IR'); }
                        // function setIfPresent(sel){ var $el=$(sel); if($el.length===0) return; var raw=$el.val(); if(!raw) return; var rial=parseFloat(String(raw).replace(/[^\d.-]/g,''))||0; if(rial<=0) return; var disp= formatRialStr(rial); if(disp){ $el.val(disp).trigger('input'); } }
                        // setIfPresent('#TariffPrice');
                        // setIfPresent('#PatientShare');
                        // setIfPresent('#SupplementaryMaxPayment');
                        // setIfPresent('#SupplementaryDeductible');
                        // setIfPresent('#MinPatientCopay');
                    }catch(e){ console.warn('Prefill monetary failed', e); }
                })();
                
            } catch (error) {
                console.error('خطا در مقداردهی اولیه فرم:', error);
                alert('خطا در بارگذاری فرم. لطفاً صفحه را بازخوانی کنید.');
            }
            
            // Form submission handler
            $('#editTariffForm').on('submit', function(e) {
                try {
                    console.log('🏥 MEDICAL EDIT: Submit start', { tariffId: $('#InsuranceTariffId').val() });
                    
                    // Show loading state
                    $('#submitBtn').prop('disabled', true).html('<i class="fas fa-spinner fa-spin me-2"></i>در حال ذخیره...');
                    
                    // 🔧 FIX: Reset button state after form submission
                    setTimeout(function() {
                        $('#submitBtn').prop('disabled', false).html('<i class="fas fa-save me-2"></i>ذخیره تغییرات');
                    }, 3000); // Reset after 3 seconds
                    
                } catch (error) {
                    console.error('🏥 MEDICAL EDIT: Submit error', error);
                    e.preventDefault();
                    alert('خطا در ارسال فرم. لطفاً دوباره تلاش کنید.');
                    // Reset button state on error
                    $('#submitBtn').prop('disabled', false).html('<i class="fas fa-save me-2"></i>ذخیره تغییرات');
                }
            });

            // Debounce helper
            function debounce(fn, delay) { let t; return function(){ clearTimeout(t); const args=arguments, ctx=this; t=setTimeout(function(){ fn.apply(ctx,args); }, delay); }; }
            var updateCalcDebounced = debounce(updateCalculationPreview, 250);

            // Update field completion counter on input changes + debounced preview
            $('.form-control[required], .form-check-input[required]').on('input change blur', function() { updateFieldCounter(); });
            $('#TariffPrice,#PatientShare,#SupplementaryCoveragePercent,#PrimaryInsurancePlanId,#Priority,#IsActive,#SupplementaryMaxPayment,#SupplementaryDeductible,#MinPatientCopay')
                .on('input change blur', function(){ updateCalcDebounced(); });

            // Global AJAX loading/disable (unified UX)
            $(document).ajaxStart(function(){
                $('#submitBtn').prop('disabled', true).addClass('disabled').html('<i class="fas fa-spinner fa-spin me-2"></i>در حال پردازش...');
                $('#loadingOverlay').removeClass('d-none');
            });
            $(document).ajaxStop(function(){
                $('#submitBtn').prop('disabled', false).removeClass('disabled').html('<i class="fas fa-save me-2"></i>ذخیره تغییرات');
                $('#loadingOverlay').addClass('d-none');
            });

            // Global AJAX error logging
            $(document).ajaxError(function(evt, jqxhr, settings, thrown){
                console.error('🏥 MEDICAL EDIT: AJAX error', { url: settings && settings.url, status: jqxhr && jqxhr.status, err: thrown });
                // Reset button state on AJAX error
                $('#submitBtn').prop('disabled', false).removeClass('disabled').html('<i class="fas fa-save me-2"></i>ذخیره تغییرات');
            });
            
            // 🔧 FIX: Reset button state on page unload
            $(window).on('beforeunload', function() {
                $('#submitBtn').prop('disabled', false).removeClass('disabled').html('<i class="fas fa-save me-2"></i>ذخیره تغییرات');
            });
        });

        function initializeFormValidation() {
            console.log('🏥 MEDICAL: Initializing form validation');
            
            // Real-time validation on input change
            $('.form-control').on('input change blur', function() {
                validateField($(this));
                updateCalculationPreview();
            });
            
            // Special validation for numeric fields
            $('input[type="number"]').on('input', function() {
                const value = $(this).val();
                if (value && !isNaN(parseFloat(value))) {
                    const numValue = parseFloat(value);
                    if (numValue < 0) {
                        $(this).val(0);
                    }
                }
            });
            
            // Validation for percentage fields
            $('#SupplementaryCoveragePercent').on('input', function() {
                const value = parseFloat($(this).val()) || 0;
                if (value > 100) {
                    $(this).val(100);
                } else if (value < 0) {
                    $(this).val(0);
                }
            });
            
            // Validation for priority field
            $('#Priority').on('input', function() {
                const value = parseInt($(this).val()) || 1;
                if (value > 10) {
                    $(this).val(10);
                } else if (value < 1) {
                    $(this).val(1);
                }
            });
        }
        
        function showValidationErrors(errors) {
            let errorMessages = [];
            
            if (errors && Array.isArray(errors)) {
                errorMessages = errors;
            } else {
                $('.form-control.is-invalid').each(function() {
                    const fieldName = $(this).attr('name');
                    const label = $('label[for="' + fieldName + '"]').text() || fieldName;
                    const errorText = $(this).next('.invalid-feedback').text();
                    if (errorText) {
                        errorMessages.push(`• ${label}: ${errorText}`);
                    }
                });
            }
            
            if (errorMessages.length > 0) {
                const errorHtml = `
                    <div class="alert alert-danger">
                        <h6><i class="fas fa-exclamation-triangle"></i> خطاهای اعتبارسنجی:</h6>
                        <ul class="mb-0">
                            ${errorMessages.map(msg => `<li>${msg}</li>`).join('')}
                        </ul>
                    </div>
                `;
                
                if ($('#validationErrors').length === 0) {
                    $('#editTariffForm').prepend('<div id="validationErrors"></div>');
                }
                $('#validationErrors').html(errorHtml);
                
                $('html, body').animate({ scrollTop: 0 }, 500);
            }
        }
        
        function showLoadingState() {
            $('.form-control, .btn').prop('disabled', true);
            
            const loadingHtml = `
                <div class="alert alert-info text-center">
                    <i class="fas fa-spinner fa-spin me-2"></i>
                    در حال ذخیره تعرفه بیمه تکمیلی...
                </div>
            `;
            
            if ($('#loadingState').length === 0) {
                $('#editTariffForm').prepend('<div id="loadingState"></div>');
            }
            $('#loadingState').html(loadingHtml);
        }
        
        function hideLoadingState() {
            $('.form-control, .btn').prop('disabled', false);
            $('#loadingState').empty();
        }
        
        function showSuccessMessage(message) {
            const successHtml = `
                <div class="alert alert-success">
                    <i class="fas fa-check-circle me-2"></i>
                    ${message}
                </div>
            `;
            
            if ($('#successMessage').length === 0) {
                $('#editTariffForm').prepend('<div id="successMessage"></div>');
            }
            $('#successMessage').html(successHtml);
            
            setTimeout(() => {
                $('#successMessage').fadeOut();
            }, 5000);
        }

        // Strongly-typed datasets from Model (no ViewBag)
        window.primaryInsurancePlans = @Html.Raw(Json.Encode(Model?.PrimaryInsurancePlansMeta ?? new List<ClinicApp.ViewModels.Insurance.Supplementary.InsurancePlanMetaViewModel>()));
        window.insurancePlans = @Html.Raw(Json.Encode(Model?.InsurancePlansMeta ?? new List<ClinicApp.ViewModels.Insurance.Supplementary.InsurancePlanMetaViewModel>()));

        function initializeInsurancePlanInfo() {
            // نمایش اطلاعات بیمه پایه
            $('#PrimaryInsurancePlanId').on('change', function() {
                var selectedOption = $(this).find('option:selected');
                var planId = $(this).val();
                
                if (planId && planId !== '') {
                    var primaryPlans = window.primaryInsurancePlans || [];
                    var selectedPlan = primaryPlans.find(function(plan) {
                        return plan.InsurancePlanId == planId;
                    });
                    
                    if (selectedPlan) {
                        $('#primaryCoveragePercent').text(selectedPlan.CoveragePercent || '0');
                        $('#primaryDeductible').text((selectedPlan.Deductible || 0).toLocaleString() + ' ریال');
                        $('#primaryInsuranceInfo').show();
                        
                        console.log('🏥 MEDICAL: بیمه پایه انتخاب شد - CoveragePercent:', selectedPlan.CoveragePercent, 'Deductible:', selectedPlan.Deductible);
                        
                        updateCalculationPreview();
                        
                        try {
                            if (typeof window.MedicalSmartForm !== 'undefined' && 
                                window.MedicalSmartForm && 
                                typeof window.MedicalSmartForm.updateExamplePercentages === 'function') {
                                window.MedicalSmartForm.updateExamplePercentages();
                            } else {
                                console.warn('MedicalSmartForm.updateExamplePercentages not available');
                            }
                        } catch (error) {
                            console.warn('خطا در به‌روزرسانی مثال‌ها:', error);
                        }
                    }
                } else {
                    $('#primaryInsuranceInfo').hide();
                }
            });
            
            // نمایش اطلاعات بیمه تکمیلی
            $('#InsurancePlanId').on('change', function() {
                var selectedOption = $(this).find('option:selected');
                var planId = $(this).val();
                
                if (planId && planId !== '') {
                    var supplementaryPlans = window.insurancePlans || [];
                    var selectedPlan = supplementaryPlans.find(function(plan) {
                        return plan.InsurancePlanId == planId;
                    });
                    
                    if (selectedPlan) {
                        $('#supplementaryCoveragePercent').text(selectedPlan.CoveragePercent || '0');
                        $('#supplementaryDeductible').text((selectedPlan.Deductible || 0).toLocaleString() + ' ریال');
                        $('#supplementaryInsuranceInfo').show();
                        
                        console.log('🏥 MEDICAL: بیمه تکمیلی انتخاب شد - CoveragePercent:', selectedPlan.CoveragePercent, 'Deductible:', selectedPlan.Deductible);
                    }
                } else {
                    $('#supplementaryInsuranceInfo').hide();
                }
            });
        }

        // تابع یکدست برای پارس کردن مبالغ (بدون اعشار - ریال)
        function parseMoney(val) {
            if (!val) return 0;
            
            // تبدیل اعداد فارسی و عربی به انگلیسی
            const fa2en = s => s.replace(/[۰-۹]/g, d => '۰۱۲۳۴۵۶۷۸۹'.indexOf(d))
                              .replace(/[٠-٩]/g, d => '٠١٢٣٤٥٦٧٨٩'.indexOf(d));
            
            // حذف کاما و فاصله (بدون نقطه اعشار)
            const cleaned = fa2en(val).replace(/[^\d]/g, '');
            
            const result = Number(cleaned || 0);
            
            // بررسی محدودیت‌های عددی
            if (isNaN(result)) {
                console.warn('🔧 MEDICAL: عدد نامعتبر:', val);
                return 0;
            }
            
            if (result < 0) {
                console.warn('🔧 MEDICAL: عدد منفی:', val);
                return 0;
            }
            
            // بازگرداندن عدد صحیح (ریال)
            return Math.round(result);
        }
        
        // Helper functions for currency conversion
        // 🔧 CRITICAL FIX: همه چیز ریال است - بدون تبدیل
        const toRial = r => r; // مستقیماً ریال
        const toToman = r => r; // مستقیماً ریال
        
        // تابع فرمت کردن مبالغ (بدون اعشار)
        function formatCurrency(value) {
            if (!value) return '0';
            const num = parseMoney(value);
            return num.toString();
        }

        function updateCalculationPreview() {
            try {
                const serviceAmount = parseMoney($('#TariffPrice').val()); // مستقیماً ریال
                const supplementaryPercent = parseFloat($('#SupplementaryCoveragePercent').val()) || 0;
                
                console.log('🏥 MEDICAL: محاسبه پیش‌نمایش - ServiceAmount (Rial):', serviceAmount, 'SupplementaryPercent:', supplementaryPercent);
                
                var primaryPlans = window.primaryInsurancePlans || [];
                var selectedPrimaryPlanId = $('#PrimaryInsurancePlanId').val();
                var selectedPrimaryPlan = null;
                
                if (primaryPlans && Array.isArray(primaryPlans)) {
                    selectedPrimaryPlan = primaryPlans.find(function(plan) {
                        return plan.InsurancePlanId == selectedPrimaryPlanId;
                    });
                }
            
                // محاسبه فرانشیز
                let primaryDeductible = 0;
                if (selectedPrimaryPlan) {
                    primaryDeductible = selectedPrimaryPlan.Deductible || 0;
                }
                
                // محاسبه مبلغ قابل پوشش (بعد از کسر فرانشیز)
                const coverableAmount = Math.max(0, serviceAmount - primaryDeductible);
                
                // محاسبه بیمه پایه
                let primaryCoverage = 0;
                if (selectedPrimaryPlan) {
                    primaryCoverage = coverableAmount * (selectedPrimaryPlan.CoveragePercent || 70) / 100;
                } else {
                    // fallback به 70% در صورت عدم انتخاب
                    primaryCoverage = coverableAmount * 70 / 100;
                }
                
                // محاسبه صحیح سهم بیمار از بیمه اصلی
                const patientShareFromPrimary = Math.max(0, coverableAmount - primaryCoverage);
                
                // محاسبه بیمه تکمیلی (درصدی از سهم بیمار باقی‌مانده)
                const supplementaryCoverage = patientShareFromPrimary * (supplementaryPercent / 100);
                
                // سهم نهایی بیمار = سهم بیمار - پوشش تکمیلی
                const finalPatientShare = Math.max(0, patientShareFromPrimary - supplementaryCoverage);
                
                // منطق ذخیره‌سازی صحیح برای تعرفه تکمیلی (Edit: عدم بازنویسی ورودی کاربر)
  $('#InsurerShare').val('0');
                
                console.log('🏥 MEDICAL: محاسبات صحیح بیمه تکمیلی - ServiceAmount:', serviceAmount, 'PrimaryDeductible:', primaryDeductible, 'CoverableAmount:', coverableAmount, 'PrimaryCoverage:', primaryCoverage, 'PatientShareFromPrimary (R):', patientShareFromPrimary, 'SupplementaryCoverage (s% of R):', supplementaryCoverage, 'FinalPatientShare:', finalPatientShare);
                
                // به‌روزرسانی پیش‌نمایش با منطق جدید بیمه تکمیلی - نمایش در ریال
                $('#previewServiceAmount').text(serviceAmount.toLocaleString() + ' ریال');
                $('#previewPrimaryDeductible').text(primaryDeductible.toLocaleString() + ' ریال');
                $('#previewPrimaryCoverableAmount').text(coverableAmount.toLocaleString() + ' ریال');
                $('#previewPrimaryCoveragePercent').text((selectedPrimaryPlan ? selectedPrimaryPlan.CoveragePercent || 70 : 70) + '%');
                $('#previewPrimaryCoverage').text(primaryCoverage.toLocaleString() + ' ریال');
                $('#previewPatientShareFromPrimary').text(patientShareFromPrimary.toLocaleString() + ' ریال');
                $('#previewSupplementaryPercent').text(supplementaryPercent + '%');
                $('#previewSupplementaryCoverage').text(supplementaryCoverage.toLocaleString() + ' ریال');
                $('#previewFinalPatientShare').text(finalPatientShare.toLocaleString() + ' ریال');
            } catch (error) {
                console.error('🏥 MEDICAL: خطا در محاسبه پیش‌نمایش:', error);
                $('#calculationError').html('<div class="alert alert-danger">خطا در محاسبه: ' + error.message + '</div>').show();
            }
        }

        // شمارنده تکمیل فیلدهای ضروری
        function updateFieldCounter() {
            try {
                var requiredFields = $('#editTariffForm').find('.form-control[required], .form-check-input[required]');
                var total = requiredFields.length || 12;
                var filled = 0;
                requiredFields.each(function() {
                    var $el = $(this);
                    var val = ($el.is(':checkbox')) ? ($el.is(':checked') ? '1' : '') : ($el.val() || '').toString().trim();
                    if (val !== '') filled++;
                });
                $('#fieldCounter').text(filled + ' از ' + total + ' فیلد تکمیل شده');
            } catch (e) { /* noop */ }
        }

        function validateField(field) {
            const value = field.val();
            const fieldName = field.attr('name');
            
            field.removeClass('is-valid is-invalid');
            field.next('.invalid-feedback').remove();
            
            let isValid = true;
            let errorMessage = '';
            
            switch (fieldName) {
                case 'TariffPrice':
                    if (value) {
                        const numValue = parseMoney(value);
                        if (isNaN(numValue) || numValue < 0) {
                            isValid = false;
                            errorMessage = 'قیمت تعرفه باید عدد صحیح مثبت باشد';
                        } else if (numValue > 1000000000) { // 100 میلیون ریال
                            isValid = false;
                            errorMessage = 'قیمت تعرفه نمی‌تواند بیش از 100 میلیون ریال باشد';
                        } else if (!/^\d+$/.test(value.replace(/[^\d]/g, ''))) {
                            isValid = false;
                            errorMessage = 'قیمت تعرفه باید عدد صحیح مثبت باشد';
                        }
                    }
                    break;
                case 'PatientShare':
                case 'InsurerShare':
                    if (value) {
                        const numValue = parseMoney(value);
                        if (isNaN(numValue) || numValue < 0) {
                            isValid = false;
                            errorMessage = 'مبلغ باید عدد صحیح مثبت باشد';
                        } else if (!/^\d+$/.test(value.replace(/[^\d]/g, ''))) {
                            isValid = false;
                            errorMessage = 'مبلغ باید عدد صحیح مثبت باشد';
                        }
                    }
                    break;
                case 'SupplementaryCoveragePercent':
                    if (value) {
                        const numValue = parseFloat(value);
                        if (isNaN(numValue) || numValue < 0 || numValue > 100) {
                            isValid = false;
                            errorMessage = 'درصد پوشش باید بین 0 تا 100 باشد';
                        }
                    }
                    break;
                case 'Priority':
                    if (value) {
                        const numValue = parseInt(value);
                        if (isNaN(numValue) || numValue < 1 || numValue > 10) {
                            isValid = false;
                            errorMessage = 'اولویت باید بین 1 تا 10 باشد';
                        }
                    }
                    break;
                case 'PrimaryInsurancePlanId':
                case 'InsurancePlanId':
                case 'ServiceId':
                    if (!value || value === '') {
                        isValid = false;
                        errorMessage = 'این فیلد الزامی است';
                    }
                    break;
            }
            
            if (isValid) {
                if (value) {
                    field.addClass('is-valid');
                }
            } else {
                field.addClass('is-invalid');
                field.after(`<div class="invalid-feedback">${errorMessage}</div>`);
            }
            field.attr('aria-invalid', (!isValid).toString());
            
            return isValid;
        }

        function validateForm() {
            let isValid = true;
            let errorMessages = [];
            
            console.log('🏥 MEDICAL EDIT: شروع اعتبارسنجی فرم ویرایش');
            
            $('.form-control').removeClass('is-valid is-invalid');
            $('.invalid-feedback').remove();
            
            // 🔧 BULLETPROOF: اعتبارسنجی فیلدهای اجباری
            $('.form-control[required]').each(function() {
                if (!validateField($(this))) {
                    isValid = false;
                    let fieldName = $(this).attr('name');
                    let label = $('label[for="' + fieldName + '"]').text() || fieldName;
                    errorMessages.push(label + ' الزامی است');
                }
            });
            
            // 🔧 BULLETPROOF: دریافت مقادیر با اعتبارسنجی
            const tariffPrice = parseMoney($('#TariffPrice').val());
            const patientShare = parseMoney($('#PatientShare').val());
            const insurerShare = parseMoney($('#InsurerShare').val());
            const coveragePercent = parseFloat($('#SupplementaryCoveragePercent').val()) || 0;
            const maxPayment = parseMoney($('#SupplementaryMaxPayment').val()) || 0;
            const deductible = parseMoney($('#SupplementaryDeductible').val()) || 0;
            const minPatientCopay = parseMoney($('#MinPatientCopay').val()) || 0;
            const primaryPlanId = $('#PrimaryInsurancePlanId').val();
            const supplementaryPlanId = $('#InsurancePlanId').val();
            const serviceId = $('#ServiceId').val();
            
            console.log('🏥 MEDICAL EDIT: مقادیر اعتبارسنجی - ServiceId:', serviceId, 'PrimaryPlanId:', primaryPlanId, 'SupplementaryPlanId:', supplementaryPlanId);
            
            // 🔧 BULLETPROOF: اعتبارسنجی مقادیر کلیدی
            if (!primaryPlanId) {
                errorMessages.push('انتخاب بیمه پایه الزامی است');
                isValid = false;
            }
            
            if (!supplementaryPlanId) {
                errorMessages.push('انتخاب طرح بیمه تکمیلی الزامی است');
                isValid = false;
            }
            
            if (!serviceId) {
                console.log('🏥 MEDICAL: ServiceId validation failed - value:', serviceId);
                errorMessages.push('انتخاب خدمت الزامی است');
                isValid = false;
            } else {
                console.log('🏥 MEDICAL: ServiceId validation passed - value:', serviceId);
            }
            
            if (tariffPrice <= 0) {
                errorMessages.push('قیمت تعرفه باید بیشتر از صفر باشد');
                isValid = false;
            }
            
            // 🔧 BULLETPROOF: اعتبارسنجی درصد پوشش
            if (coveragePercent < 0 || coveragePercent > 100) {
                errorMessages.push('درصد پوشش باید بین 0 تا 100 باشد');
                $('#SupplementaryCoveragePercent').addClass('is-invalid');
                isValid = false;
            } else {
                $('#SupplementaryCoveragePercent').removeClass('is-invalid');
            }
            
            // 🔧 BULLETPROOF: اعتبارسنجی سقف پرداخت
            if (maxPayment < 0) {
                errorMessages.push('سقف پرداخت نمی‌تواند منفی باشد');
                $('#SupplementaryMaxPayment').addClass('is-invalid');
                isValid = false;
            } else {
                $('#SupplementaryMaxPayment').removeClass('is-invalid');
            }
            
            // 🔧 BULLETPROOF: اعتبارسنجی فرانشیز
            if (deductible < 0) {
                errorMessages.push('فرانشیز نمی‌تواند منفی باشد');
                $('#SupplementaryDeductible').addClass('is-invalid');
                isValid = false;
            } else {
                $('#SupplementaryDeductible').removeClass('is-invalid');
            }
            
            // 🔧 BULLETPROOF: اعتبارسنجی حداقل پرداخت بیمار
            if (minPatientCopay < 0) {
                errorMessages.push('حداقل پرداخت بیمار نمی‌تواند منفی باشد');
                $('#MinPatientCopay').addClass('is-invalid');
                isValid = false;
            } else {
                $('#MinPatientCopay').removeClass('is-invalid');
            }
            
            // 🔧 BULLETPROOF: اعتبارسنجی سهم بیمار
            if (patientShare < 0) {
                errorMessages.push('سهم بیمار نمی‌تواند منفی باشد');
                $('#PatientShare').addClass('is-invalid');
                isValid = false;
            } else if (patientShare > tariffPrice) {
                errorMessages.push('سهم بیمار نمی‌تواند بیشتر از قیمت تعرفه باشد');
                $('#PatientShare').addClass('is-invalid');
                isValid = false;
            } else {
                $('#PatientShare').removeClass('is-invalid');
            }
            
            // 🔧 BULLETPROOF: اعتبارسنجی سهم بیمه (باید 0 باشد برای بیمه تکمیلی)
            if (insurerShare !== 0) {
                errorMessages.push('سهم بیمه برای بیمه تکمیلی باید صفر باشد');
                $('#InsurerShare').addClass('is-invalid');
                isValid = false;
            } else {
                $('#InsurerShare').removeClass('is-invalid');
            }
            
            // 🔧 BULLETPROOF: اعتبارسنجی منطق بیمه تکمیلی
            const totalCoverage = patientShare + insurerShare;
            if (totalCoverage > tariffPrice) {
                errorMessages.push('مجموع سهم بیمار و بیمه نمی‌تواند بیشتر از قیمت تعرفه باشد');
                isValid = false;
            }
            
            if (!isValid) {
                showValidationErrors(errorMessages);
                // Focus management: focus first invalid or summary
                var $firstInvalid = $('.form-control.is-invalid').first();
                if ($firstInvalid.length) { $firstInvalid.focus(); }
                else if ($('#validationErrors').length) { $('#validationErrors').attr('tabindex','-1').focus(); }
            }
            
            return isValid;
        }
        
        function loadMissingDropdownData() {
            console.log('🏥 MEDICAL: بررسی و بارگذاری داده‌های dropdown');
            
            if ($('#departmentId option').length <= 1) {
                console.log('🏥 MEDICAL: بارگذاری دپارتمان‌ها');
                loadDepartments();
            }
            
            if ($('#PrimaryInsurancePlanId option').length <= 1) {
                console.log('🏥 MEDICAL: بارگذاری بیمه‌های پایه');
                loadPrimaryInsurancePlansIfNeeded();
            }
            
            if ($('#InsurancePlanId option').length <= 1) {
                console.log('🏥 MEDICAL: بارگذاری بیمه‌های تکمیلی');
                loadSupplementaryInsurancePlansIfNeeded();
            }
        }
        
        function hideAllLoadingMessages() {
            $('#primaryInsuranceLoadingMessage').hide();
            $('.alert-warning').hide();
            
            $('option:contains("در حال بارگذاری")').parent().each(function() {
                if ($(this).find('option').length > 1) {
                    $(this).find('option:contains("در حال بارگذاری")').remove();
                }
            });
            
            console.log('🏥 MEDICAL: تمام پیام‌های بارگذاری مخفی شدند');
        }
        
        function loadPrimaryInsurancePlansIfNeeded() {
            try {
                var primaryDropdown = $('#PrimaryInsurancePlanId');
                if (primaryDropdown.length === 0) {
                    console.warn('🏥 MEDICAL: PrimaryInsurancePlanId dropdown not found');
                    return;
                }
                
                var options = primaryDropdown.find('option');
                if (options.length <= 1) {
                    console.log('🏥 MEDICAL: بارگذاری خودکار بیمه پایه...');
                    
                    primaryDropdown.html('<option value="">در حال بارگذاری...</option>');
                    
                    $.ajax({
                        url: '@Url.Action("GetInsurancePlans", "SupplementaryTariff")',
                        type: 'GET',
                        dataType: 'json',
                        success: function(response) {
                            if (response.success && response.data) {
                                primaryDropdown.empty();
                                primaryDropdown.append('<option value="">انتخاب بیمه پایه</option>');
                                
                                $.each(response.data, function(index, plan) {
                                    if (plan.insuranceType === 1) {
                                        primaryDropdown.append('<option value="' + plan.insurancePlanId + '">' + plan.name + '</option>');
                                    }
                                });
                                
                                window.primaryInsurancePlans = response.data.filter(function(plan) {
                                    return plan.insuranceType === 1;
                                }).map(function(plan) {
                                    return {
                                        InsurancePlanId: plan.insurancePlanId,
                                        Name: plan.name,
                                        CoveragePercent: plan.coveragePercent,
                                        Deductible: plan.deductible
                                    };
                                });
                                
                                console.log('🏥 MEDICAL: بیمه پایه با موفقیت بارگذاری شد');
                                $('#primaryInsuranceLoadingMessage').hide();
                                $('.alert-warning').hide();
                            } else {
                                console.error('🏥 MEDICAL: خطا در بارگذاری بیمه پایه:', response.message);
                                primaryDropdown.html('<option value="">خطا در بارگذاری</option>');
                            }
                        },
                        error: function(xhr, status, error) {
                            console.error('🏥 MEDICAL: خطای AJAX در بارگذاری بیمه پایه:', error);
                            primaryDropdown.html('<option value="">خطا در بارگذاری</option>');
                        }
                    });
                }
            } catch (error) {
                console.error('🏥 MEDICAL: خطا در loadPrimaryInsurancePlansIfNeeded:', error);
            }
        }
        
        function loadSupplementaryInsurancePlansIfNeeded() {
            try {
                var supplementaryDropdown = $('#InsurancePlanId');
                if (supplementaryDropdown.length === 0) {
                    console.warn('🏥 MEDICAL: InsurancePlanId dropdown not found');
                    return;
                }
                
                var options = supplementaryDropdown.find('option');
                if (options.length <= 1) {
                    console.log('🏥 MEDICAL: بارگذاری خودکار بیمه تکمیلی...');
                    
                    supplementaryDropdown.html('<option value="">در حال بارگذاری...</option>');
                    
                    $.ajax({
                        url: '@Url.Action("GetInsurancePlans", "SupplementaryTariff")',
                        type: 'GET',
                        dataType: 'json',
                        success: function(response) {
                            if (response.success && response.data) {
                                supplementaryDropdown.empty();
                                supplementaryDropdown.append('<option value="">انتخاب طرح بیمه تکمیلی</option>');
                                
                                $.each(response.data, function(index, plan) {
                                    if (plan.insuranceType === 2) {
                                        supplementaryDropdown.append('<option value="' + plan.insurancePlanId + '">' + plan.name + '</option>');
                                    }
                                });
                                
                                window.insurancePlans = response.data.filter(function(plan) {
                                    return plan.insuranceType === 2;
                                }).map(function(plan) {
                                    return {
                                        InsurancePlanId: plan.insurancePlanId,
                                        Name: plan.name,
                                        CoveragePercent: plan.coveragePercent,
                                        Deductible: plan.deductible
                                    };
                                });
                                
                                console.log('🏥 MEDICAL: بیمه تکمیلی با موفقیت بارگذاری شد');
                                $('.alert-warning').hide();
                            } else {
                                console.error('🏥 MEDICAL: خطا در بارگذاری بیمه تکمیلی:', response.message);
                                supplementaryDropdown.html('<option value="">خطا در بارگذاری</option>');
                            }
                        },
                        error: function(xhr, status, error) {
                            console.error('🏥 MEDICAL: خطای AJAX در بارگذاری بیمه تکمیلی:', error);
                            supplementaryDropdown.html('<option value="">خطا در بارگذاری</option>');
                        }
                    });
                }
            } catch (error) {
                console.error('🏥 MEDICAL: خطا در loadSupplementaryInsurancePlansIfNeeded:', error);
            }
        }
        
        function loadDepartments() {
            $.ajax({
                url: '@Url.Action("GetDepartments", "SupplementaryTariff", new { area = "Admin" })',
                type: 'GET',
                dataType: 'json',
                success: function(data) {
                    console.log('🏥 MEDICAL: دپارتمان‌ها بارگذاری شد - Count:', data ? data.length : 0);
                    if (data && data.length > 0) {
                        var dropdown = $('#departmentId');
                        dropdown.empty().append('<option value="">انتخاب دپارتمان</option>');
                        data.forEach(function(dept) {
                            dropdown.append('<option value="' + dept.DepartmentId + '">' + dept.Name + '</option>');
                        });
                    }
                },
                error: function(xhr, status, error) {
                    console.error('🏥 MEDICAL: خطا در بارگذاری دپارتمان‌ها:', error);
                }
            });
        }

        function initializeRealTimeCalculation() {
            // این تابع حالا در SmartForm.initializeSmartCalculation مدیریت می‌شود
        }

        function initializeCascadeDropdown() {
            // Cascade Dropdown Logic: Department -> Services
            $('#departmentId').on('change', function() {
                var departmentId = $(this).val();
                var serviceDropdown = $('#ServiceId');
                
                serviceDropdown.empty().append('<option value="">در حال بارگذاری...</option>').prop('disabled', true);
                
                if (departmentId) {
                    $.ajax({
                        url: '@Url.Action("GetServicesByDepartment", "SupplementaryTariff", new { area = "Admin" })',
                        type: 'GET',
                        data: { departmentId: departmentId },
                        dataType: 'json',
                        cache: false,
                        success: function(data) {
                            console.log('🏥 MEDICAL: دریافت خدمات دپارتمان - Data:', data);
                            
                            serviceDropdown.empty().prop('disabled', false);
                            
                            try {
                                console.log('🏥 MEDICAL: بررسی داده‌ها - Type:', typeof data, 'IsArray:', Array.isArray(data), 'Length:', data ? data.length : 'null');
                                
                                var services = data;
                                
                                if (typeof data === 'string') {
                                    try {
                                        services = JSON.parse(data);
                                        console.log('🏥 MEDICAL: داده‌ها از string به object تبدیل شد - Type:', typeof services, 'IsArray:', Array.isArray(services));
                                    } catch (parseError) {
                                        console.error('🏥 MEDICAL: خطا در parse کردن JSON:', parseError);
                                        serviceDropdown.append('<option value="">خطا در پردازش داده‌ها</option>');
                                        return;
                                    }
                                }
                                
                                if (services && Array.isArray(services) && services.length > 0) {
                                    serviceDropdown.append('<option value="">انتخاب خدمت</option>');
                                    
                                    for (var i = 0; i < services.length; i++) {
                                        var service = services[i];
                                        if (service && service.ServiceId && service.Title) {
                                            serviceDropdown.append('<option value="' + service.ServiceId + '">' + service.Title + '</option>');
                                        }
                                    }
                                    
                                    console.log('🏥 MEDICAL: خدمات با موفقیت بارگذاری شد - تعداد: ' + services.length);
                                } else {
                                    serviceDropdown.append('<option value="">خدمتی یافت نشد</option>');
                                    console.log('🏥 MEDICAL: هیچ خدمتی یافت نشد');
                                }
                            } catch (error) {
                                console.error('🏥 MEDICAL: خطا در پردازش خدمات:', error);
                                serviceDropdown.append('<option value="">خطا در پردازش خدمات</option>');
                            }
                        },
                        error: function(xhr, status, error) {
                            console.error('🏥 MEDICAL: خطا در AJAX - Status:', status, 'Error:', error, 'Response:', xhr.responseText);
                            serviceDropdown.empty().append('<option value="">خطا در بارگذاری خدمات</option>').prop('disabled', false);
                        }
                    });
                } else {
                    serviceDropdown.empty().append('<option value="">ابتدا دپارتمان را انتخاب کنید</option>').prop('disabled', true);
                }
            });
        }
    </script>
    
    <!-- Real-time Validation Scripts -->
    <script src="~/Scripts/app/modules/medical-realtime-validation.js"></script>
    <script src="~/Scripts/app/modules/medical-message-manager.js"></script>
    <script src="~/Scripts/app/modules/medical-ux-enhancer.js"></script>
    <script src="~/Scripts/app/supplementary-tariff.js"></script>
    
    <!-- Currency Input Mask Script -->
    <script>
        $(document).ready(function() {
            try {
                // 🔧 TEMPORARY FIX: Disable currency formatting to test model binding
                console.log('🏥 MEDICAL EDIT: Currency formatting disabled for debugging');
                
                // Initialize currency input masks for Persian culture
                $('.currency-input').each(function() {
                    // Disable formatting for debugging
                    $(this).on('input', function() {
                        // Keep original value for debugging
                        console.log('🏥 MEDICAL EDIT: Input value:', $(this).val());
                    });
                    
                    // Normalize value before form submission
                    $(this).on('blur', function() {
                        var value = $(this).val();
                        console.log('🏥 MEDICAL EDIT: Blur value:', value);
                        $(this).data('raw-value', value);
                    });
                });
                
                // 🔧 CRITICAL FIX: حذف تبدیل ارز - همه چیز ریال است
                $('#editTariffForm').on('submit', function() {
                    function normalizeCurrency(selector, fieldName) {
                        var $el = $(selector);
                        if ($el.length === 0) return;
                        var rawValue = $el.data('raw-value') || $el.val().replace(/[^\d]/g, '');
                        if (!rawValue) { $el.val(''); return; }
                        var numericValue = parseInt(rawValue) || 0;
                        
                        // 🔧 CRITICAL FIX: مستقیماً ریال - بدون تبدیل
                        var rialValue;
                        
                        if (fieldName === 'TariffPrice') {
                            // TariffPrice: مستقیماً ریال (بدون تبدیل)
                            rialValue = numericValue;
                            console.log('🏥 MEDICAL EDIT: TariffPrice - Rial:', rialValue);
                        } else if (fieldName === 'PatientShare') {
                            // PatientShare: مستقیماً ریال (بدون تبدیل)
                            rialValue = numericValue;
                            console.log('🏥 MEDICAL EDIT: PatientShare - Rial:', rialValue);
                        } else if (fieldName === 'InsurerShare') {
                            // InsurerShare: برای بیمه تکمیلی همیشه 0
                            rialValue = 0;
                            console.log('🏥 MEDICAL EDIT: InsurerShare set to 0 for supplementary insurance');
                        } else {
                            // سایر فیلدها: مستقیماً ریال (بدون تبدیل)
                            rialValue = numericValue;
                            console.log('🏥 MEDICAL EDIT: Other field - Rial:', rialValue);
                        }
                        
                        $el.val(rialValue);
                    }
                    
                // 🔧 BULLETPROOF: Performance Monitoring
                var formStartTime = performance.now();
                console.log('🏥 MEDICAL EDIT: شروع پردازش فرم - Time:', formStartTime);
                
                // 🔧 BULLETPROOF: تست سناریوهای خاص قبل از ارسال
                console.log('🏥 MEDICAL EDIT: تست سناریوهای خاص');
                
                // تست 1: بررسی مقادیر منفی
                var tariffPrice = parseFloat($('#TariffPrice').val()) || 0;
                var patientShare = parseFloat($('#PatientShare').val()) || 0;
                var insurerShare = parseFloat($('#InsurerShare').val()) || 0;
                
                if (tariffPrice < 0 || patientShare < 0 || insurerShare < 0) {
                    console.error('🏥 MEDICAL EDIT: مقادیر منفی یافت شد');
                    alert('مقادیر نمی‌توانند منفی باشند');
                    return false;
                }
                
                // تست 2: بررسی منطق بیمه تکمیلی
                if (insurerShare !== 0) {
                    console.error('🏥 MEDICAL EDIT: سهم بیمه برای بیمه تکمیلی باید 0 باشد');
                    alert('سهم بیمه برای بیمه تکمیلی باید صفر باشد');
                    return false;
                }
                
                // تست 3: بررسی سهم بیمار
                if (patientShare > tariffPrice) {
                    console.error('🏥 MEDICAL EDIT: سهم بیمار بیشتر از قیمت تعرفه');
                    alert('سهم بیمار نمی‌تواند بیشتر از قیمت تعرفه باشد');
                    return false;
                }
                
                console.log('🏥 MEDICAL EDIT: تمام تست‌ها موفق');
                
                // 🔧 BULLETPROOF: Performance Logging
                var formEndTime = performance.now();
                var formDuration = formEndTime - formStartTime;
                console.log('🏥 MEDICAL EDIT: پردازش فرم تکمیل شد - Duration:', formDuration.toFixed(2), 'ms');
                
                // 🔧 CRITICAL FIX: تبدیل صحیح فیلدها با تشخیص نوع
                normalizeCurrency('#TariffPrice', 'TariffPrice');
                normalizeCurrency('#PatientShare', 'PatientShare');
                normalizeCurrency('#InsurerShare', 'InsurerShare');
                normalizeCurrency('#SupplementaryMaxPayment', 'SupplementaryMaxPayment');
                normalizeCurrency('#SupplementaryDeductible', 'SupplementaryDeductible');
                normalizeCurrency('#MinPatientCopay', 'MinPatientCopay');
                });
            } catch (error) {
                console.warn('خطا در مقداردهی اولیه Currency Input Mask:', error);
            }
        });
    </script>
}
