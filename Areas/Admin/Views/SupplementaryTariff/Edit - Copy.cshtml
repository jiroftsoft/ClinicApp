@model ClinicApp.ViewModels.Insurance.Supplementary.SupplementaryTariffCreateEditViewModel
@{
    ViewBag.Title = "ویرایش تعرفه بیمه تکمیلی";
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
    
    // تنظیم Culture برای فرمت اعداد
    System.Threading.Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo("fa-IR");
    System.Threading.Thread.CurrentThread.CurrentUICulture = new System.Globalization.CultureInfo("fa-IR");
}

@section Styles {
    @* FIX: مطابق با VIEW_OPTIMIZATION_CONTRACT - استفاده از Bundle optimization *@
    @Styles.Render("~/Content/css/medical-environment")
    @Styles.Render("~/Content/css/insurance/supplementary-tariff")
}

<div class="container-fluid">
    <!-- Header Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="edit-card">
                <div class="card-header">
                    <h3 class="mb-0">
                        <i class="fas fa-edit me-2"></i>
                        ویرایش تعرفه بیمه تکمیلی
                    </h3>
                    <p class="mb-0 mt-2 opacity-75">
                        ویرایش اطلاعات تعرفه بیمه تکمیلی برای محیط درمانی
                    </p>
                </div>
            </div>
        </div>
    </div>

    <!-- Form Section -->
    <div class="row">
        <div class="col-lg-8">
            <div class="edit-card">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="fas fa-edit me-2"></i>
                        اطلاعات تعرفه
                    </h5>
                </div>
                <div class="card-body">
                    @using (Html.BeginForm("Edit", "SupplementaryTariff", FormMethod.Post, new { @class = "form-horizontal", id = "editForm" }))
                    {
                        @Html.AntiForgeryToken()
                        @Html.HiddenFor(m => m.InsuranceTariffId)
                        @Html.HiddenFor(m => m.ServiceId)

                        <!-- Service Information (Read-only) -->
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="form-label">نام خدمت</label>
                                    <div class="form-control-plaintext">
                                        <strong>@Model.ServiceName</strong>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="form-label">کد خدمت</label>
                                    <div class="form-control-plaintext">
                                        <strong>@Model.ServiceCode</strong>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Insurance Plan Selection -->
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.InsurancePlanId, new { @class = "form-label" })
                                    @Html.DropDownListFor(m => m.InsurancePlanId, new SelectList(Model.InsurancePlans, "Value", "Text", Model.InsurancePlanId), "انتخاب طرح بیمه تکمیلی", new { @class = "form-control", @required = "required" })
                                    @Html.ValidationMessageFor(m => m.InsurancePlanId, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.PrimaryInsurancePlanId, new { @class = "form-label" })
                                    @Html.DropDownListFor(m => m.PrimaryInsurancePlanId, new SelectList(Model.PrimaryInsurancePlans, "Value", "Text", Model.PrimaryInsurancePlanId), "انتخاب بیمه پایه", new { @class = "form-control", @required = "required" })
                                    @Html.ValidationMessageFor(m => m.PrimaryInsurancePlanId, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <!-- Tariff Information -->
                        <div class="row">
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.TariffPrice, new { @class = "form-label" })
                                    @Html.TextBoxFor(m => m.TariffPrice, new { @class = "form-control", @type = "number", @step = "0.01", @min = "0", @required = "required" })
                                    @Html.ValidationMessageFor(m => m.TariffPrice, "", new { @class = "text-danger" })
                                    <small class="form-text text-muted">قیمت کل خدمت به تومان</small>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.PatientShare, new { @class = "form-label" })
                                    @Html.TextBoxFor(m => m.PatientShare, new { @class = "form-control", @type = "number", @step = "0.01", @min = "0", @required = "required" })
                                    @Html.ValidationMessageFor(m => m.PatientShare, "", new { @class = "text-danger" })
                                    <small class="form-text text-muted">مبلغی که بیمار باید پرداخت کند</small>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.InsurerShare, "سهم بیمه (تومان)", new { @class = "form-label" })
                                    @Html.TextBoxFor(m => m.InsurerShare, new { @class = "form-control", @type = "text", @readonly = "readonly", @value = "0" })
                                    @Html.ValidationMessageFor(m => m.InsurerShare, "", new { @class = "text-danger" })
                                    <small class="form-text text-muted">این فیلد در تعرفه تکمیلی ذخیره نمی‌شود و همواره صفر است</small>
                                    @Html.HiddenFor(m => m.InsurerShare, new { @Value = "0" })
                                </div>
                            </div>
                        </div>

                        <!-- Supplementary Settings -->
                        <div class="row">
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.SupplementaryCoveragePercent, new { @class = "form-label" })
                                    @Html.TextBoxFor(m => m.SupplementaryCoveragePercent, new { @class = "form-control", @type = "number", @step = "0.01", @min = "0", @max = "100", @required = "required" })
                                    @Html.ValidationMessageFor(m => m.SupplementaryCoveragePercent, "", new { @class = "text-danger" })
                                    <small class="form-text text-muted">درصد پوشش بیمه تکمیلی (0-100)</small>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.Priority, new { @class = "form-label" })
                                    @Html.TextBoxFor(m => m.Priority, new { @class = "form-control", @type = "number", @min = "1", @max = "10" })
                                    @Html.ValidationMessageFor(m => m.Priority, "", new { @class = "text-danger" })
                                    <small class="form-text text-muted">اولویت تعرفه (1-10، 1 بالاترین اولویت)</small>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <div class="form-check mt-4">
                                        @Html.CheckBoxFor(m => m.IsActive, new { @class = "form-check-input" })
                                        @Html.LabelFor(m => m.IsActive, new { @class = "form-check-label" })
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Action Buttons -->
                        <div class="form-group text-center mt-4">
                            <button type="submit" class="btn btn-medical me-3" 
                                    data-toggle="tooltip" 
                                    data-placement="top" 
                                    title="ذخیره تغییرات تعرفه بیمه تکمیلی">
                                <i class="fas fa-save me-2"></i>
                                ذخیره تغییرات
                            </button>
                            <a href="@Url.Action("Index", "SupplementaryTariff")" 
                               class="btn btn-outline-secondary" 
                               data-toggle="tooltip" 
                               data-placement="top" 
                               title="بازگشت به لیست تعرفه‌های بیمه تکمیلی">
                                <i class="fas fa-arrow-right me-2"></i>
                                بازگشت به لیست
                            </a>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Calculation Preview -->
        <div class="col-lg-4">
            <div class="calculation-preview">
                <h5>
                    <i class="fas fa-calculator me-2"></i>
                    پیش‌نمایش محاسبات
                </h5>
                <div id="calculationPreview">
                    <div class="calculation-item">
                        <span>قیمت کل خدمت:</span>
                        <span id="totalPrice">0 تومان</span>
                    </div>
                    <div class="calculation-item">
                        <span>سهم بیمه پایه:</span>
                        <span id="primaryShare">0 تومان</span>
                    </div>
                    <div class="calculation-item">
                        <span>مبلغ باقی‌مانده:</span>
                        <span id="remainingAmount">0 تومان</span>
                    </div>
                    <div class="calculation-item">
                        <span>درصد پوشش تکمیلی:</span>
                        <span id="supplementaryPercent">0%</span>
                    </div>
                    <div class="calculation-item">
                        <span>سهم نهایی بیمار:</span>
                        <span id="finalPatientShare">0 تومان</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/Scripts/app/modules/medical-config.js"></script>
    <script src="~/Scripts/app/modules/medical-ui.js"></script>
    <script src="~/Scripts/app/modules/medical-validation.js"></script>
    <script src="~/Scripts/app/modules/medical-realtime-validation.js"></script>
    <script src="~/Scripts/app/modules/medical-message-manager.js"></script>
    <script src="~/Scripts/app/modules/medical-ux-enhancer.js"></script>
    <script src="~/Scripts/app/supplementary-tariff.js"></script>
    
    <script>
        $(document).ready(function() {
            // Debug: نمایش اطلاعات Model
            console.log('🏥 MEDICAL DEBUG: Model Data:', {
                InsuranceTariffId: @(Model.InsuranceTariffId ?? 0),
                ServiceId: @Model.ServiceId,
                InsurancePlanId: @Model.InsurancePlanId,
                TariffPrice: @(Model.TariffPrice?.ToString("F2") ?? "null"),
                PatientShare: @(Model.PatientShare?.ToString("F2") ?? "null"),
                InsurerShare: @(Model.InsurerShare?.ToString("F2") ?? "null"),
                SupplementaryCoveragePercent: @(Model.SupplementaryCoveragePercent?.ToString("F2") ?? "null"),
                Priority: @Model.Priority,
                PrimaryInsurancePlanId: @Model.PrimaryInsurancePlanId,
                IsActive: @Model.IsActive.ToString().ToLower()
            });
            
            // Debug: نمایش اطلاعات Model
            console.log('🏥 MEDICAL DEBUG: Model Data:', {
                ServiceName: '@Model.ServiceName',
                ServiceCode: '@Model.ServiceCode',
                PrimaryInsurancePlansCount: @(Model.PrimaryInsurancePlans?.Count ?? 0),
                InsurancePlansCount: @(Model.InsurancePlans?.Count ?? 0),
                DepartmentsCount: @(Model.Departments?.Count ?? 0)
            });
            
            // تنظیم مقادیر فیلدها به صورت دستی
            @if (Model.TariffPrice.HasValue)
            {
                <text>
                $('#TariffPrice').val('@Model.TariffPrice.Value.ToString("F2", System.Globalization.CultureInfo.InvariantCulture)');
                </text>
            }
            @if (Model.PatientShare.HasValue)
            {
                <text>
                $('#PatientShare').val('@Model.PatientShare.Value.ToString("F2", System.Globalization.CultureInfo.InvariantCulture)');
                </text>
            }
            @if (Model.InsurerShare.HasValue)
            {
                <text>
                $('#InsurerShare').val('@Model.InsurerShare.Value.ToString("F2", System.Globalization.CultureInfo.InvariantCulture)');
                </text>
            }
            @if (Model.SupplementaryCoveragePercent.HasValue)
            {
                <text>
                $('#SupplementaryCoveragePercent').val('@Model.SupplementaryCoveragePercent.Value.ToString("F2", System.Globalization.CultureInfo.InvariantCulture)');
                </text>
            }
            
            // Initialize real-time calculation
            initializeRealTimeCalculation();
            
            // Initialize form validation
            if (typeof window.MedicalValidation !== 'undefined') {
                window.MedicalValidation.init();
            }
        });

        // 🔧 CRITICAL FIX: تابع یکدست برای پارس کردن مبالغ
        function parseMoney(val) {
            if (!val) return 0;
            const fa2en = s => s.replace(/[۰-۹]/g, d => '۰۱۲۳۴۵۶۷۸۹'.indexOf(d))
                              .replace(/[٠-٩]/g, d => '٠١٢٣٤٥٦٧٨٩'.indexOf(d));
            const n = fa2en(String(val)).replace(/[^\d.-]/g, '');
            return Number(n || 0);
        }

        function initializeRealTimeCalculation() {
            // Bind events to form fields
            $('#TariffPrice, #PatientShare, #InsurerShare, #SupplementaryCoveragePercent, #PrimaryInsurancePlanId').on('input change', function() {
                updateCalculationPreview();
            });
            
            // Initial calculation
            updateCalculationPreview();
        }

        function updateCalculationPreview() {
            try {
                // 🔧 CRITICAL FIX: منطق صحیح محاسبه برای تعرفه تکمیلی
                const tariffPriceT = parseMoney($('#TariffPrice').val());              // تومان
                const patientShareT = parseMoney($('#PatientShare').val());            // تومان (پس از پایه)
                const supplementaryPercent = parseMoney($('#SupplementaryCoveragePercent').val());

                // R = سهم بیمار پس از بیمه پایه
                const remainingAmountT = Math.max(0, patientShareT);
                
                // محاسبه پوشش تکمیلی و سهم نهایی بیمار
                const supplementaryCoverageT = (remainingAmountT * supplementaryPercent) / 100;
                const finalPatientShareT = Math.max(0, remainingAmountT - supplementaryCoverageT);
                
                // به‌روزرسانی عناصر پیش‌نمایش
                $('#totalPrice').text(formatCurrency(tariffPriceT));
                $('#primaryShare').text('—'); // در تعرفه تکمیلی محاسبه و ذخیره نمی‌شود
                $('#remainingAmount').text(formatCurrency(remainingAmountT));
                $('#supplementaryPercent').text(supplementaryPercent + '%');
                $('#finalPatientShare').text(formatCurrency(finalPatientShareT));
                
            } catch (error) {
                console.error('Error in calculation preview:', error);
            }
        }

        function formatCurrency(amount) {
            return new Intl.NumberFormat('fa-IR').format(amount) + ' تومان';
        }

        // 🔧 CRITICAL FIX: تبدیل تومان به ریال در فرم ویرایش
        $('#editForm').on('submit', function() {
            const toRial = t => Math.round((parseFloat(t) || 0) * 10);
            
            // این سه فیلد بر حسب "تومان" هستند
            $('#TariffPrice').val(toRial($('#TariffPrice').val()));
            $('#PatientShare').val(toRial($('#PatientShare').val()));
            // InsurerShare = 0
            $('#InsurerShare').val(0);
            
            console.log('🏥 MEDICAL: تبدیل تومان به ریال در فرم ویرایش');
        });
    </script>
}