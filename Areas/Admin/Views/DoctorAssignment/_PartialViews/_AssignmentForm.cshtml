@model ClinicApp.ViewModels.DoctorManagementVM.DoctorAssignmentOperationViewModel

@using (Html.BeginForm("AssignToDepartment", "DoctorAssignment", FormMethod.Post, 
       new { id = "assignmentForm", @class = "needs-validation", novalidate = "novalidate" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.DoctorId)
    @Html.HiddenFor(m => m.DoctorName)

    @Html.ValidationSummary(true, "", new { @class = "alert alert-danger" })

    <!-- Doctor Information -->
    <div class="form-section">
        <h5>
            <i class="fas fa-user-md me-2"></i>
            اطلاعات پزشک
        </h5>
        <div class="row">
            <div class="col-md-6">
                <div class="mb-3">
                    @Html.LabelFor(m => m.DoctorName, "نام پزشک", new { @class = "form-label fw-bold" })
                    @Html.TextBoxFor(m => m.DoctorName, new { @class = "form-control", @readonly = "readonly" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="mb-3">
                    <label class="form-label fw-bold">کد ملی</label>
                    <input type="text" class="form-control" value="@Model.DoctorNationalCode" readonly />
                </div>
            </div>
        </div>
    </div>

    <!-- Department Selection -->
    <div class="form-section">
        <h5>
            <i class="fas fa-hospital me-2"></i>
            انتخاب دپارتمان
        </h5>
        <div class="row">
            <div class="col-md-6">
                <div class="mb-3">
                    @Html.LabelFor(m => m.DepartmentId, "دپارتمان", new { @class = "form-label fw-bold" })
                    @Html.DropDownListFor(m => m.DepartmentId, 
                        new SelectList(ViewBag.Departments ?? new List<object>(), "Value", "Text"), 
                        "انتخاب دپارتمان...", 
                        new { @class = "form-select", required = "required" })
                    @Html.ValidationMessageFor(m => m.DepartmentId, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="mb-3">
                    <label class="form-label fw-bold">وضعیت انتساب</label>
                    <div class="form-check">
                        @Html.CheckBoxFor(m => m.IsActive, new { @class = "form-check-input", @checked = "checked" })
                        <label class="form-check-label" for="@Html.IdFor(m => m.IsActive)">
                            انتساب فعال
                        </label>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Service Categories -->
    <div class="form-section">
        <h5>
            <i class="fas fa-stethoscope me-2"></i>
            صلاحیت‌های خدماتی
        </h5>
        <div class="row">
            <div class="col-12">
                <div class="mb-3">
                    @Html.LabelFor(m => m.ServiceCategoryIds, "صلاحیت‌ها", new { @class = "form-label fw-bold" })
                    @Html.ListBoxFor(m => m.ServiceCategoryIds, 
                        new MultiSelectList(ViewBag.ServiceCategories ?? new List<object>(), "Value", "Text"), 
                        new { @class = "form-select", multiple = "multiple", id = "serviceCategories" })
                    @Html.ValidationMessageFor(m => m.ServiceCategoryIds, "", new { @class = "text-danger" })
                    <div class="form-text">
                        <i class="fas fa-info-circle me-1"></i>
                        می‌توانید چندین صلاحیت را انتخاب کنید (Ctrl+Click)
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Description -->
    <div class="form-section">
        <h5>
            <i class="fas fa-comment me-2"></i>
            توضیحات
        </h5>
        <div class="row">
            <div class="col-12">
                <div class="mb-3">
                    @Html.LabelFor(m => m.Description, "توضیحات", new { @class = "form-label fw-bold" })
                    @Html.TextAreaFor(m => m.Description, new { @class = "form-control", rows = "3", 
                        placeholder = "توضیحات مربوط به انتساب پزشک..." })
                    @Html.ValidationMessageFor(m => m.Description, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
    </div>

    <!-- Action Buttons -->
    <div class="row mt-4">
        <div class="col-12">
            <div class="d-flex justify-content-between">
                <div>
                    <button type="button" class="btn btn-outline-secondary" onclick="validateForm()">
                        <i class="fas fa-check-circle me-2"></i>
                        اعتبارسنجی
                    </button>
                    <button type="button" class="btn btn-outline-info" onclick="checkCompatibility()">
                        <i class="fas fa-link me-2"></i>
                        بررسی سازگاری
                    </button>
                </div>
                <div>
                    <a href="@Url.Action("Index", "DoctorAssignment")" class="btn btn-secondary me-2">
                        <i class="fas fa-times me-2"></i>
                        انصراف
                    </a>
                    <button type="submit" class="btn btn-success btn-submit">
                        <i class="fas fa-save me-2"></i>
                        ذخیره انتساب
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<style>
    .form-section {
        border-left: 4px solid #667eea;
        padding-left: 20px;
        margin-bottom: 30px;
    }
    .form-section h5 {
        color: #667eea;
        font-weight: 600;
    }
    .btn-submit {
        border-radius: 25px;
        font-weight: 600;
        padding: 12px 30px;
        transition: all 0.3s ease;
    }
    .btn-submit:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
    }
    .form-control:read-only {
        background-color: #f8f9fa;
        opacity: 1;
    }
    .form-select[multiple] {
        min-height: 120px;
    }
</style>

<script>
    // محافظت jQuery - اطمینان از بارگذاری کامل jQuery
    (function() {
        function ensureJQuery(callback) {
            if (typeof jQuery !== 'undefined' && typeof $.fn !== 'undefined') {
                callback();
            } else {
                setTimeout(function() {
                    ensureJQuery(callback);
                }, 50);
            }
        }

        ensureJQuery(function() {
            $(document).ready(function () {
                initializeSelect2();
                initializeFormValidation();
                setupEventHandlers();
            });
        });

        function initializeSelect2() {
            $('#DepartmentId').select2({
                placeholder: 'انتخاب دپارتمان...',
                allowClear: true,
                language: 'fa',
                width: '100%'
            });

            $('#serviceCategories').select2({
                placeholder: 'انتخاب صلاحیت‌ها...',
                allowClear: true,
                language: 'fa',
                width: '100%',
                maximumSelectionLength: 10
            });
        }

    function initializeFormValidation() {
        $('#assignmentForm').validate({
            rules: {
                DepartmentId: {
                    required: true
                },
                ServiceCategoryIds: {
                    required: true,
                    minlength: 1
                },
                Description: {
                    maxlength: 500
                }
            },
            messages: {
                DepartmentId: {
                    required: 'لطفاً دپارتمان را انتخاب کنید'
                },
                ServiceCategoryIds: {
                    required: 'لطفاً حداقل یک صلاحیت را انتخاب کنید',
                    minlength: 'لطفاً حداقل یک صلاحیت را انتخاب کنید'
                },
                Description: {
                    maxlength: 'توضیحات نمی‌تواند بیشتر از 500 کاراکتر باشد'
                }
            },
            errorClass: 'text-danger',
            highlight: function (element) {
                $(element).addClass('is-invalid');
            },
            unhighlight: function (element) {
                $(element).removeClass('is-invalid');
            },
            submitHandler: function (form) {
                showLoading();
                return true;
            }
        });
    }

    function setupEventHandlers() {
        $('#DepartmentId').on('change', function() {
            const departmentId = $(this).val();
            if (departmentId) {
                loadServiceCategories(departmentId);
            }
        });
    }

    function loadServiceCategories(departmentId) {
        if (!departmentId) {
            updateServiceCategories([]);
            return;
        }

        $.get('@Url.Action("GetServiceCategoriesByDepartment", "DoctorAssignment")', { departmentId: departmentId })
            .done(function (data) {
                if (data.success) {
                    updateServiceCategories(data.data);
                } else {
                    console.error('خطا در بارگذاری دسته‌بندی‌های خدماتی:', data.message);
                    updateServiceCategories([]);
                }
            })
            .fail(function (xhr, status, error) {
                console.error('خطا در ارتباط با سرور برای دسته‌بندی‌های خدماتی:', error);
                updateServiceCategories([]);
            });
    }

    function updateServiceCategories(categories) {
        const select = $('#serviceCategories');
        select.empty();
        
        if (categories && categories.length > 0) {
            categories.forEach(function (category) {
                select.append(new Option(category.Name, category.Id, false, false));
            });
        } else {
            select.append(new Option('هیچ دسته‌بندی یافت نشد', '', true, true));
        }
        
        select.trigger('change');
    }

    function validateForm() {
        if ($('#assignmentForm').valid()) {
            Swal.fire({
                title: 'اعتبارسنجی موفق',
                text: 'فرم شما معتبر است و آماده ارسال می‌باشد',
                icon: 'success',
                confirmButtonText: 'باشه'
            });
        } else {
            Swal.fire({
                title: 'خطا در اعتبارسنجی',
                text: 'لطفاً خطاهای فرم را برطرف کنید',
                icon: 'error',
                confirmButtonText: 'باشه'
            });
        }
    }

    function checkCompatibility() {
        const doctorId = $('#DoctorId').val();
        const departmentId = $('#DepartmentId').val();

        if (!departmentId) {
            Swal.fire({
                title: 'خطا',
                text: 'لطفاً ابتدا دپارتمان را انتخاب کنید',
                icon: 'error',
                confirmButtonText: 'باشه'
            });
            return;
        }

        $.post('@Url.Action("ValidateAssignment", "DoctorAssignment")', {
            doctorId: doctorId,
            departmentId: departmentId
        })
        .done(function (data) {
            if (data.success) {
                Swal.fire({
                    title: 'سازگاری تایید شد',
                    text: data.message,
                    icon: 'success',
                    confirmButtonText: 'باشه'
                });
            } else {
                Swal.fire({
                    title: 'عدم سازگاری',
                    text: data.message,
                    icon: 'warning',
                    confirmButtonText: 'باشه'
                });
            }
        })
        .fail(function () {
            Swal.fire({
                title: 'خطا در بررسی',
                text: 'لطفاً دوباره تلاش کنید',
                icon: 'error',
                confirmButtonText: 'باشه'
            });
        });
    }

    function showLoading() {
        Swal.fire({
            title: 'در حال ذخیره...',
            text: 'لطفاً صبر کنید',
            allowOutsideClick: false,
            didOpen: () => {
                Swal.showLoading();
            }
        });
    }
</script>
