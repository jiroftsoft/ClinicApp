@model ClinicApp.ViewModels.DoctorManagementVM.DoctorAssignmentOperationViewModel
@* صفحه انتساب کلی پزشک به دپارتمان - برای انتساب‌های تخصصی به DoctorDepartmentController مراجعه شود *@
@{
    ViewBag.Title = "انتساب کلی پزشک به دپارتمان";
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
}

@section Styles {
    <link href="~/Content/plugins/sweetalert2/sweetalert2.min.css" rel="stylesheet" />
    <link href="~/Content/plugins/select2/css/select2.min.css" rel="stylesheet" />
    <style>
        .assignment-form {
            background: white;
            border-radius: 15px;
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
        }
        .form-section {
            border-left: 4px solid #667eea;
            padding-left: 20px;
            margin-bottom: 30px;
        }
        .form-section h5 {
            color: #667eea;
            font-weight: 600;
        }
        .doctor-info-card {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-radius: 10px;
            padding: 20px;
        }
        .select2-container--default .select2-selection--multiple {
            border: 1px solid #ced4da;
            border-radius: 8px;
        }
        .btn-submit {
            border-radius: 25px;
            font-weight: 600;
            padding: 12px 30px;
            transition: all 0.3s ease;
        }
        .btn-submit:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        }
        .validation-summary {
            border-radius: 10px;
            border: none;
        }
        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(255, 255, 255, 0.8);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 9999;
        }
    </style>
}

<div class="loading-overlay">
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">در حال پردازش...</span>
    </div>
</div>

<div class="container-fluid">
    <!-- Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h2 class="mb-0 text-primary">
                        <i class="fas fa-user-plus me-2"></i>
                        انتساب کلی پزشک به دپارتمان
                    </h2>
                    <p class="text-muted mb-0">انتساب کلی پزشک به دپارتمان و تعیین صلاحیت‌های خدماتی - برای انتساب‌های تخصصی به DoctorDepartmentController مراجعه شود</p>
                </div>
                <div>
                    <a href="@Url.Action("Index", "DoctorAssignment")" class="btn btn-outline-secondary">
                        <i class="fas fa-arrow-right me-2"></i>
                        بازگشت به لیست
                    </a>
                </div>
            </div>
        </div>
    </div>

    <!-- Doctor Information Card -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="doctor-info-card">
                <div class="row align-items-center">
                    <div class="col-md-8">
                        <h4 class="mb-2">
                            <i class="fas fa-user-md me-2"></i>
                            @Model.DoctorName
                        </h4>
                        <p class="mb-0 opacity-75">
                            <i class="fas fa-id-card me-2"></i>
                            کد ملی: @Model.DoctorNationalCode
                        </p>
                    </div>
                    <div class="col-md-4 text-end">
                        <div class="d-flex justify-content-end">
                            <div class="text-center me-4">
                                <h5 class="mb-1">@ViewBag.ActiveAssignments</h5>
                                <small class="opacity-75">انتسابات فعال</small>
                            </div>
                            <div class="text-center">
                                <h5 class="mb-1">@ViewBag.TotalDepartments</h5>
                                <small class="opacity-75">دپارتمان‌ها</small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Assignment Form -->
    <div class="row">
        <div class="col-12">
            @Html.Partial("_PartialViews/_AssignmentForm", Model)
        </div>
    </div>
</div>

<!-- Dependencies Modal -->
<div class="modal fade" id="dependenciesModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-link me-2"></i>
                    بررسی وابستگی‌ها
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div id="dependenciesContent">
                    <!-- Content will be loaded here -->
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">بستن</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/content/plugins/sweetalert2/sweetalert2@11.js"></script>
    <script src="~/content/plugins/select2/js/select2.min.js"></script>
    <script src="~/content/plugins/select2/js/fa.min.js"></script>
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
    
    <script>
        // محافظت jQuery - اطمینان از بارگذاری کامل jQuery
        (function() {
            function ensureJQuery(callback) {
                if (typeof jQuery !== 'undefined' && typeof $.fn !== 'undefined') {
                    callback();
                } else {
                    setTimeout(function() {
                        ensureJQuery(callback);
                    }, 50);
                }
            }

            ensureJQuery(function() {
                $(document).ready(function () {
                    initializeSelect2();
                    initializeFormValidation();
                });
            });

        function initializeSelect2() {
            $('#ServiceCategoryIds').select2({
                placeholder: 'انتخاب سرفصل‌های خدماتی...',
                allowClear: true,
                language: 'fa',
                width: '100%',
                tags: false,
                tokenSeparators: [',', ' ']
            });

            $('#DepartmentId').select2({
                placeholder: 'انتخاب دپارتمان...',
                allowClear: true,
                language: 'fa',
                width: '100%'
            });
        }

        function initializeFormValidation() {
            $('#assignmentForm').validate({
                rules: {
                    DepartmentId: {
                        required: true
                    },
                    Description: {
                        maxlength: 500
                    }
                },
                messages: {
                    DepartmentId: {
                        required: 'لطفاً دپارتمان را انتخاب کنید'
                    },
                    Description: {
                        maxlength: 'توضیحات نمی‌تواند بیشتر از 500 کاراکتر باشد'
                    }
                },
                errorClass: 'text-danger',
                highlight: function (element) {
                    $(element).addClass('is-invalid');
                },
                unhighlight: function (element) {
                    $(element).removeClass('is-invalid');
                },
                submitHandler: function (form) {
                    showLoading();
                    return true;
                }
            });
        }

        function validateForm() {
            if ($('#assignmentForm').valid()) {
                showSuccess('اعتبارسنجی موفق', 'فرم شما معتبر است و آماده ارسال می‌باشد');
            } else {
                showError('خطا در اعتبارسنجی', 'لطفاً خطاهای فرم را برطرف کنید');
            }
        }

        function checkDependencies() {
            const doctorId = $('#DoctorId').val();
            const departmentId = $('#DepartmentId').val();

            if (!departmentId) {
                showError('خطا', 'لطفاً ابتدا دپارتمان را انتخاب کنید');
                return;
            }

            showLoading();

            $.post('@Url.Action("CheckDependencies", "DoctorAssignment")', {
                doctorId: doctorId,
                departmentId: departmentId
            })
            .done(function (data) {
                if (data.success) {
                    showDependenciesModal(data.data);
                } else {
                    showError('خطا در بررسی وابستگی‌ها', data.message);
                }
            })
            .fail(function () {
                showError('خطا در ارتباط با سرور', 'لطفاً دوباره تلاش کنید');
            })
            .always(function () {
                hideLoading();
            });
        }

        function showDependenciesModal(dependencies) {
            let content = '<div class="alert alert-info">';
            content += '<h6><i class="fas fa-info-circle me-2"></i>وضعیت وابستگی‌ها</h6>';
            
            if (dependencies.HasDependencies) {
                content += '<ul class="list-unstyled mb-0">';
                dependencies.Dependencies.forEach(function (dep) {
                    content += `<li><i class="fas fa-check text-success me-2"></i>${dep}</li>`;
                });
                content += '</ul>';
            } else {
                content += '<p class="mb-0">هیچ وابستگی خاصی یافت نشد.</p>';
            }
            
            content += '</div>';

            $('#dependenciesContent').html(content);
            $('#dependenciesModal').modal('show');
        }

        // Form submission handling
        $('#assignmentForm').on('submit', function (e) {
            if (!$(this).valid()) {
                e.preventDefault();
                showError('خطا در اعتبارسنجی', 'لطفاً خطاهای فرم را برطرف کنید');
                return false;
            }

            // Additional validation
            const departmentId = $('#DepartmentId').val();
            const serviceCategories = $('#ServiceCategoryIds').val();

            if (!departmentId) {
                e.preventDefault();
                showError('خطا', 'لطفاً دپارتمان را انتخاب کنید');
                return false;
            }

            if (!serviceCategories || serviceCategories.length === 0) {
                Swal.fire({
                    title: 'هشدار',
                    text: 'هیچ سرفصل خدماتی انتخاب نشده است. آیا ادامه می‌دهید؟',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'بله، ادامه بده',
                    cancelButtonText: 'انصراف'
                }).then((result) => {
                    if (result.isConfirmed) {
                        showLoading();
                        return true;
                    }
                });
                e.preventDefault();
                return false;
            }

            showLoading();
            return true;
        });

        // Auto-save draft functionality
        let autoSaveTimer;
        $('input, select, textarea').on('change', function () {
            clearTimeout(autoSaveTimer);
            autoSaveTimer = setTimeout(function () {
                saveDraft();
            }, 2000);
        });

        function saveDraft() {
            const formData = $('#assignmentForm').serialize();
            localStorage.setItem('assignmentFormDraft', formData);
        }

        function loadDraft() {
            const draft = localStorage.getItem('assignmentFormDraft');
            if (draft) {
                Swal.fire({
                    title: 'بازگردانی پیش‌نویس',
                    text: 'آیا می‌خواهید فرم ذخیره شده قبلی را بازگردانی کنید؟',
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'بله، بازگردانی کن',
                    cancelButtonText: 'خیر'
                }).then((result) => {
                    if (result.isConfirmed) {
                        const form = $('#assignmentForm');
                        const params = new URLSearchParams(draft);
                        
                        params.forEach(function (value, key) {
                            const field = form.find(`[name="${key}"]`);
                            if (field.length > 0) {
                                if (field.is('select[multiple]')) {
                                    field.val(value.split(','));
                                } else {
                                    field.val(value);
                                }
                            }
                        });

                        // Refresh Select2
                        $('#ServiceCategoryIds, #DepartmentId').trigger('change');
                        
                        showSuccess('بازگردانی موفق', 'فرم با موفقیت بازگردانی شد');
                    }
                });
            }
        }

        // Load draft on page load
        $(window).on('load', function () {
            loadDraft();
        });

        // Clear draft on successful submission
        $(document).on('submit', '#assignmentForm', function () {
            localStorage.removeItem('assignmentFormDraft');
        });

        function showLoading() {
            $('.loading-overlay').show();
        }

        function hideLoading() {
            $('.loading-overlay').hide();
        }

        function showSuccess(title, message) {
            Swal.fire({
                title: title,
                text: message,
                icon: 'success',
                confirmButtonText: 'باشه'
            });
        }

        function showError(title, message) {
            Swal.fire({
                title: title,
                text: message,
                icon: 'error',
                confirmButtonText: 'باشه'
            });
        }

        // Keyboard shortcuts
        $(document).keydown(function (e) {
            // Ctrl+S for save
            if (e.ctrlKey && e.keyCode === 83) {
                e.preventDefault();
                $('#assignmentForm').submit();
            }
            
            // Ctrl+Shift+V for validation
            if (e.ctrlKey && e.shiftKey && e.keyCode === 86) {
                e.preventDefault();
                validateForm();
            }
        });
    </script>
}
