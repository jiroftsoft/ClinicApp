@{
    ViewBag.Title = "مدیریت انتسابات پزشکان";
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
}

@model ClinicApp.ViewModels.DoctorManagementVM.DoctorAssignmentIndexViewModel

@Html.AntiForgeryToken()

@section Styles {
    <link href="~/Content/plugins/DataTables/css/dataTables.bootstrap4.min.css" rel="stylesheet" />
    <link href="~/Content/plugins/DataTables/css/responsive.bootstrap4.min.css" rel="stylesheet" />
    <link href="~/Content/plugins/sweetalert2/sweetalert2.min.css" rel="stylesheet" />
    <link href="~/Content/plugins/select2/css/select2.min.css" rel="stylesheet" />
    <link href="~/Content/plugins/persian-datepicker/persian-datepicker.min.css" rel="stylesheet" />
    <style>
        .stats-card {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-radius: 15px;
            color: white;
            transition: transform 0.3s ease;
        }

            .stats-card:hover {
                transform: translateY(-5px);
            }

        .stats-icon {
            font-size: 2.5rem;
            opacity: 0.8;
        }

        .assignment-table {
            background: white;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .btn-assignment {
            border-radius: 25px;
            font-weight: 600;
            transition: all 0.3s ease;
        }

            .btn-assignment:hover {
                transform: translateY(-2px);
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            }

        .search-box {
            background: white;
            border-radius: 25px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        .loading-spinner {
            display: none;
        }
    </style>
}

<div class="container-fluid">
    <!-- Header Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h2 class="mb-0 text-primary">
                        <i class="fas fa-user-md me-2"></i>
                        مدیریت انتسابات پزشکان
                    </h2>
                    <p class="text-muted mb-0">مدیریت کامل انتسابات پزشکان به دپارتمان‌ها و سرفصل‌های خدماتی</p>
                </div>
                <div>
                    <button type="button" class="btn btn-success btn-assignment" onclick="showBulkAssignmentModal()">
                        <i class="fas fa-users me-2"></i>
                        انتساب گروهی
                    </button>
                    <button type="button" class="btn btn-info btn-assignment" onclick="refreshData()">
                        <i class="fas fa-sync-alt me-2"></i>
                        بروزرسانی
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters and Statistics -->
    @Html.Partial("_PartialViews/_AssignmentFilters", Model.Filters)
    @Html.Partial("_PartialViews/_AssignmentStats", Model.Stats)

    <!-- Main Content -->
    <div class="row">
        <div class="col-12">
            <div class="assignment-table p-4">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h4 class="mb-0">
                        <i class="fas fa-list me-2"></i>
                        لیست انتسابات پزشکان
                    </h4>
                    <div class="loading-spinner">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">در حال بارگذاری...</span>
                        </div>
                    </div>
                </div>

                <div class="table-responsive">
                    <table id="assignmentsTable" class="table table-striped table-hover">
                        <thead class="table-dark">
                            <tr>
                                <th>ردیف</th>
                                <th>نام پزشک</th>
                                <th>کد ملی</th>
                                <th>دپارتمان‌ها</th>
                                <th>سرفصل‌های خدماتی</th>
                                <th>وضعیت</th>
                                <th>تاریخ انتساب</th>
                                <th>عملیات</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Data will be loaded via AJAX -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Bulk Assignment Modal -->
<div class="modal fade" id="bulkAssignmentModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-users me-2"></i>
                    انتساب گروهی پزشکان
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label class="form-label">انتخاب پزشکان</label>
                        <select id="bulkDoctors" class="form-select" multiple>
                            <!-- Doctors will be loaded here -->
                        </select>
                    </div>
                    <div class="col-md-6 mb-3">
                        <label class="form-label">دپارتمان مقصد</label>
                        <select id="bulkDepartment" class="form-select">
                            <option value="">انتخاب کنید...</option>
                        </select>
                    </div>
                </div>
                <div class="row">
                    <div class="col-12 mb-3">
                        <label class="form-label">سرفصل‌های خدماتی</label>
                        <select id="bulkServiceCategories" class="form-select" multiple>
                            <!-- Service categories will be loaded here -->
                        </select>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">انصراف</button>
                <button type="button" class="btn btn-success" onclick="performBulkAssignment()">
                    <i class="fas fa-save me-2"></i>
                    انتساب گروهی
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- Scripts are loaded via bundles in _AdminLayout.cshtml -->
    <!-- Additional scripts specific to this page -->

    <script>
        let assignmentsTable;

        // محافظت jQuery - اطمینان از بارگذاری کامل jQuery
        (function() {
            function ensureJQuery(callback) {
                if (typeof jQuery !== 'undefined' && typeof $.fn !== 'undefined') {
                    callback();
                } else {
                    setTimeout(function() {
                        ensureJQuery(callback);
                    }, 50);
                }
            }

            ensureJQuery(function() {
                $(document).ready(function () {
                    try {
                        initDataTable();
                        initSelect2();
                        initPersianDatePickers();
                        loadInitialData();
                        initSearchBox();
                        console.log('DoctorAssignment Index initialized successfully');
                    } catch (error) {
                        console.error('Error initializing DoctorAssignment Index:', error);
                        showError('خطا در بارگذاری', 'خطا در راه‌اندازی صفحه. لطفاً صفحه را رفرش کنید.');
                    }
                });
            });
        })();

        /* -----------------------------
           📌 DataTable
        ----------------------------- */
        function initDataTable() {
            console.log('Initializing DataTable...');
            console.log('jQuery version:', $.fn.jquery);
            console.log('DataTable plugin available:', typeof $.fn.DataTable !== 'undefined');
            
            if (typeof $.fn.DataTable === 'undefined') {
                console.error('DataTable plugin not loaded');
                showError('خطا در بارگذاری', 'DataTable plugin بارگذاری نشده است');
                return;
            }
            
            // ابتدا یک تست ساده انجام می‌دهیم
            console.log('Testing AJAX call to GetAssignments...');
            $.ajax({
                url: '@Url.Action("GetAssignments", "DoctorAssignment")',
                type: 'POST',
                data: {
                    __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val(),
                    draw: 1,
                    start: 0,
                    length: 10
                },
                success: function(response) {
                    console.log('AJAX test successful:', response);
                },
                error: function(xhr, status, error) {
                    console.error('AJAX test failed:', status, error);
                    console.error('Response:', xhr.responseText);
                }
            });
            
            try {
                assignmentsTable = $('#assignmentsTable').DataTable({
                    language: { url: '@Url.Content("~/Content/plugins/DataTables/js/fa.json")' },
                    responsive: true,
                    processing: true,
                    serverSide: true,
                    pageLength: 25,
                    order: [[1, 'asc']], // sort by doctor name
                    ajax: {
                        url: '@Url.Action("GetAssignments", "DoctorAssignment")',
                        type: 'POST',
                        data: function (d) {
                            d.__RequestVerificationToken = $('input[name="__RequestVerificationToken"]').val();
                            d.searchTerm = $('#searchInput').val();
                            d.departmentId = $('#departmentFilter').val();
                            d.status = $('#statusFilter').val();
                            d.dateFrom = $('#DateFrom').val();
                            d.dateTo = $('#DateTo').val();
                            d.serviceCategoryId = $('#ServiceCategoryId').val();
                            d.assignmentType = $('#AssignmentType').val();
                        },
                        error: function (xhr, error, thrown) {
                            console.error('DataTable AJAX Error:', error, thrown);
                            console.error('Response:', xhr.responseText);
                            if (xhr.status === 500) {
                                showError('خطای سرور', 'خطا در پردازش درخواست. لطفاً دوباره تلاش کنید.');
                            } else if (xhr.status === 401) {
                                showError('خطای دسترسی', 'لطفاً مجدداً وارد شوید.');
                            } else {
                                showError('خطا در بارگذاری', 'لطفاً دوباره تلاش کنید');
                            }
                        }
                    },
                    columns: [
                        { data: null, render: (d, t, r, m) => m.row + m.settings._iDisplayStart + 1 },
                        { data: 'DoctorName' },
                        { data: 'DoctorNationalCode' },
                        { data: 'Departments', render: renderDepartments },
                        { data: 'ServiceCategories', render: renderCategories },
                        { data: 'Status', render: renderStatus },
                        { data: 'AssignmentDate', render: formatDate },
                        { data: 'Id', render: renderActions }
                    ],
                    columnDefs: [
                        { targets: [0, 7], orderable: false },
                        { targets: [3, 4], width: '20%' },
                        { targets: [5], width: '10%' }
                    ]
                });
                
                console.log('DataTable initialized successfully');
            } catch (error) {
                console.error('Error initializing DataTable:', error);
                showError('خطا در راه‌اندازی جدول', 'خطا در راه‌اندازی DataTable');
            }
        }

        function renderDepartments(data) {
            if (!data?.length) return '<span class="text-muted">بدون انتساب</span>';
            return data.map(d => `<span class="badge bg-primary me-1">${escapeHtml(d.Name)}</span>`).join('');
        }

        function renderCategories(data) {
            if (!data?.length) return '<span class="text-muted">بدون صلاحیت</span>';
            return data.map(c => `<span class="badge bg-info me-1">${escapeHtml(c.Name)}</span>`).join('');
        }

        function renderStatus(status) {
            const map = {
                active: '<span class="badge bg-success">فعال</span>',
                inactive: '<span class="badge bg-secondary">غیرفعال</span>',
                pending: '<span class="badge bg-warning">انتظار تایید</span>'
            };
            return map[status] || '<span class="badge bg-secondary">نامشخص</span>';
        }

        function renderActions(id) {
            return `
                <div class="btn-group" role="group">
                    <button class="btn btn-sm btn-outline-primary" onclick="viewDetails(${id})"><i class="fas fa-eye"></i></button>
                    <button class="btn btn-sm btn-outline-success" onclick="editAssignment(${id})"><i class="fas fa-edit"></i></button>
                    <button class="btn btn-sm btn-outline-warning" onclick="transferDoctor(${id})"><i class="fas fa-exchange-alt"></i></button>
                    <button class="btn btn-sm btn-outline-danger" onclick="removeAssignment(${id})"><i class="fas fa-trash"></i></button>
                </div>`;
        }

        /* -----------------------------
           📌 Select2
        ----------------------------- */
        function initSelect2() {
            if (typeof $.fn.select2 !== 'undefined') {
                $('#departmentFilter, #bulkDepartment, #bulkDoctors, #bulkServiceCategories').select2({
                    placeholder: 'انتخاب کنید...',
                    allowClear: true,
                    language: 'fa'
                });
            } else {
                console.warn('Select2 plugin not loaded');
            }
        }

        /* -----------------------------
           📌 Persian DatePicker
        ----------------------------- */
        function initPersianDatePickers() {
            console.log('Initializing Persian DatePickers...');
            console.log('Persian DatePicker plugin available:', typeof $.fn.persianDatepicker !== 'undefined');
            
            if (typeof $.fn.persianDatepicker !== 'undefined') {
                try {
                    $('.persian-date').persianDatepicker({
                        format: 'YYYY/MM/DD',
                        initialValue: false,
                        autoClose: true
                    });
                    console.log('Persian DatePickers initialized successfully');
                } catch (error) {
                    console.error('Error initializing Persian DatePickers:', error);
                }
            } else {
                console.warn('Persian DatePicker plugin not loaded');
            }
        }

        /* -----------------------------
           📌 Load initial data
        ----------------------------- */
        function loadInitialData() {
            // Data is already loaded from ViewBag in the controller
            // No need for additional AJAX calls that might fail
            console.log('Initial data loaded from ViewBag');
        }

        function populateSelect(selector, data, defaultOption = null, showCode = false) {
            const select = $(selector);
            select.empty();
            if (defaultOption) select.append(`<option value="">${defaultOption}</option>`);
            data.forEach(item => {
                const text = showCode ? `${item.FullName} - ${item.NationalCode}` : item.Name;
                select.append(new Option(text, item.Id));
            });
        }

        /* -----------------------------
           📌 Actions
        ----------------------------- */
        function applyFilters() { assignmentsTable.ajax.reload(); }
        function refreshTable() { assignmentsTable.ajax.reload(); }
        function refreshData() { assignmentsTable.ajax.reload(); }
        
        function showBulkAssignmentModal() {
            $('#bulkAssignmentModal').modal('show');
        }

        function viewDetails(id) { window.location.href = '@Url.Action("Details", "DoctorAssignment")/' + id; }
        function editAssignment(id) { window.location.href = '@Url.Action("AssignToDepartment", "DoctorAssignment", new { doctorId = "__ID__" })'.replace('__ID__', id); }
        function transferDoctor(id) { window.location.href = '@Url.Action("TransferDoctor", "DoctorAssignment", new { doctorId = "__ID__" })'.replace('__ID__', id); }

        function removeAssignment(id) {
            Swal.fire({
                title: 'آیا مطمئن هستید؟',
                text: 'این عملیات قابل بازگشت نیست!',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'بله، حذف کن',
                cancelButtonText: 'انصراف'
            }).then(r => { if (r.isConfirmed) performRemoveAssignment(id); });
        }

        function performRemoveAssignment(id) {
            showLoading();
            $.post('@Url.Action("RemoveAssignments", "DoctorAssignment")', {
                id: id,
                __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
            }).done(r => {
                if (r.success) {
                    showSuccess('حذف موفق', 'انتساب حذف شد');
                    refreshTable();
                } else showError('خطا', r.message);
            }).fail((xhr, status, error) => {
                console.error('Remove assignment error:', status, error);
                if (xhr.status === 500) {
                    showError('خطای سرور', 'خطا در پردازش درخواست حذف');
                } else {
                    showError('خطا', 'لطفاً دوباره تلاش کنید');
                }
            }).always(hideLoading);
        }

        function performBulkAssignment() {
            const doctors = $('#bulkDoctors').val();
            const department = $('#bulkDepartment').val();
            const categories = $('#bulkServiceCategories').val() || [];

            if (!doctors?.length) return showError('خطا', 'حداقل یک پزشک انتخاب کنید');
            if (!department) return showError('خطا', 'لطفاً دپارتمان را انتخاب کنید');

            const assignments = doctors.map(d => ({
                DoctorId: d,
                DepartmentId: department,
                ServiceCategoryIds: categories
            }));

            showLoading();
            $.ajax({
                url: '@Url.Action("BulkAssign", "DoctorAssignment")',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ models: assignments }),
                headers: { 'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val() }
            }).done(r => {
                if (r.success) {
                    showSuccess('موفق', `${r.successCount} پزشک انتساب شدند`);
                    $('#bulkAssignmentModal').modal('hide');
                    refreshTable();
                } else showError('خطا', r.message);
            }).fail((xhr, status, error) => {
                console.error('Bulk assignment error:', status, error);
                if (xhr.status === 500) {
                    showError('خطای سرور', 'خطا در پردازش انتساب گروهی');
                } else {
                    showError('خطا', 'لطفاً دوباره تلاش کنید');
                }
            }).always(hideLoading);
        }

        /* -----------------------------
           📌 Utils
        ----------------------------- */
        function initSearchBox() {
            $('#searchInput').on('keyup', e => { if (e.keyCode === 13) applyFilters(); });
        }

        function formatDate(dateString) {
            if (!dateString) return '-';
            try {
                return new Date(dateString).toLocaleDateString('fa-IR');
            } catch { return '-'; }
        }

        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        function showLoading() { $('.loading-spinner').show(); }
        function hideLoading() { $('.loading-spinner').hide(); }

        function showSuccess(title, msg) { 
            console.log('SweetAlert2 available:', typeof Swal !== 'undefined');
            if (typeof Swal !== 'undefined') {
                Swal.fire({ title, text: msg, icon: 'success' }); 
            } else {
                alert(title + ': ' + msg);
            }
        }
        function showError(title, msg) { 
            console.log('SweetAlert2 available:', typeof Swal !== 'undefined');
            if (typeof Swal !== 'undefined') {
                Swal.fire({ title, text: msg, icon: 'error' }); 
            } else {
                alert(title + ': ' + msg);
            }
        }
    </script>
}
