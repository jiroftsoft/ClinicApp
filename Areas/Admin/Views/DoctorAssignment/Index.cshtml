@{
    ViewBag.Title = "مدیریت انتسابات کلی پزشکان";
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
}

@model ClinicApp.ViewModels.DoctorManagementVM.DoctorAssignmentIndexViewModel
@* صفحه اصلی مدیریت انتسابات کلی پزشکان - برای عملیات تخصصی به ماژول‌های مربوطه مراجعه شود *@

@Html.AntiForgeryToken()

@section Styles {
    <link href="~/Content/plugins/DataTables/css/dataTables.bootstrap4.min.css" rel="stylesheet" />
    <link href="~/Content/plugins/DataTables/css/responsive.bootstrap4.min.css" rel="stylesheet" />
    <link href="~/Content/plugins/sweetalert2/sweetalert2.min.css" rel="stylesheet" />
    <link href="~/Content/plugins/select2/css/select2.min.css" rel="stylesheet" />
    <link href="~/Content/plugins/persian-datepicker/persian-datepicker.min.css" rel="stylesheet" />
    <link href="~/Content/css/doctor-assignment-index.css" rel="stylesheet" />
}

<div class="container-fluid">
    <!-- Header Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h2 class="mb-0 text-primary">
                        <i class="fas fa-user-md me-2"></i>
                        مدیریت انتسابات کلی پزشکان
                    </h2>
                    <p class="text-muted mb-0">مدیریت عملیات انتساب، انتقال و حذف انتسابات پزشکان - برای عملیات تخصصی به ماژول‌های مربوطه مراجعه شود</p>
                </div>
                <div>
                    <button type="button" class="btn btn-info btn-assignment" id="refreshDataBtn" aria-label="بروزرسانی داده‌ها">
                        <i class="fas fa-sync-alt me-2"></i>
                        بروزرسانی
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters and Statistics -->
    @Html.Partial("_PartialViews/_AssignmentFilters", Model.Filters)
    @Html.Partial("_PartialViews/_AssignmentStats", Model.Stats)

    <!-- Main Content -->
    <div class="row">
        <div class="col-12">
            <div class="assignment-table p-4">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h4 class="mb-0">
                        <i class="fas fa-list me-2"></i>
                        لیست انتسابات پزشکان
                    </h4>
                    <div class="loading-spinner" id="tableLoadingSpinner" style="display: none;">
                        <div class="spinner-border text-primary" role="status" aria-label="در حال بارگذاری داده‌ها">
                            <span class="visually-hidden">در حال بارگذاری...</span>
                        </div>
                    </div>
                </div>

                <div class="table-responsive">
                    <table id="assignmentsTable" class="table table-striped table-hover" role="table" aria-label="لیست انتسابات پزشکان">
                        <thead class="table-dark" role="rowgroup">
                            <tr role="row">
                                <th role="columnheader" scope="col" aria-label="ردیف">ردیف</th>
                                <th role="columnheader" scope="col" aria-label="نام پزشک">نام پزشک</th>
                                <th role="columnheader" scope="col" aria-label="کد ملی">کد ملی</th>
                                <th role="columnheader" scope="col" aria-label="دپارتمان‌ها">دپارتمان‌ها</th>
                                <th role="columnheader" scope="col" aria-label="سرفصل‌های خدماتی">سرفصل‌های خدماتی</th>
                                <th role="columnheader" scope="col" aria-label="وضعیت">وضعیت</th>
                                <th role="columnheader" scope="col" aria-label="تاریخ انتساب">تاریخ انتساب</th>
                                <th role="columnheader" scope="col" aria-label="عملیات">عملیات</th>
                            </tr>
                        </thead>
                        <tbody role="rowgroup">
                            <!-- Data will be loaded via AJAX -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    <!-- Scripts are loaded via bundles in _AdminLayout.cshtml -->
    <!-- Additional scripts specific to this page -->
    <script src="~/Content/plugins/persian-datepicker/persian-datepicker.min.js"></script>

    <script>
        let assignmentsTable;

        // محافظت jQuery - اطمینان از بارگذاری کامل jQuery
        (function() {
            function ensureJQuery(callback) {
                if (typeof jQuery !== 'undefined' && typeof $.fn !== 'undefined') {
                    callback();
                } else {
                    setTimeout(function() {
                        ensureJQuery(callback);
                    }, 50);
                }
            }

            ensureJQuery(function() {
                $(document).ready(function () {
                    try {
                        initDataTable();
                        initSelect2();
                        initPersianDatePickers();
                        loadInitialData();
                        initSearchBox();
                        console.log('DoctorAssignment Index initialized successfully');
                    } catch (error) {
                        console.error('Error initializing DoctorAssignment Index:', error);
                        showError('خطا در بارگذاری', 'خطا در راه‌اندازی صفحه. لطفاً صفحه را رفرش کنید.');
                    }
                });
            });
        })();

        /* -----------------------------
           📌 DataTable
        ----------------------------- */
        function initDataTable() {
            console.log('Initializing DataTable...');
            console.log('jQuery version:', $.fn.jquery);
            console.log('DataTable plugin available:', typeof $.fn.DataTable !== 'undefined');
            
            if (typeof $.fn.DataTable === 'undefined') {
                console.error('DataTable plugin not loaded');
                showError('خطا در بارگذاری', 'DataTable plugin بارگذاری نشده است');
                return;
            }
            
            // ابتدا یک تست ساده انجام می‌دهیم
            console.log('Testing AJAX call to GetAssignments...');
            $.ajax({
                url: '@Url.Action("GetAssignments", "DoctorAssignment")',
                type: 'POST',
                data: {
                    __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val(),
                    draw: 1,
                    start: 0,
                    length: 10
                },
                success: function(response) {
                    console.log('AJAX test successful:', response);
                },
                error: function(xhr, status, error) {
                    console.error('AJAX test failed:', status, error);
                    console.error('Response:', xhr.responseText);
                }
            });
            
            try {
                assignmentsTable = $('#assignmentsTable').DataTable({
                    language: { url: '@Url.Content("~/Content/plugins/DataTables/js/fa.json")' },
                    responsive: true,
                    processing: true,
                    serverSide: true,
                    pageLength: 25,
                    order: [[1, 'asc']], // sort by doctor name
                    ajax: {
                        url: '@Url.Action("GetAssignments", "DoctorAssignment")',
                        type: 'POST',
                        data: function (d) {
                            d.__RequestVerificationToken = $('input[name="__RequestVerificationToken"]').val();
                            d.searchTerm = $('#searchInput').val();
                            d.departmentId = $('#departmentFilter').val();
                            d.status = $('#statusFilter').val();
                            d.dateFrom = $('#DateFrom').val();
                            d.dateTo = $('#DateTo').val();
                            d.serviceCategoryId = $('#ServiceCategoryId').val();
                            d.assignmentType = $('#AssignmentType').val();
                        },
                        error: function (xhr, error, thrown) {
                            console.error('DataTable AJAX Error:', error, thrown);
                            console.error('Response:', xhr.responseText);
                            if (xhr.status === 500) {
                                showError('خطای سرور', 'خطا در پردازش درخواست. لطفاً دوباره تلاش کنید.');
                            } else if (xhr.status === 401) {
                                showError('خطای دسترسی', 'لطفاً مجدداً وارد شوید.');
                            } else {
                                showError('خطا در بارگذاری', 'لطفاً دوباره تلاش کنید');
                            }
                        }
                    },
                    columns: [
                        { data: null, render: (d, t, r, m) => m.row + m.settings._iDisplayStart + 1 },
                        { data: 'DoctorName' },
                        { data: 'DoctorNationalCode' },
                        { data: 'Departments', render: renderDepartments },
                        { data: 'ServiceCategories', render: renderCategories },
                        { data: 'Status', render: renderStatus },
                        { data: 'AssignmentDate', render: formatDate },
                        { data: 'Id', render: renderActions }
                    ],
                    columnDefs: [
                        { targets: [0, 7], orderable: false },
                        { targets: [3, 4], width: '20%' },
                        { targets: [5], width: '10%' }
                    ]
                });
                
                console.log('DataTable initialized successfully');
            } catch (error) {
                console.error('Error initializing DataTable:', error);
                showError('خطا در راه‌اندازی جدول', 'خطا در راه‌اندازی DataTable');
            }
        }

        function renderDepartments(data) {
            if (!data?.length) return '<span class="text-muted">بدون انتساب</span>';
            return data.map(d => `<span class="badge bg-primary me-1">${escapeHtml(d.Name)}</span>`).join('');
        }

        function renderCategories(data) {
            if (!data?.length) return '<span class="text-muted">بدون صلاحیت</span>';
            return data.map(c => `<span class="badge bg-info me-1">${escapeHtml(c.Name)}</span>`).join('');
        }

        function renderStatus(status) {
            const map = {
                active: '<span class="badge bg-success">فعال</span>',
                inactive: '<span class="badge bg-secondary">غیرفعال</span>',
                pending: '<span class="badge bg-warning">انتظار تایید</span>'
            };
            return map[status] || '<span class="badge bg-secondary">نامشخص</span>';
        }

        function renderActions(id) {
            return `
                <div class="btn-group" role="group">
                    <button class="btn btn-sm btn-outline-primary" onclick="viewDetails(${id})"><i class="fas fa-eye"></i></button>
                    <button class="btn btn-sm btn-outline-success" onclick="editAssignment(${id})"><i class="fas fa-edit"></i></button>
                    <button class="btn btn-sm btn-outline-warning" onclick="transferDoctor(${id})"><i class="fas fa-exchange-alt"></i></button>
                    <button class="btn btn-sm btn-outline-danger" onclick="removeAssignment(${id})"><i class="fas fa-trash"></i></button>
                </div>`;
        }

        /* -----------------------------
           📌 Select2
        ----------------------------- */
        function initSelect2() {
            if (typeof $.fn.select2 !== 'undefined') {
                $('#departmentFilter, #bulkDepartment, #bulkDoctors, #bulkServiceCategories').select2({
                    placeholder: 'انتخاب کنید...',
                    allowClear: true,
                    language: 'fa'
                });
            } else {
                console.warn('Select2 plugin not loaded');
            }
        }

        /* -----------------------------
           📌 Persian DatePicker
        ----------------------------- */
        function initPersianDatePickers() {
            console.log('Initializing Persian DatePickers...');
            console.log('Persian DatePicker plugin available:', typeof $.fn.persianDatepicker !== 'undefined');
            
            if (typeof $.fn.persianDatepicker !== 'undefined') {
                try {
                    $('.persian-date').persianDatepicker({
                        format: 'YYYY/MM/DD',
                        initialValue: false,
                        autoClose: true
                    });
                    console.log('Persian DatePickers initialized successfully');
                } catch (error) {
                    console.error('Error initializing Persian DatePickers:', error);
                }
            } else {
                console.warn('Persian DatePicker plugin not loaded');
            }
        }

        /* -----------------------------
           📌 Load initial data
        ----------------------------- */
        function loadInitialData() {
            // Data is already loaded from ViewBag in the controller
            // No need for additional AJAX calls that might fail
            console.log('Initial data loaded from ViewBag');
        }

        /* -----------------------------
           📌 Actions
        ----------------------------- */
        function applyFilters() { 
            updateUrlWithFilters();
            assignmentsTable.ajax.reload(); 
        }
        function refreshTable() { assignmentsTable.ajax.reload(); }
        function refreshData() { assignmentsTable.ajax.reload(); }
        
        function resetFilters() {
            console.log('Resetting filters...');
            
            // Use the enhanced clearAllFilters function if available
            if (typeof window.clearAllFilters === 'function') {
                window.clearAllFilters();
            } else {
                // Fallback to manual reset
                $('#searchInput').val('');
                $('#departmentFilter').val('').trigger('change');
                $('#statusFilter').val('').trigger('change');
                $('#DateFrom').val('');
                $('#DateTo').val('');
                $('#ServiceCategoryId').val('').trigger('change');
                $('#AssignmentType').val('').trigger('change');
            }
            
            // Clear URL parameters
            cleanUrl();
            
            // Reload table with cleared filters
            if (assignmentsTable) {
                assignmentsTable.ajax.reload();
            } else {
                console.warn('assignmentsTable not initialized');
            }
            
            console.log('Filters reset successfully');
        }
        
        function cleanUrl() {
            if (window.history && window.history.replaceState) {
                const url = new URL(window.location);
                url.search = '';
                window.history.replaceState({}, '', url);
            }
        }
        
        function updateUrlWithFilters() {
            if (window.history && window.history.replaceState) {
                const url = new URL(window.location);
                const params = new URLSearchParams();
                
                const searchTerm = $('#searchInput').val();
                const departmentId = $('#departmentFilter').val();
                const status = $('#statusFilter').val();
                const dateFrom = $('#DateFrom').val();
                const dateTo = $('#DateTo').val();
                const serviceCategoryId = $('#ServiceCategoryId').val();
                const assignmentType = $('#AssignmentType').val();
                
                if (searchTerm) params.set('SearchTerm', searchTerm);
                if (departmentId) params.set('DepartmentId', departmentId);
                if (status) params.set('Status', status);
                if (dateFrom) params.set('DateFrom', dateFrom);
                if (dateTo) params.set('DateTo', dateTo);
                if (serviceCategoryId) params.set('ServiceCategoryId', serviceCategoryId);
                if (assignmentType) params.set('AssignmentType', assignmentType);
                
                url.search = params.toString();
                window.history.replaceState({}, '', url);
            }
        }
        
        function showBulkAssignmentModal() {
            $('#bulkAssignmentModal').modal('show');
        }

        function viewDetails(id) { window.location.href = '@Url.Action("Details", "DoctorAssignment")/' + id; }
        function editAssignment(id) { window.location.href = '@Url.Action("AssignToDepartment", "DoctorAssignment", new { doctorId = "__ID__" })'.replace('__ID__', id); }
        function transferDoctor(id) { window.location.href = '@Url.Action("TransferDoctor", "DoctorAssignment", new { doctorId = "__ID__" })'.replace('__ID__', id); }

        function removeAssignment(id) {
            Swal.fire({
                title: 'آیا مطمئن هستید؟',
                text: 'این عملیات قابل بازگشت نیست!',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'بله، حذف کن',
                cancelButtonText: 'انصراف'
            }).then(r => { if (r.isConfirmed) performRemoveAssignment(id); });
        }

        function performRemoveAssignment(id) {
            showLoading();
            $.post('@Url.Action("RemoveAssignments", "DoctorAssignment")', {
                id: id,
                __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
            }).done(r => {
                if (r.success) {
                    showSuccess('حذف موفق', 'انتساب حذف شد');
                    refreshTable();
                } else showError('خطا', r.message);
            }).fail((xhr, status, error) => {
                console.error('Remove assignment error:', status, error);
                if (xhr.status === 500) {
                    showError('خطای سرور', 'خطا در پردازش درخواست حذف');
                } else {
                    showError('خطا', 'لطفاً دوباره تلاش کنید');
                }
            }).always(hideLoading);
        }

        function performBulkAssignment() {
            const doctors = $('#bulkDoctors').val();
            const department = $('#bulkDepartment').val();
            const categories = $('#bulkServiceCategories').val() || [];

            if (!doctors?.length) return showError('خطا', 'حداقل یک پزشک انتخاب کنید');
            if (!department) return showError('خطا', 'لطفاً دپارتمان را انتخاب کنید');

            const assignments = doctors.map(d => ({
                DoctorId: d,
                DepartmentId: department,
                ServiceCategoryIds: categories
            }));

            showLoading();
       
        }

        /* -----------------------------
           📌 Utils
        ----------------------------- */
        function initSearchBox() {
            // Enhanced search input with debounce
            let searchTimeout;
            $('#searchInput').on('input keyup', function(e) {
                clearTimeout(searchTimeout);
                if (e.keyCode === 13) {
                    applyFilters();
                } else {
                    searchTimeout = setTimeout(() => {
                        applyFilters();
                    }, 500); // 500ms debounce
                }
            });
            
            // Enhanced filter change events with better handling
            $('#departmentFilter, #statusFilter, #ServiceCategoryId, #AssignmentType').on('change', function() {
                console.log('Filter changed:', $(this).attr('id'), $(this).val());
                applyFilters();
            });
            
            // Enhanced date picker change events
            $('#DateFrom, #DateTo').on('change', function() {
                console.log('Date filter changed:', $(this).attr('id'), $(this).val());
                applyFilters();
            });
            
            // Enhanced button event handlers
            $('#applyFiltersBtn').on('click', function() {
                console.log('Apply filters button clicked');
                applyFilters();
            });
            
            $('#resetFiltersBtn').on('click', function() {
                console.log('Reset filters button clicked');
                resetFilters();
            });
            
            $('#exportFiltersBtn').on('click', function() {
                console.log('Export filters button clicked');
                if (typeof window.exportFilters === 'function') {
                    window.exportFilters();
                }
            });
            
            // Quick filter presets
            $('#quickFilterPresets').on('change', function() {
                const preset = $(this).val();
                console.log('Quick filter preset selected:', preset);
                if (preset && typeof window.applyFilterPreset === 'function') {
                    // Get preset from the enhanced filter system
                    const presets = {
                        'active_doctors': { status: 'active' },
                        'recent_assignments': { dateFrom: getDateDaysAgo(30) },
                        'emergency_department': { departmentId: 1 },
                        'pending_approval': { status: 'pending' }
                    };
                    if (presets[preset]) {
                        window.applyFilterPreset(presets[preset]);
                    }
                }
            });
            
            // Auto-apply filters on page load if URL has parameters
            loadFiltersFromUrl();
        }
        
        function getDateDaysAgo(days) {
            const date = new Date();
            date.setDate(date.getDate() - days);
            return date.toISOString().split('T')[0];
        }
        
        function loadFiltersFromUrl() {
            const urlParams = new URLSearchParams(window.location.search);
            
            const searchTerm = urlParams.get('SearchTerm');
            const departmentId = urlParams.get('DepartmentId');
            const status = urlParams.get('Status');
            const dateFrom = urlParams.get('DateFrom');
            const dateTo = urlParams.get('DateTo');
            const serviceCategoryId = urlParams.get('ServiceCategoryId');
            const assignmentType = urlParams.get('AssignmentType');
            
            if (searchTerm) $('#searchInput').val(searchTerm);
            if (departmentId) $('#departmentFilter').val(departmentId).trigger('change');
            if (status) $('#statusFilter').val(status).trigger('change');
            if (dateFrom) $('#DateFrom').val(dateFrom);
            if (dateTo) $('#DateTo').val(dateTo);
            if (serviceCategoryId) $('#ServiceCategoryId').val(serviceCategoryId).trigger('change');
            if (assignmentType) $('#AssignmentType').val(assignmentType).trigger('change');
        }

        function formatDate(dateString) {
            if (!dateString) return '-';
            try {
                return new Date(dateString).toLocaleDateString('fa-IR');
            } catch { return '-'; }
        }

        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        function showLoading() { $('.loading-spinner').show(); }
        function hideLoading() { $('.loading-spinner').hide(); }

        function showSuccess(title, msg) { 
            console.log('SweetAlert2 available:', typeof Swal !== 'undefined');
            if (typeof Swal !== 'undefined') {
                Swal.fire({ title, text: msg, icon: 'success' }); 
            } else {
                alert(title + ': ' + msg);
            }
        }
        function showError(title, msg) { 
            console.log('SweetAlert2 available:', typeof Swal !== 'undefined');
            if (typeof Swal !== 'undefined') {
                Swal.fire({ title, text: msg, icon: 'error' }); 
            } else {
                alert(title + ': ' + msg);
            }
        }
        
        // Make functions globally accessible for HTML onclick events
        window.resetFilters = resetFilters;
        window.applyFilters = applyFilters;
        window.refreshData = refreshData;
        window.showBulkAssignmentModal = showBulkAssignmentModal;
        window.viewDetails = viewDetails;
        window.editAssignment = editAssignment;
        window.transferDoctor = transferDoctor;
        window.removeAssignment = removeAssignment;
        window.performBulkAssignment = performBulkAssignment;
    </script>
}

