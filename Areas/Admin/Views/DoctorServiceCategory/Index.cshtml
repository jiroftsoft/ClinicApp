@model ClinicApp.Interfaces.PagedResult<ClinicApp.ViewModels.DoctorManagementVM.DoctorServiceCategoryViewModel>
@{
    ViewBag.Title = "مدیریت صلاحیت‌های خدماتی پزشکان";
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
}

@Html.AntiForgeryToken()

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">
                        <i class="fa fa-user"></i>
                        مدیریت صلاحیت‌های خدماتی پزشکان
                    </h3>
                    <div class="card-tools">
                        <button type="button" class="btn btn-primary" id="openAddModalBtn">
                            <i class="fa fa-plus"></i>
                            اضافه کردن صلاحیت جدید
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    @if (TempData["Success"] != null)
                    {
                        <div class="alert alert-success alert-dismissible fade show" role="alert">
                            <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">×</span></button>
                            <i class="fa fa-check"></i>
                            @TempData["Success"]
                        </div>
                    }

                    @if (TempData["Error"] != null)
                    {
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">×</span></button>
                            <i class="fa fa-warning"></i>
                            @TempData["Error"]
                        </div>
                    }

                    <!-- فیلترها -->
                    <div class="row mb-3">
                        <div class="col-md-3">
                            <div class="form-group">
                                <label for="doctorFilter">پزشک:</label>
                                <select id="doctorFilter" class="form-control">
                                    <option value="">همه پزشکان</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                <label for="serviceCategoryFilter">سرفصل خدماتی:</label>
                                <select id="serviceCategoryFilter" class="form-control">
                                    <option value="">همه سرفصل‌ها</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                <label for="statusFilter">وضعیت:</label>
                                <select id="statusFilter" class="form-control">
                                    <option value="">همه وضعیت‌ها</option>
                                    <option value="true">فعال</option>
                                    <option value="false">غیرفعال</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                <label>&nbsp;</label>
                                <div class="btn-group btn-block" role="group">
                                    <button type="button" id="searchBtn" class="btn btn-primary">
                                        <i class="fa fa-search"></i>
                                        جستجو
                                    </button>
                                    <button type="button" id="clearFiltersBtn" class="btn btn-outline-secondary">
                                        <i class="fa fa-times"></i>
                                        حذف فیلتر
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- جدول صلاحیت‌ها -->
                    <div class="table-responsive">
                        <table class="table table-bordered table-striped">
                            <thead>
                                <tr>
                                    <th>پزشک</th>
                                    <th>سرفصل خدماتی</th>
                                    <th>دپارتمان</th>
                                    <th>سطح صلاحیت</th>
                                    <th>شماره گواهی</th>
                                    <th>وضعیت</th>
                                    <th>تاریخ اعطا</th>
                                    <th>عملیات</th>
                                </tr>
                            </thead>
                            <tbody id="serviceCategoriesTable">
                                @if (Model?.Items != null && Model.Items.Any())
                                {
                                    foreach (var item in Model.Items)
                                    {
                                        <tr data-id="@item.AssignmentId">
                                            <td>@(item.DoctorName ?? "-")</td>
                                            <td>@(item.ServiceCategoryTitle ?? "-")</td>
                                            <td>@(item.DepartmentName ?? "-")</td>
                                            <td>@(item.AuthorizationLevel ?? "-")</td>
                                            <td>@(item.CertificateNumber ?? "-")</td>
                                            <td>
                                                @if (item.IsActive)
                                                {
                                                    <span class="badge badge-success">فعال</span>
                                                }
                                                else
                                                {
                                                    <span class="badge badge-danger">غیرفعال</span>
                                                }
                                            </td>
                                            <td>@(item.GrantedDate?.ToString("yyyy/MM/dd") ?? "-")</td>
                                            <td>
                                                <div class="btn-group">
                                                    <button type="button" class="btn btn-sm btn-primary" onclick="viewServiceCategory('@item.AssignmentId')" title="مشاهده">
                                                        <i class="fa fa-eye"></i>
                                                    </button>
                                                    <button type="button" class="btn btn-sm btn-warning" onclick="editServiceCategory('@item.AssignmentId')" title="ویرایش">
                                                        <i class="fa fa-edit"></i>
                                                    </button>
                                                    <button type="button" class="btn btn-sm btn-danger" onclick="removeServiceCategory(@item.DoctorId, @item.ServiceCategoryId)" title="حذف">
                                                        <i class="fa fa-trash"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="8" class="text-center text-muted">
                                            <i class="fa fa-info-circle"></i>
                                            هیچ صلاحیت خدماتی یافت نشد.
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    <!-- صفحه‌بندی -->
                    @if (Model != null && Model.TotalPages > 1)
                    {
                        <div class="d-flex justify-content-center">
                            <nav>
                                <ul class="pagination">
                                    @for (int i = 1; i <= Model.TotalPages; i++)
                                    {
                                        <li class="page-item @(i == Model.PageNumber ? "active" : "")">
                                            <a class="page-link" href="#" onclick="loadPage(@i)">@i</a>
                                        </li>
                                    }
                                </ul>
                            </nav>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal اضافه کردن صلاحیت جدید -->
<div class="modal fade" id="addServiceCategoryModal" tabindex="-1" role="dialog" aria-labelledby="addServiceCategoryModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addServiceCategoryModalLabel">اضافه کردن صلاحیت خدماتی جدید</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <form id="addServiceCategoryForm">
                @Html.AntiForgeryToken()
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="doctorId">پزشک *</label>
                                <select id="doctorId" name="DoctorId" class="form-control" required>
                                    <option value="">انتخاب پزشک</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="departmentId">دپارتمان *</label>
                                <select id="departmentId" name="DepartmentId" class="form-control" required>
                                    <option value="">ابتدا پزشک را انتخاب کنید</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="serviceCategoryId">سرفصل خدماتی *</label>
                                <select id="serviceCategoryId" name="ServiceCategoryId" class="form-control" multiple size="5" required>
                                    <option value="">ابتدا دپارتمان را انتخاب کنید</option>
                                </select>
                                <div class="mt-2">
                                    <button type="button" id="selectAllCategories" class="btn btn-sm btn-outline-primary">
                                        <i class="fa fa-check-square"></i>
                                        انتخاب همه
                                    </button>
                                    <button type="button" id="deselectAllCategories" class="btn btn-sm btn-outline-secondary">
                                        <i class="fa fa-square"></i>
                                        لغو انتخاب همه
                                    </button>
                                </div>
                                <small class="form-text text-muted">
                                    <i class="fa fa-info-circle"></i>
                                    برای انتخاب چندگانه: Ctrl+Click (Windows) یا Cmd+Click (Mac)
                                </small>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="authorizationLevel">سطح صلاحیت</label>
                                <select id="authorizationLevel" name="AuthorizationLevel" class="form-control">
                                    <option value="Basic">پایه</option>
                                    <option value="Intermediate">متوسط</option>
                                    <option value="Advanced">پیشرفته</option>
                                    <option value="Expert">متخصص</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="certificateNumber">شماره گواهی</label>
                                <input type="text" id="certificateNumber" name="CertificateNumber" class="form-control" />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="grantedDate">تاریخ اعطا</label>
                                <input type="text" id="grantedDate" name="GrantedDate" class="form-control persian-date" 
                                       data-alt-field="#grantedDateGregorian"
                                       placeholder="مثال: 1404/06/01" />
                                <!-- تاریخ میلادی مخفی برای ذخیره در دیتابیس -->
                                <input type="hidden" id="grantedDateGregorian" name="GrantedDateGregorian" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="expiryDate">تاریخ انقضا (اختیاری)</label>
                                <input type="text" id="expiryDate" name="ExpiryDate" class="form-control persian-date" 
                                       data-alt-field="#expiryDateGregorian"
                                       placeholder="مثال: 1404/06/01" />
                                <!-- تاریخ میلادی مخفی برای ذخیره در دیتابیس -->
                                <input type="hidden" id="expiryDateGregorian" name="ExpiryDateGregorian" />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="isActive">وضعیت</label>
                                <div class="custom-control custom-switch">
                                    <input type="checkbox" id="isActive" name="IsActive" class="custom-control-input" checked>
                                    <label class="custom-control-label" for="isActive">فعال</label>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="notes">توضیحات</label>
                        <textarea id="notes" name="Notes" class="form-control" rows="3"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">انصراف</button>
                    <button type="submit" id="saveAddServiceCategoryBtn" class="btn btn-primary">ذخیره</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // افزودن توکن ضد جعل به همه درخواست‌های POST
        $.ajaxSetup({
            beforeSend: function (xhr, settings) {
                if (settings.type === 'POST') {
                    var token = $('input[name="__RequestVerificationToken"]').val();
                    if (token) {
                        xhr.setRequestHeader('RequestVerificationToken', token);
                        xhr.setRequestHeader('X-RequestVerificationToken', token);
                    }
                }
            }
        });

        $(document).ready(function () {
            console.log('Document ready - jQuery version:', $.fn.jquery);
            console.log('Bootstrap modal available:', typeof $.fn.modal !== 'undefined');
            
            // اطمینان از بارگذاری کامل Bootstrap
            if (typeof $.fn.modal === 'undefined') {
                console.error('Bootstrap modal not loaded!');
                console.log('Available jQuery methods:', Object.keys($.fn).filter(k => k.includes('modal')));
                alert('خطا در بارگذاری Bootstrap. لطفاً صفحه را رفرش کنید.');
                return;
            }
            
            // تست ساده برای اطمینان از کارکرد مودال
            console.log('Testing modal functionality...');
            try {
                var modalElement = $('#addServiceCategoryModal');
                console.log('Modal element found:', modalElement.length > 0);
                console.log('Modal classes:', modalElement.attr('class'));
            } catch (e) {
                console.error('Error testing modal:', e);
            }
            
            // باز کردن مودال با تأخیر کوتاه
            $('#openAddModalBtn').on('click', function(e) {
                console.log('Button clicked - attempting to open modal');
                e.preventDefault();
                
                // تأخیر کوتاه برای اطمینان از بارگذاری کامل
                setTimeout(function() {
                    try {
                        // تلاش برای باز کردن مودال Bootstrap
                        $('#addServiceCategoryModal').modal('show');
                        console.log('Modal should be open now');
                        
                        // راه‌اندازی مجدد Persian DatePicker برای فیلدهای داخل مودال
                        setTimeout(function() {
                            console.log('Modal opened - DatePicker will be initialized by global handler');
                        }, 200);

                    } catch (error) {
                        console.error('Error opening modal:', error);
                        
                        // راه‌حل جایگزین: نمایش مودال به صورت دستی
                        console.log('Falling back to manual modal display');
                        $('#addServiceCategoryModal').show();
                        $('body').addClass('modal-open');
                        
                        // اضافه کردن backdrop
                        if (!$('.modal-backdrop').length) {
                            $('body').append('<div class="modal-backdrop fade show"></div>');
                        }
                        
                        // اضافه کردن CSS برای مودال
                        $('#addServiceCategoryModal').css({
                            'display': 'block',
                            'position': 'fixed',
                            'top': '0',
                            'left': '0',
                            'width': '100%',
                            'height': '100%',
                            'z-index': '1050',
                            'background-color': 'rgba(0,0,0,0.5)'
                        });
                        
                        // مرکز کردن مودال
                        $('.modal-dialog').css({
                            'margin': '50px auto',
                            'max-width': '800px'
                        });
                        
                        // راه‌اندازی مجدد Persian DatePicker برای فیلدهای داخل مودال
                        setTimeout(function() {
                            console.log('Modal opened (fallback) - DatePicker will be initialized by global handler');
                        }, 200);

                    }
                }, 100);
            });
            
            // بستن مودال با کلیک روی backdrop یا دکمه close
            $(document).on('click', '.modal-backdrop, [data-dismiss="modal"]', function() {
                $('#addServiceCategoryModal').hide();
                $('body').removeClass('modal-open');
                $('.modal-backdrop').remove();
                
                // بازنشانی CSS
                $('#addServiceCategoryModal').css({
                    'display': 'none',
                    'position': '',
                    'top': '',
                    'left': '',
                    'width': '',
                    'height': '',
                    'z-index': '',
                    'background-color': ''
                });
            });
            
            // راه‌اندازی Persian DatePicker برای فیلدهای داخل مودال
            $('#addServiceCategoryModal').on('shown.bs.modal', function() {
                console.log('Modal shown - initializing DatePicker for modal fields');
                setTimeout(function() {
                    if (typeof $.fn.persianDatepicker !== 'undefined') {
                        $('#addServiceCategoryModal .persian-date').each(function() {
                            var $this = $(this);
                            if (!$this.data('persian-datepicker-initialized')) {
                                $this.persianDatepicker({
                                    format: 'YYYY/MM/DD',
                                    initialValue: false,
                                    autoClose: true,
                                    observer: false,
                                    persianDigit: true,
                                    calendar: {
                                        persian: {
                                            locale: 'fa',
                                            leapYearMode: 'astronomical'
                                        }
                                    },
                                    toolbox: {
                                        todayBtn: { enabled: true, text: { fa: 'امروز' } },
                                        clearBtn: { enabled: true, text: { fa: 'پاک کردن' } }
                                    },
                                    onSelect: function(unix) {
                                        // Convert to Persian date using jalaali-js
                                        if (typeof window.jalaali !== 'undefined') {
                                            var date = new Date(unix);
                                            var persianDate = window.jalaali.toJalaali(date.getFullYear(), date.getMonth() + 1, date.getDate());
                                            var formattedDate = persianDate.jy + '/' + 
                                                String(persianDate.jm).padStart(2, '0') + '/' + 
                                                String(persianDate.jd).padStart(2, '0');
                                            $this.val(formattedDate);
                                        } else {
                                            // Fallback to simple display
                                            $this.val($this.val());
                                        }
                                        
                                        // Trigger change event
                                        $this.trigger('change');
                                    }
                                });
                                $this.data('persian-datepicker-initialized', true);
                            }
                        });
                    }
                }, 100);
            });
            
            loadDoctors();
            loadServiceCategories();
            
            // تنظیم تاریخ امروز به صورت پیش‌فرض (شمسی)
            // Let the DatePicker handle the default date setting
            console.log('Date fields will be initialized by global DatePicker handler');
            
            // تست نهایی: بررسی وجود دکمه
            console.log('Add button found:', $('#openAddModalBtn').length > 0);
            console.log('Modal found:', $('#addServiceCategoryModal').length > 0);
            console.log('Persian DatePicker fields found:', $('.persian-date').length);
            
            // جستجو: ناوبری به اکشن Index با فیلترها
            $('#searchBtn').click(function () {
                var doctorId = $('#doctorFilter').val();
                var serviceCategoryId = $('#serviceCategoryFilter').val();
                var isActive = $('#statusFilter').val();
                var url = '@Url.Action("Index")?page=1';
                if (doctorId) url += '&doctorId=' + encodeURIComponent(doctorId);
                if (serviceCategoryId) url += '&serviceCategoryId=' + encodeURIComponent(serviceCategoryId);
                if (isActive !== '') url += '&isActive=' + encodeURIComponent(isActive);
                window.location.href = url;
            });
            
            // فرم اضافه کردن
            $('#addServiceCategoryForm').submit(function (e) {
                e.preventDefault();
                addServiceCategory();
            });
            // دکمه ذخیره برای اطمینان از ارسال فرم
            $('#saveAddServiceCategoryBtn').on('click', function (e) {
                e.preventDefault();
                addServiceCategory();
            });
        });

        function parseIfString(data) {
            if (typeof data === 'string') {
                try { return JSON.parse(data); } catch (e) { return null; }
            }
            return data;
        }

        function loadDoctors() {
            $.ajax({
                url: '@Url.Action("GetDoctors", "Doctor")',
                type: 'GET',
                dataType: 'json'
            })
            .done(function (data) {
                var parsed = parseIfString(data);
                if (parsed && parsed.success && Array.isArray(parsed.data)) {
                    var options = '<option value="">همه پزشکان</option>';
                    parsed.data.forEach(function (doctor) {
                        options += '<option value="' + doctor.Id + '">' + doctor.FullName + '</option>';
                    });
                    $('#doctorFilter').html(options);
                    $('#doctorId').html(options);
                } else {
                    console.warn('No doctors returned or response malformed.', data);
                }
            })
            .fail(function (xhr, status, error) {
                console.error('Failed to load doctors:', status, error);
            });
        }

        function loadServiceCategories() {
            var filters = {
                doctorId: $('#doctorFilter').val(),
                serviceCategoryId: $('#serviceCategoryFilter').val(),
                isActive: $('#statusFilter').val()
            };

            $.ajax({
                url: '@Url.Action("GetServiceCategories")',
                type: 'GET',
                data: filters,
                dataType: 'json'
            })
            .done(function (data) {
                var parsed = parseIfString(data);
                if (parsed && parsed.success && Array.isArray(parsed.data)) {
                    var options = '<option value="">همه سرفصل‌ها</option>';
                    parsed.data.forEach(function (category) {
                        options += '<option value="' + category.Id + '">' + category.Name + '</option>';
                    });
                    $('#serviceCategoryFilter').html(options);
                    $('#serviceCategoryId').html(options);
                } else {
                    console.warn('No service categories returned or response malformed.', data);
                }
            })
            .fail(function (xhr, status, error) {
                console.error('Failed to load service categories:', status, error);
            });
        }

        function addServiceCategory() {
            var selectedDoctor = $('#doctorId').val();
            var selectedDepartment = $('#departmentId').val();
            var selectedCategories = $('#serviceCategoryId').val();
            
            if (!selectedDoctor || !selectedDepartment) {
                alert('لطفاً پزشک و دپارتمان را انتخاب کنید.');
                return;
            }
            
            if (!selectedCategories || selectedCategories.length === 0) {
                alert('لطفاً حداقل یک سرفصل خدماتی را انتخاب کنید.');
                return;
            }

            // دریافت Anti-Forgery Token
            var token = $('input[name="__RequestVerificationToken"]').val();
            console.log('Anti-Forgery Token:', token);
            
            if (!token) {
                alert('خطا: توکن امنیتی یافت نشد. لطفاً صفحه را رفرش کنید.');
                return;
            }
            
            // آماده‌سازی داده‌ها برای ارسال چندین سرفصل
            var formData = {
                DoctorId: selectedDoctor,
                DepartmentId: selectedDepartment,
                ServiceCategoryIds: selectedCategories,
                AuthorizationLevel: $('#authorizationLevel').val(),
                CertificateNumber: $('#certificateNumber').val(),
                GrantedDate: $('#grantedDate').val(),
                GrantedDateGregorian: $('#grantedDateGregorian').val(),
                ExpiryDate: $('#expiryDate').val(),
                ExpiryDateGregorian: $('#expiryDateGregorian').val(),
                IsActive: $('#isActive').is(':checked'),
                Notes: $('#notes').val(),
                __RequestVerificationToken: token
            };
            
            console.log('Form data for multiple categories:', formData);
            console.log('Submitting addServiceCategory with multiple categories');
            
            $.ajax({
                url: '@Url.Action("AddMultipleServiceCategories")',
                type: 'POST',
                data: formData,
                dataType: 'json',
                beforeSend: function(xhr) {
                    xhr.setRequestHeader('RequestVerificationToken', token);
                }
            })
            .done(function (data) {
                var parsed = parseIfString(data);
                console.log('AddServiceCategory response', parsed || data);
                if (parsed && parsed.success) {
                    // بستن مودال
                    try {
                        $('#addServiceCategoryModal').modal('hide');
                    } catch (e) {
                        // راه‌حل جایگزین برای بستن مودال
                        $('#addServiceCategoryModal').hide();
                        $('body').removeClass('modal-open');
                        $('.modal-backdrop').remove();
                        
                        // بازنشانی CSS
                        $('#addServiceCategoryModal').css({
                            'display': 'none',
                            'position': '',
                            'top': '',
                            'left': '',
                            'width': '',
                            'height': '',
                            'z-index': '',
                            'background-color': ''
                        });
                    }
                    
                    var redirectDoctorId = $('#doctorId').val() || '';
                    var redirectUrl = '@Url.Action("Index")';
                    if (redirectDoctorId) {
                        redirectUrl += '?doctorId=' + encodeURIComponent(redirectDoctorId);
                    }
                    window.location.href = redirectUrl;
                } else {
                    alert('خطا: ' + (parsed && parsed.message ? parsed.message : 'پاسخ نامعتبر از سرور'));
                }
            })
            .fail(function (xhr, status, error) {
                console.error('Failed to add service category:', status, error, xhr && xhr.responseText);
                alert('خطا در ارتباط با سرور');
            });
        }

        function viewServiceCategory(assignmentId) {
            try {
                console.log('🔍 Viewing service category with assignmentId:', assignmentId);
                console.log('🔍 AssignmentId type:', typeof assignmentId);
                if (!assignmentId || assignmentId === 'undefined' || assignmentId === '') {
                    console.error('❌ Invalid assignmentId:', assignmentId);
                    alert('شناسه صلاحیت نامعتبر است.');
                    return;
                }
                var url = '@Url.Action("Details")?assignmentId=' + encodeURIComponent(assignmentId);
                console.log('🔗 Navigating to:', url);
                window.location.href = url;
            } catch (error) {
                console.error('❌ Error in viewServiceCategory:', error);
                alert('خطا در مشاهده صلاحیت خدماتی');
            }
        }

        function editServiceCategory(assignmentId) {
            try {
                console.log('✏️ Editing service category with assignmentId:', assignmentId);
                console.log('✏️ AssignmentId type:', typeof assignmentId);
                if (!assignmentId || assignmentId === 'undefined' || assignmentId === '') {
                    console.error('❌ Invalid assignmentId:', assignmentId);
                    alert('شناسه صلاحیت نامعتبر است.');
                    return;
                }
                var url = '@Url.Action("Edit")?assignmentId=' + encodeURIComponent(assignmentId);
                console.log('🔗 Navigating to:', url);
                window.location.href = url;
            } catch (error) {
                console.error('❌ Error in editServiceCategory:', error);
                alert('خطا در ویرایش صلاحیت خدماتی');
            }
        }

        function removeServiceCategory(doctorId, serviceCategoryId) {
            try {
                console.log('Removing service category. DoctorId:', doctorId, 'ServiceCategoryId:', serviceCategoryId);
                if (!doctorId || !serviceCategoryId) {
                    console.error('Invalid parameters. DoctorId:', doctorId, 'ServiceCategoryId:', serviceCategoryId);
                    alert('پارامترهای ورودی نامعتبر است.');
                    return;
                }

                if (confirm('آیا از حذف این صلاحیت خدماتی اطمینان دارید؟')) {
                    $.ajax({
                        url: '@Url.Action("RemoveServiceCategory")',
                        type: 'POST',
                        dataType: 'json',
                        data: {
                            doctorId: doctorId,
                            categoryId: serviceCategoryId,
                            __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                        }
                    })
                    .done(function (data) {
                        var parsed = parseIfString(data);
                        if (parsed && parsed.success) {
                            location.reload();
                        } else {
                            console.error('Remove service category failed:', data);
                            alert('خطا: ' + (parsed && parsed.message ? parsed.message : 'پاسخ نامعتبر از سرور'));
                        }
                    })
                    .fail(function (xhr, status, error) {
                        console.error('AJAX request failed:', status, error);
                        alert('خطا در ارتباط با سرور');
                    });
                }
            } catch (error) {
                console.error('Error in removeServiceCategory:', error);
                alert('خطا در حذف صلاحیت خدماتی');
            }
        }

        // Event Handler برای انتخاب پزشک
        $(document).on('change', '#doctorId', function() {
            var doctorId = $(this).val();
            if (doctorId) {
                loadDoctorDepartments(doctorId);
            } else {
                // بازنشانی فیلدهای وابسته
                $('#departmentId').html('<option value="">ابتدا پزشک را انتخاب کنید</option>');
                $('#serviceCategoryId').html('<option value="">ابتدا دپارتمان را انتخاب کنید</option>');
            }
        });

        // Event Handler برای انتخاب دپارتمان
        $(document).on('change', '#departmentId', function() {
            var departmentId = $(this).val();
            if (departmentId) {
                loadServiceCategoriesByDepartment(departmentId);
            } else {
                // بازنشانی فیلد سرفصل
                $('#serviceCategoryId').html('<option value="">ابتدا دپارتمان را انتخاب کنید</option>');
            }
        });

        function loadDoctorDepartments(doctorId) {
            $.ajax({
                url: '@Url.Action("GetDoctorDepartments")',
                type: 'GET',
                data: { doctorId: doctorId },
                dataType: 'json'
            })
            .done(function (data) {
                var parsed = parseIfString(data);
                if (parsed && parsed.success && Array.isArray(parsed.data)) {
                    var options = '<option value="">انتخاب دپارتمان</option>';
                    parsed.data.forEach(function (department) {
                        options += '<option value="' + department.Id + '">' + department.Name + '</option>';
                    });
                    $('#departmentId').html(options);
                } else {
                    console.warn('No departments returned or response malformed.', data);
                    $('#departmentId').html('<option value="">هیچ دپارتمانی یافت نشد</option>');
                }
            })
            .fail(function (xhr, status, error) {
                console.error('Failed to load doctor departments:', status, error);
                $('#departmentId').html('<option value="">خطا در بارگذاری دپارتمان‌ها</option>');
            });
        }

        function loadServiceCategoriesByDepartment(departmentId) {
            $.ajax({
                url: '@Url.Action("GetServiceCategoriesByDepartment")',
                type: 'GET',
                data: { departmentId: departmentId },
                dataType: 'json'
            })
            .done(function (data) {
                var parsed = parseIfString(data);
                if (parsed && parsed.success && Array.isArray(parsed.data)) {
                    var options = '';
                    parsed.data.forEach(function (category) {
                        options += '<option value="' + category.Id + '">' + category.Name + '</option>';
                    });
                    $('#serviceCategoryId').html(options);
                } else {
                    console.warn('No service categories returned or response malformed.', data);
                    $('#serviceCategoryId').html('<option value="">هیچ سرفصلی یافت نشد</option>');
                }
            })
            .fail(function (xhr, status, error) {
                console.error('Failed to load service categories by department:', status, error);
                $('#serviceCategoryId').html('<option value="">خطا در بارگذاری سرفصل‌ها</option>');
            });
        }

        // Event Handler برای انتخاب همه سرفصل‌ها
        $(document).on('click', '#selectAllCategories', function() {
            $('#serviceCategoryId option').prop('selected', true);
        });

        // Event Handler برای لغو انتخاب همه سرفصل‌ها
        $(document).on('click', '#deselectAllCategories', function() {
            $('#serviceCategoryId option').prop('selected', false);
        });

        // Event Handler برای حذف فیلترها
        $(document).on('click', '#clearFiltersBtn', function() {
            // پاک کردن تمام فیلترها
            $('#doctorFilter').val('');
            $('#serviceCategoryFilter').val('');
            $('#statusFilter').val('');
            
            // بارگذاری مجدد صفحه بدون فیلتر
            var url = '@Url.Action("Index")';
            window.location.href = url;
        });

        // Event Handler برای دکمه جستجو
        $(document).on('click', '#searchBtn', function() {
            performSearch();
        });

        // Event Handler برای Enter در فیلترها
        $(document).on('keypress', '#doctorFilter, #serviceCategoryFilter, #statusFilter', function(e) {
            if (e.which === 13) { // Enter key
                performSearch();
            }
        });

        function performSearch() {
            var url = '@Url.Action("Index")';
            var filters = {
                doctorId: $('#doctorFilter').val(),
                serviceCategoryId: $('#serviceCategoryFilter').val(),
                isActive: $('#statusFilter').val()
            };
            
            var hasFilters = false;
            $.each(filters, function (key, value) {
                if (value && value !== '') {
                    url += (hasFilters ? '&' : '?') + key + '=' + encodeURIComponent(value);
                    hasFilters = true;
                }
            });
            
            window.location.href = url;
        }

        function loadPage(page) {
            var url = '@Url.Action("Index")?page=' + page;
            var filters = {
                doctorId: $('#doctorFilter').val(),
                serviceCategoryId: $('#serviceCategoryFilter').val(),
                isActive: $('#statusFilter').val()
            };
            $.each(filters, function (key, value) {
                if (value) {
                    url += '&' + key + '=' + encodeURIComponent(value);
                }
            });
            window.location.href = url;
        }
    </script>
}
