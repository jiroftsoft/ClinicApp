@model ClinicApp.ViewModels.[Module].[Module]CreateEditViewModel

@{
    ViewBag.Title = Model.Id > 0 ? "ویرایش " + ViewBag.ModuleName : "ایجاد " + ViewBag.ModuleName;
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}

<div class="form-container">
    <!-- Form Header -->
    <div class="form-header">
        <h2 class="form-title">
            <i class="fas fa-edit"></i>
            @(Model.Id > 0 ? "ویرایش" : "ایجاد") @ViewBag.ModuleName
        </h2>
        <div class="form-actions">
            <a href="@Url.Action("Index")" class="btn btn-light">
                <i class="fas fa-arrow-right"></i>
                بازگشت به لیست
            </a>
        </div>
    </div>

    <!-- Form Body -->
    <form method="post" class="needs-validation" novalidate>
        @Html.AntiForgeryToken()
        @Html.HiddenFor(m => m.Id)

        <!-- Basic Information Card -->
        <div class="form-card">
            <div class="form-card-header">
                <h4 class="form-card-title">
                    <i class="fas fa-info-circle"></i>
                    اطلاعات اصلی
                </h4>
            </div>
            <div class="form-card-body">
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(m => m.Name, new { @class = "form-label" })
                            @Html.TextBoxFor(m => m.Name, new { 
                                @class = "form-control", 
                                placeholder = "نام @ViewBag.ModuleName",
                                required = "required"
                            })
                            @Html.ValidationMessageFor(m => m.Name, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(m => m.Code, new { @class = "form-label" })
                            @Html.TextBoxFor(m => m.Code, new { 
                                @class = "form-control", 
                                placeholder = "کد @ViewBag.ModuleName",
                                required = "required"
                            })
                            @Html.ValidationMessageFor(m => m.Code, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Date Information Card -->
        <div class="form-card">
            <div class="form-card-header">
                <h4 class="form-card-title">
                    <i class="fas fa-calendar-alt"></i>
                    اطلاعات زمانی
                </h4>
            </div>
            <div class="form-card-body">
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(m => m.ValidFromShamsi, new { @class = "form-label" })
                            @Html.TextBoxFor(m => m.ValidFromShamsi, new { 
                                @class = "form-control persian-datepicker", 
                                placeholder = "مثال: 1404/06/23",
                                required = "required"
                            })
                            @Html.ValidationMessageFor(m => m.ValidFromShamsi, "", new { @class = "text-danger" })
                            <div class="form-text">
                                <i class="fas fa-info-circle"></i>
                                تاریخ شروع اعتبار
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(m => m.ValidToShamsi, new { @class = "form-label" })
                            @Html.TextBoxFor(m => m.ValidToShamsi, new { 
                                @class = "form-control persian-datepicker", 
                                placeholder = "مثال: 1404/06/23"
                            })
                            @Html.ValidationMessageFor(m => m.ValidToShamsi, "", new { @class = "text-danger" })
                            <div class="form-text">
                                <i class="fas fa-info-circle"></i>
                                تاریخ پایان اعتبار (اختیاری)
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Financial Information Card -->
        <div class="form-card">
            <div class="form-card-header">
                <h4 class="form-card-title">
                    <i class="fas fa-calculator"></i>
                    اطلاعات مالی
                </h4>
            </div>
            <div class="form-card-body">
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(m => m.CoveragePercent, new { @class = "form-label" })
                            <div class="input-group">
                                @Html.TextBoxFor(m => m.CoveragePercent, new { 
                                    @class = "form-control coverage-percent-input", 
                                    type = "number", 
                                    min = "0", 
                                    max = "100", 
                                    step = "0.01", 
                                    placeholder = "درصد پوشش بیمه", 
                                    required = "required" 
                                })
                                <span class="input-group-text">%</span>
                            </div>
                            @Html.ValidationMessageFor(m => m.CoveragePercent, "", new { @class = "text-danger" })
                            <div class="coverage-info">
                                <div class="info-text">
                                    <i class="fas fa-info-circle"></i>
                                    درصد پوشش بیمه (0 تا 100). مثال: 90 به معنای 90% پوشش بیمه و 10% پرداخت بیمار است.
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(m => m.Deductible, new { @class = "form-label" })
                            <div class="input-group">
                                @Html.TextBoxFor(m => m.Deductible, new { 
                                    @class = "form-control deductible-input", 
                                    type = "number", 
                                    min = "0", 
                                    step = "1000", 
                                    placeholder = "مبلغ فرانشیز", 
                                    required = "required" 
                                })
                                <span class="input-group-text">تومان</span>
                            </div>
                            @Html.ValidationMessageFor(m => m.Deductible, "", new { @class = "text-danger" })
                            <div class="deductible-info">
                                <div class="info-text">
                                    <i class="fas fa-info-circle"></i>
                                    مبلغ فرانشیز به تومان. مبلغی که بیمار باید قبل از شروع پوشش بیمه پرداخت کند.
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Additional Information Card -->
        <div class="form-card">
            <div class="form-card-header">
                <h4 class="form-card-title">
                    <i class="fas fa-notes-medical"></i>
                    اطلاعات تکمیلی
                </h4>
            </div>
            <div class="form-card-body">
                <div class="row">
                    <div class="col-md-12">
                        <div class="form-group">
                            @Html.LabelFor(m => m.Description, new { @class = "form-label" })
                            @Html.TextAreaFor(m => m.Description, new { 
                                @class = "form-control", 
                                rows = "4",
                                placeholder = "توضیحات تکمیلی (اختیاری)"
                            })
                            @Html.ValidationMessageFor(m => m.Description, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <div class="form-check">
                                @Html.CheckBoxFor(m => m.IsActive, new { @class = "form-check-input" })
                                @Html.LabelFor(m => m.IsActive, new { @class = "form-check-label" })
                            </div>
                            <div class="form-text">
                                <i class="fas fa-info-circle"></i>
                                فعال بودن @ViewBag.ModuleName
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Form Footer -->
        <div class="form-footer">
            <div class="form-actions">
                <button type="submit" class="btn btn-primary btn-lg">
                    <i class="fas fa-save"></i>
                    @(Model.Id > 0 ? "ذخیره تغییرات" : "ایجاد @ViewBag.ModuleName")
                </button>
                <a href="@Url.Action("Index")" class="btn btn-secondary btn-lg">
                    <i class="fas fa-times"></i>
                    انصراف
                </a>
            </div>
        </div>
    </form>
</div>

@section Styles {
    <style>
        /* Medical Theme CSS Variables */
        :root {
            --medical-primary: #1e3a8a;
            --medical-secondary: #7c3aed;
            --medical-success: #059669;
            --medical-warning: #d97706;
            --medical-danger: #dc2626;
            --medical-info: #0891b2;
            --medical-text: #374151;
            --medical-bg: #f9fafb;
            --medical-border: #e5e7eb;
        }

        /* Form Container */
        .form-container {
            background: #ffffff;
            border: 1px solid var(--medical-border);
            border-radius: 0.75rem;
            padding: 2rem;
            margin: 1rem 0;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
            position: relative;
            overflow: hidden;
        }

        .form-container::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, var(--medical-primary), var(--medical-secondary), var(--medical-success));
            z-index: 1;
        }

        /* Form Header */
        .form-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
            padding-bottom: 1rem;
            border-bottom: 2px solid var(--medical-border);
        }

        .form-title {
            color: var(--medical-primary);
            font-size: 1.5rem;
            font-weight: 700;
            margin: 0;
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .form-title i {
            color: var(--medical-secondary);
        }

        /* Form Cards */
        .form-card {
            background: linear-gradient(135deg, rgba(30, 58, 138, 0.02) 0%, rgba(124, 58, 237, 0.02) 100%);
            border: 1px solid var(--medical-border);
            border-radius: 0.5rem;
            margin-bottom: 1.5rem;
            overflow: hidden;
            transition: all 0.3s ease;
        }

        .form-card:hover {
            box-shadow: 0 4px 12px rgba(30, 58, 138, 0.1);
            transform: translateY(-1px);
        }

        .form-card-header {
            background: linear-gradient(135deg, var(--medical-primary) 0%, var(--medical-secondary) 100%);
            color: white;
            padding: 1rem 1.5rem;
            border-bottom: 1px solid var(--medical-border);
        }

        .form-card-title {
            font-size: 1.1rem;
            font-weight: 600;
            margin: 0;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .form-card-body {
            padding: 1.5rem;
        }

        /* Form Groups */
        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-label {
            font-weight: 600;
            color: var(--medical-text);
            margin-bottom: 0.5rem;
            display: block;
        }

        .form-control {
            border: 2px solid var(--medical-border);
            border-radius: 0.375rem;
            padding: 0.75rem 1rem;
            font-size: 0.875rem;
            transition: all 0.3s ease;
        }

        .form-control:focus {
            border-color: var(--medical-primary);
            box-shadow: 0 0 0 0.2rem rgba(30, 58, 138, 0.25);
            outline: none;
        }

        .form-group.focused .form-label {
            color: var(--medical-primary);
            transform: translateY(-2px);
            transition: all 0.3s ease;
        }

        .form-group.focused .form-control {
            border-color: var(--medical-primary);
            box-shadow: 0 0 0 0.2rem rgba(30, 58, 138, 0.25);
            transform: translateY(-1px);
        }

        /* Input Groups */
        .input-group-text {
            background: linear-gradient(135deg, var(--medical-primary), var(--medical-secondary));
            color: white;
            border: 1px solid var(--medical-primary);
            font-weight: 600;
        }

        .input-group .form-control {
            border-right: none;
        }

        .input-group .form-control:focus {
            border-color: var(--medical-primary);
            box-shadow: 0 0 0 0.2rem rgba(30, 58, 138, 0.25);
        }

        /* Validation States */
        .form-control.is-valid {
            border-color: var(--medical-success);
            box-shadow: 0 0 0 0.2rem rgba(5, 150, 105, 0.25);
        }

        .form-control.is-invalid {
            border-color: var(--medical-danger);
            box-shadow: 0 0 0 0.2rem rgba(220, 38, 38, 0.25);
        }

        .validation-feedback {
            font-size: 0.875rem;
            margin-top: 0.5rem;
            padding: 0.5rem;
            border-radius: 0.375rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .validation-feedback i {
            font-size: 1rem;
        }

        /* Info Boxes */
        .coverage-info, .deductible-info {
            margin-top: 0.75rem;
            padding: 0.75rem;
            background: linear-gradient(135deg, rgba(30, 58, 138, 0.05), rgba(124, 58, 237, 0.05));
            border: 1px solid rgba(30, 58, 138, 0.1);
            border-radius: 0.5rem;
        }

        .coverage-info .info-text, .deductible-info .info-text {
            color: var(--medical-text);
            font-size: 0.875rem;
            line-height: 1.5;
        }

        .coverage-info .info-text i, .deductible-info .info-text i {
            color: var(--medical-info);
            margin-left: 0.5rem;
        }

        .form-text {
            color: var(--medical-text);
            font-size: 0.875rem;
            margin-top: 0.5rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .form-text i {
            color: var(--medical-info);
        }

        /* Form Footer */
        .form-footer {
            margin-top: 2rem;
            padding-top: 1.5rem;
            border-top: 2px solid var(--medical-border);
        }

        .form-actions {
            display: flex;
            gap: 1rem;
            justify-content: flex-start;
        }

        /* Buttons */
        .btn {
            padding: 0.75rem 1.5rem;
            font-weight: 600;
            border-radius: 0.5rem;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

        .btn-primary {
            background: linear-gradient(135deg, var(--medical-primary), var(--medical-secondary));
            border: none;
            color: white;
        }

        .btn-primary:hover {
            background: linear-gradient(135deg, #1e40af, #6d28d9);
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(30, 58, 138, 0.3);
        }

        .btn-secondary {
            background: #6b7280;
            border: none;
            color: white;
        }

        .btn-secondary:hover {
            background: #4b5563;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(107, 114, 128, 0.3);
        }

        .btn-light {
            background: rgba(255, 255, 255, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.3);
            color: white;
            transition: all 0.3s ease;
        }

        .btn-light:hover {
            background: rgba(255, 255, 255, 0.3);
            border-color: rgba(255, 255, 255, 0.5);
            color: white;
            transform: translateY(-1px);
        }

        /* Loading States */
        .btn-loading {
            position: relative;
            color: transparent !important;
        }

        .btn-loading::after {
            content: '';
            position: absolute;
            width: 16px;
            height: 16px;
            top: 50%;
            left: 50%;
            margin-left: -8px;
            margin-top: -8px;
            border: 2px solid transparent;
            border-top-color: currentColor;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .form-container {
                padding: 1rem;
                margin: 0.5rem 0;
            }

            .form-header {
                flex-direction: column;
                gap: 1rem;
                text-align: center;
            }

            .form-actions {
                flex-direction: column;
            }

            .btn {
                width: 100%;
                justify-content: center;
            }
        }
    </style>
}

@section Scripts {
    <script>
        $(document).ready(function() {
            console.log('🏥 [Module] Form - Production Ready Version Loaded');
            console.log('📊 Form Data:', {
                id: '@Model.Id',
                name: '@Model.Name',
                code: '@Model.Code',
                validFrom: '@Model.ValidFromShamsi',
                validTo: '@Model.ValidToShamsi',
                coveragePercent: '@Model.CoveragePercent',
                deductible: '@Model.Deductible',
                isActive: '@Model.IsActive',
                timestamp: new Date().toISOString()
            });

            // Initialize Persian DatePicker
            initializePersianDatePickers();

            // Initialize validation
            initializeValidation();

            // Initialize form events
            initializeFormEvents();

            // Initialize AJAX handlers
            initializeAjaxHandlers();
        });

        // Persian DatePicker Initialization
        function initializePersianDatePickers() {
            $('.persian-datepicker').persianDatepicker({
                format: 'YYYY/MM/DD',
                calendar: {
                    persian: {
                        locale: 'fa',
                        showHint: true,
                        leapYearMode: 'algorithmic'
                    }
                },
                checkDate: function(unix) {
                    return unix < Date.now();
                },
                autoClose: true,
                initialValue: false,
                position: 'auto',
                viewMode: 'day',
                inputDelay: 800,
                navigator: {
                    enabled: true,
                    scroll: {
                        enabled: true
                    }
                },
                toolbox: {
                    enabled: true,
                    calendarSwitch: {
                        enabled: false
                    },
                    todayButton: {
                        enabled: true,
                        text: 'امروز'
                    },
                    submitButton: {
                        enabled: true,
                        text: 'تأیید'
                    },
                    clearButton: {
                        enabled: true,
                        text: 'پاک کردن'
                    }
                }
            });
        }

        // Validation Initialization
        function initializeValidation() {
            // Real-time validation
            $('.form-control').on('input change', function() {
                validateField($(this));
            });

            // Form submission validation
            $('form').on('submit', function(e) {
                console.log('📤 Form Submission Started');
                
                if (!validateForm()) {
                    e.preventDefault();
                    console.error('❌ Form validation failed');
                    return false;
                }
                
                console.log('✅ Form validation passed, submitting...');
                return true;
            });
        }

        // Form Events
        function initializeFormEvents() {
            // Field focus effects
            $('.form-control').on('focus', function() {
                $(this).closest('.form-group').addClass('focused');
            }).on('blur', function() {
                $(this).closest('.form-group').removeClass('focused');
            });

            // Coverage percent validation
            $('.coverage-percent-input').on('input change', function() {
                var $input = $(this);
                var value = parseFloat($input.val());
                var $formGroup = $input.closest('.form-group');
                
                console.log('📊 Coverage Percent Changed:', value);
                
                $input.removeClass('is-valid is-invalid');
                $formGroup.find('.validation-feedback').remove();
                
                if (isNaN(value) || value < 0 || value > 100) {
                    $input.addClass('is-invalid');
                    $formGroup.append('<div class="validation-feedback text-danger"><i class="fas fa-exclamation-triangle"></i> درصد پوشش باید بین 0 تا 100 باشد</div>');
                    console.warn('⚠️ Invalid coverage percent:', value);
                } else {
                    $input.addClass('is-valid');
                    $formGroup.append('<div class="validation-feedback text-success"><i class="fas fa-check-circle"></i> درصد پوشش معتبر است</div>');
                    console.log('✅ Valid coverage percent:', value);
                    
                    // Calculate patient share
                    var patientShare = 100 - value;
                    console.log('💰 Patient Share:', patientShare + '%');
                }
            });

            // Deductible validation
            $('.deductible-input').on('input change', function() {
                var $input = $(this);
                var value = parseFloat($input.val());
                var $formGroup = $input.closest('.form-group');
                
                console.log('💰 Deductible Changed:', value);
                
                $input.removeClass('is-valid is-invalid');
                $formGroup.find('.validation-feedback').remove();
                
                if (isNaN(value) || value < 0) {
                    $input.addClass('is-invalid');
                    $formGroup.append('<div class="validation-feedback text-danger"><i class="fas fa-exclamation-triangle"></i> مبلغ فرانشیز باید بزرگتر یا مساوی صفر باشد</div>');
                    console.warn('⚠️ Invalid deductible:', value);
                } else {
                    $input.addClass('is-valid');
                    $formGroup.append('<div class="validation-feedback text-success"><i class="fas fa-check-circle"></i> مبلغ فرانشیز معتبر است</div>');
                    console.log('✅ Valid deductible:', value);
                    
                    // Format number with thousand separators
                    if (value > 0) {
                        var formattedValue = value.toLocaleString('fa-IR');
                        console.log('💵 Formatted Deductible:', formattedValue + ' تومان');
                    }
                }
            });

            // Date validation
            $('.persian-datepicker').on('change', function() {
                var $input = $(this);
                var inputId = $input.attr('id');
                var value = $input.val();
                var $formGroup = $input.closest('.form-group');
                
                console.log('📅 Date Field Changed:', {
                    fieldId: inputId,
                    value: value,
                    timestamp: new Date().toISOString()
                });
                
                $input.removeClass('is-valid is-invalid');
                $formGroup.find('.validation-feedback').remove();
                
                if (!value || value.trim() === '') {
                    if (inputId === 'ValidFromShamsi') {
                        $input.addClass('is-invalid');
                        $formGroup.append('<div class="validation-feedback text-danger"><i class="fas fa-exclamation-triangle"></i> تاریخ شروع اعتبار الزامی است</div>');
                        console.warn('⚠️ ValidFrom is required');
                    }
                    return;
                }
                
                if (!isValidPersianDate(value)) {
                    $input.addClass('is-invalid');
                    $formGroup.append('<div class="validation-feedback text-danger"><i class="fas fa-exclamation-triangle"></i> فرمت تاریخ نامعتبر است (مثال: 1404/06/23)</div>');
                    console.warn('⚠️ Invalid Persian date format:', value);
                    return;
                }
                
                // Check date range validation
                var validFrom = $('#ValidFromShamsi').val();
                var validTo = $('#ValidToShamsi').val();
                
                if (validFrom && validTo) {
                    var fromDate = convertPersianToGregorian(validFrom);
                    var toDate = convertPersianToGregorian(validTo);
                    
                    console.log('📊 Date Range Validation:', {
                        validFrom: validFrom,
                        validTo: validTo,
                        fromDate: fromDate,
                        toDate: toDate
                    });
                    
                    if (fromDate >= toDate) {
                        $('#ValidToShamsi').addClass('is-invalid');
                        $('#ValidToShamsi').removeClass('is-valid');
                        $('#ValidToShamsi').closest('.form-group').find('.validation-feedback').remove();
                        $('#ValidToShamsi').closest('.form-group').append('<div class="validation-feedback text-danger"><i class="fas fa-exclamation-triangle"></i> تاریخ پایان اعتبار نمی‌تواند قبل از تاریخ شروع اعتبار باشد</div>');
                        console.warn('⚠️ Invalid date range: End date is before start date');
                    } else {
                        $('#ValidToShamsi').removeClass('is-invalid');
                        $('#ValidToShamsi').addClass('is-valid');
                        $('#ValidToShamsi').closest('.form-group').find('.validation-feedback').remove();
                        $('#ValidToShamsi').closest('.form-group').append('<div class="validation-feedback text-success"><i class="fas fa-check-circle"></i> بازه زمانی معتبر است</div>');
                        console.log('✅ Valid date range');
                    }
                } else {
                    $input.addClass('is-valid');
                    $formGroup.append('<div class="validation-feedback text-success"><i class="fas fa-check-circle"></i> تاریخ معتبر است</div>');
                    console.log('✅ Valid date:', value);
                }
            });
        }

        // AJAX Handlers
        function initializeAjaxHandlers() {
            // Global AJAX error handler
            $(document).ajaxError(function(event, xhr, settings, error) {
                console.error('❌ AJAX Error:', {
                    url: settings.url,
                    method: settings.type,
                    status: xhr.status,
                    error: error,
                    response: xhr.responseText,
                    timestamp: new Date().toISOString()
                });
                handleAjaxError(xhr, settings, error);
            });
            
            // Global AJAX success handler
            $(document).ajaxSuccess(function(event, xhr, settings) {
                console.log('✅ AJAX Success:', {
                    url: settings.url,
                    method: settings.type,
                    status: xhr.status,
                    timestamp: new Date().toISOString()
                });
            });
        }

        // Validation Helper Functions
        function validateField($field) {
            var fieldName = $field.attr('name') || $field.attr('id');
            var value = $field.val();
            var isRequired = $field.prop('required');
            
            console.log('🔍 Validating field:', {
                field: fieldName,
                value: value,
                isRequired: isRequired,
                timestamp: new Date().toISOString()
            });
            
            $field.removeClass('is-valid is-invalid');
            
            if (isRequired && (!value || value.trim() === '')) {
                $field.addClass('is-invalid');
                return false;
            }
            
            if (value && value.trim() !== '') {
                $field.addClass('is-valid');
            }
            
            return true;
        }

        function validateForm() {
            var isValid = true;
            var errors = [];
            
            // Validate required fields
            $('.form-control[required]').each(function() {
                if (!validateField($(this))) {
                    isValid = false;
                    var fieldName = $(this).attr('name') || $(this).attr('id');
                    errors.push(fieldName + ' الزامی است');
                }
            });
            
            // Validate date range
            var validFrom = $('#ValidFromShamsi').val();
            var validTo = $('#ValidToShamsi').val();
            
            if (validFrom && validTo) {
                var fromDate = convertPersianToGregorian(validFrom);
                var toDate = convertPersianToGregorian(validTo);
                
                if (fromDate >= toDate) {
                    isValid = false;
                    errors.push('تاریخ پایان اعتبار نمی‌تواند قبل از تاریخ شروع اعتبار باشد');
                }
            }
            
            if (!isValid) {
                console.error('❌ Form validation failed:', errors);
                alert('لطفاً خطاهای زیر را برطرف کنید:\n' + errors.join('\n'));
            }
            
            return isValid;
        }

        // Persian Date Helper Functions
        function isValidPersianDate(persianDate) {
            if (!persianDate || persianDate.trim() === '') {
                return false;
            }
            
            var englishDate = persianDate.replace(/[۰-۹]/g, function(d) {
                return String.fromCharCode(d.charCodeAt(0) - '۰'.charCodeAt(0) + '0'.charCodeAt(0));
            });
            
            var persianDatePattern = /^[12][0-9]{3}\/(0[1-9]|1[0-2])\/(0[1-9]|[12][0-9]|3[01])$/;
            return persianDatePattern.test(englishDate);
        }

        function convertPersianToGregorian(persianDate) {
            if (!persianDate) return null;
            
            try {
                console.log('🔄 Converting Persian date to Gregorian:', persianDate);
                
                var englishDate = persianDate.replace(/[۰-۹]/g, function(d) {
                    return String.fromCharCode(d.charCodeAt(0) - '۰'.charCodeAt(0) + '0'.charCodeAt(0));
                });
                
                var parts = englishDate.split('/');
                if (parts.length === 3) {
                    var year = parseInt(parts[0]);
                    var month = parseInt(parts[1]);
                    var day = parseInt(parts[2]);
                    
                    var gregorianYear = year + 621;
                    var result = new Date(gregorianYear, month - 1, day);
                    console.log('✅ Converted date:', result);
                    return result;
                }
            } catch (e) {
                console.error('❌ Error converting Persian date:', e);
            }
            
            return null;
        }

        // Error Handling
        function handleAjaxError(xhr, settings, error) {
            var errorMessage = 'خطا در ارتباط با سرور';
            
            try {
                var response = JSON.parse(xhr.responseText);
                if (response.message) {
                    errorMessage = response.message;
                }
            } catch (e) {
                // Use default error message
            }
            
            showError(errorMessage);
        }

        function showError(message) {
            // You can implement your preferred error display method here
            console.error('💥 Error:', message);
            alert('خطا: ' + message);
        }

        function showSuccess(message) {
            // You can implement your preferred success display method here
            console.log('✅ Success:', message);
            alert('موفقیت: ' + message);
        }
    </script>
}
